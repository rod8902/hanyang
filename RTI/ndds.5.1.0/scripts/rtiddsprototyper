#!/bin/sh
# NAME:
#   Wrapper for calling rtiddsprototyper
#
# USAGE:
#   rtiddsprototyper -help
#


filename=$0
scriptDir=`dirname "$filename"`
utilityLibDir="${scriptDir}/../lib"

################################################################
# SCRIPT maintenance for new platforms and utilities

executableName="rtiddsprototyper"

# This section needs to be updated if we add new classes of platforms
# e.g. entirely new operating systems or major versions
# The script looks at the lib directories so it is robust to
# new compiler names/versions as well as minor OS revisions

sparcSol28Platforms=`ls -1 $utilityLibDir/ | grep sparcSol2.8`
i86Sol29Platforms=`ls -1 $utilityLibDir/ | grep i86Sol2.9`
sparcSol29Platforms=`ls -1 $utilityLibDir/ | grep sparcSol2.9`
sparcSol210Platforms=`ls -1 $utilityLibDir/ | grep sparcSol2.10`

i86Sol210Platforms=`ls -1 $utilityLibDir/ | grep i86Sol2.10`
x64Sol210Platforms=`ls -1 $utilityLibDir/ | grep x64Sol2.10`
sparc64Sol210Platforms=`ls -1 $utilityLibDir/ | grep sparc64Sol2.10`

i86DarwinTigerPlatforms=`ls -1 $utilityLibDir/ | grep i86Darwin8.5`
ppcDarwinTigerPlatforms=`ls -1 $utilityLibDir/ | grep ppcDarwin8.5`
i86DarwinLeopardPlatforms=`ls -1 $utilityLibDir/ | grep i86Darwin9.0`
ppcDarwinLeopardPlatforms=`ls -1 $utilityLibDir/ | grep ppcDarwin9.0`
x64Darwin10Platforms=`ls -1 $utilityLibDir/ | grep x64Darwin10`
x64Darwin12Platforms=`ls -1 $utilityLibDir/ | grep x64Darwin12`
x64DarwinPlatforms=`ls -1 $utilityLibDir/ | grep x64Darwin`

i86Linux24Platforms=`ls -1 $utilityLibDir/ | grep i86Linux2.4`
x64Linux24Platforms=`ls -1 $utilityLibDir/ | grep x64Linux2.4`
i86Linux26Platforms=`ls -1 $utilityLibDir/ | grep i86Linux2.6`
x64Linux26Platforms=`ls -1 $utilityLibDir/ | grep x64Linux2.6`
i86Linux3xPlatforms=`ls -1 $utilityLibDir/ | grep i86Linux3`
x64Linux3xPlatforms=`ls -1 $utilityLibDir/ | grep x64Linux3`

# ppc32 linux: need to distinguish between e500 v1/v2 cores, and the rest

# add any powerpc cpu's with SPE (spe is a non-canonical FPU) to this list.
ppc_spe_cpus="ppc85xx
p2020"

ppcLinux26Platforms=`ls -1 $utilityLibDir/ | grep ppc | grep Linux2.6`

dirsInUtilityLibDir=`ls -1 $utilityLibDir`
ppc_spe_Linux26Platforms=`
    for ppc_spe_cpu in $ppc_spe_cpus; do
        echo "$dirsInUtilityLibDir" \
            | grep ppc | grep Linux2.6 | grep $ppc_spe_cpu
    done
`

ppcLinux26Platforms=`ls -1 $utilityLibDir/ | grep ppc | grep Linux2.6`
ppc64Linux26Platforms=`ls -1 $utilityLibDir/ | grep ppc64Linux2.6`
power7Linux26Platforms=`ls -1 $utilityLibDir/ | grep power7Linux2.6`
cell64Linux26Platforms=`ls -1 $utilityLibDir/ | grep cell64Linux2.6`
armv6LinuxPlatforms=`ls -1 $utilityLibDir/ | grep armv6.*Linux`
armv7Linux26Platforms=`ls -1 $utilityLibDir/ | grep armv7leLinux2.6`

i86SusePlatforms=`ls -1 $utilityLibDir/ | grep i86Suse`
x64SusePlatforms=`ls -1 $utilityLibDir/ | grep x64Suse`

i86Lynx4Platforms=`ls -1 $utilityLibDir/ | grep i86Lynx4`
ppcLynx4Platforms=`ls -1 $utilityLibDir/ | grep ppc | grep Lynx4`

i86LynxSEPlatforms=`ls -1 $utilityLibDir/ | grep i86LynxOS_SE`

ppcbeQNX6Platforms=`ls -1 $utilityLibDir/ | grep ppcbeQNX6`
i86QNX6Platforms=`ls -1 $utilityLibDir/ | grep i86QNX6`

p5AIXPlatforms=`ls -1 $utilityLibDir/ | grep p5AIX`
p7AIXPlatforms=`ls -1 $utilityLibDir/ | grep p7AIX`

i86RedHawk51Platforms=`ls -1 $utilityLibDir/ | grep i86RedHawk5.1`

i86RedHawk54Platforms=`ls -1 $utilityLibDir/ | grep i86RedHawk5.4`

platformName="unknown"

os=`uname -s`
osver=`uname -r`

case $os in
SunOS*)
    processor=`uname -p`
    case $osver in
    5.8*)
    platformsToTry=$sparcSol28Platforms
    ;;
    5.9*)
    if test "$processor" = "i386"; then
	platformsToTry=$i86Sol29Platforms
    fi
    if test "$processor" = "sparc"; then
    	platformsToTry="$sparcSol29Platforms $sparcSol28Platforms"
    fi
    ;;
    5.10*)
    if test "$processor" = "i386"; then
        platformsToTry="$i86Sol210Platforms $x64Sol210Platforms"
    fi
    if test "$processor" = "sparc"; then
            platformsToTry="$sparcSol210Platforms $sparcSol29Platforms $sparcSol28Platforms $sparc64Sol210Platforms"
    fi
    ;;
    esac
    ;;

AIX*)
    processor=`uname -p`
    if test "$processor" = "powerpc"; then
      platformsToTry="$p5AIXPlatforms $p7AIXPlatforms"
    fi
    ;;

Darwin*)
    processor=`uname -p`
    case $osver in
    8.*)
      if test "$processor" = "powerpc"; then
        platformsToTry="$ppcDarwinTigerPlatforms"
      else
        platformsToTry="$i86DarwinTigerPlatforms"
      fi
    ;;
    9.*)
      if test "$processor" = "powerpc"; then
        platformsToTry="$ppcDarwinLeopardPlatforms"
      else
        platformsToTry="$i86DarwinLeopardPlatforms"
      fi
    ;;
    *)
      platformsToTry="$x64DarwinPlatforms"
    ;;
    esac
    ;;

Linux*)
    processor=`uname -m`
    case $osver in
    2.4*)
    if test "$processor" = "x86_64"; then
        platformsToTry="$x64Linux24Platforms"
    else
        platformsToTry=$i86Linux24Platforms
    fi;;
    2.6* | 3.*)
    if test "$processor" = "x86_64"; then
        platformsToTry="$x64Linux3xPlatforms $x64Linux26Platforms $x64SusePlatforms $i86Linux3xPlatforms $i86Linux26Platforms $i86SusePlatforms"
    elif test "$processor" = "ppc64"; then
        platformsToTry="$ppc64Linux26Platforms $cell64Linux26Platforms"
    elif test "$processor" = "ppc"; then
        if test -n "`cat /proc/cpuinfo | grep ^cpu | grep e500v2`"; then
            platformsToTry="$ppc_spe_Linux26Platforms"
        else
            platformsToTry="$ppcLinux26Platforms"
        fi
    elif test "$processor" = "unknown"; then
        processor=`uname -m`
	if test "$processor" = "x86_64"; then
		platformsToTry="$x64Linux3xPlatforms $x64Linux26Platforms"
	else
		platformsToTry="$i86LInux3xPlatforms $i86Linux26Platforms $ppcLinux26Platforms"
	fi	    
    else
        platformsToTry="$i86Linux3xPlatforms $i86Linux26Platforms $i86SusePlatforms $i86RedHawk51Platforms $i86RedHawk54Platforms $armv6LinuxPlatforms $armv7Linux26Platforms $ppcLinux26Platforms"
    fi;;
    esac
    ;;

LynxOS-SE*)
    processor=`uname -m`
    case $osver in
    3.*)
    if test "$processor" = "i386"; then
        platformsToTry=$i86LynxSEPlatforms
    fi
    ;;
    esac
    ;;

LynxOS*)
    processor=`uname -m`
    case $osver in
    4.*)
    if test "$processor" = "i386"; then
        platformsToTry=$i86Lynx4Platforms
    fi
    if test "$processor" = "PowerPC"; then
        platformsToTry=$ppcLynx4Platforms
    fi
    ;;
    esac
    ;;

QNX*)
    processor=`uname -p`
    case $osver in
    6.*)
    if [ "$processor"="ppcbe" ]; then
        platformsToTry=$ppcbeQNX6Platforms
    fi
    if [ "$processor"="i386" ]; then
        platformsToTry=$i86QNX6Platforms
    fi
    ;;
    esac
    ;;

*)
    # If we don't recognize the OS, fall back to JREHOME. It may still work.
    echo "Warning: OS $os may not be supported."
    ;;
esac

# Now search the platform directories for the executable in the
# correct order and run the first one found
#echo testing $platformsToTry

for platform in $platformsToTry
do
#   echo testing $utilityLibDir/$platform/$executableName
   if [ -x $utilityLibDir/$platform/$executableName ]; then
       platformName=$platform
       break;
   fi
done

if [ "$platformName" = "unknown" ]; then
    echo "Warning: Could not find the executable for $executableName."
    echo "         Please examine $NDDSHOME/lib/<arch> to find the executable for $executableName"
    echo "         and run this executable directly. If $executableName is not in your lib directory"
    echo "         please contact support@rti.com."
else
    exec ${utilityLibDir}/${platformName}/$executableName $@
fi

