##/* $Id: mainBody.vm,v 1.10 2013/09/26 10:24:44 aida Exp $
##
##   (c) Copyright, Real-Time Innovations, Inc. 2001.  All rights reserved.
##   No duplications, whole or partial, manual or electronic, may be made
##   without prior written permission.  Any such copies, or
##   revisions thereof, must display this notice unaltered.
##   This code contains trade secrets of Real-Time Innovations, Inc.
##modification history:
##---------------------
##2.0,26sept13,ajm Adding copy directives
##10a, 12jul13,ajm Fixing an error with module packagename
##10a,10jun13,ajm CODEGENII-109 adding envMap and constructMapList variables
##10a,08mar13, ajm CODEGENII-30: Code reviews
##10a,25oct12, ajm Refactorizing code and variable names.
##                 RRTIDDSGEN-32 support for -use42eAlignment and -generateCTypecode
##10a,10oct12, ajm Upgrade to Bigpine.Formatting and commenting
##10a,11nov11, ajm Changing the name of the templates to camelCase
##10a,04nov11, ajm Refactoring code. Variable name changed
##10a,12oct11, Adding union support
##10a,26sep11,ajm adding enum support 
##10a,22sep11,ajm adding valuetypes support
##10a,22sep11,ajm  Adding support for valueTypes
##10a,16ag11,jmt Adding funcionality for basic types, const and arrays
##10a,15ag11,jmt created 
##
##========================================================================*/
--  ============================================================================
--
--         WARNING: THIS FILE IS AUTO-GENERATED. DO NOT MODIFY.
--
--  This file was generated from ${envMap.idlFileName}.idl using "rtiddsgen".
--  The rtiddsgen tool is part of the RTI Connext distribution.
--  For more information, type 'rtiddsgen -help' at a command shell
--  or consult the RTI Connext manual.
--
--  ============================================================================

with RTI;

package body ${module.packageName} is


   use type Standard.RTI.Bool;
#foreach($node in $constructMapList)
#*--*##if($node.constructKind=="directive") ##if it is a directive we print its value
 ##we avoid to copy the declaration directives
#*----*##if($node.directiveKind=="copy-ada"||$node.directiveKind=="copy"||$node.directiveKind=="copy-ada-begin")
$node.value
#*----*##end
#*--*##elseif($node.constructKind=="struct" || $node.constructKind=="valueType" ||$node.constructKind=="alias" ||$node.constructKind=="enum" ||$node.constructKind=="union")
   procedure Initialize
     (This              : in out ${node.name}) is
      function Internal
        (This : not null access ${node.name})
         return Standard.RTI.Bool;
      pragma Import (C, Internal, "${node.nativeCFQNameInModule}_initialize_ex");
   begin
      if not Internal (This'Unrestricted_Access) then
         raise Standard.DDS.ERROR with "unable to initialize";
      end if;
   end Initialize;

   procedure Finalize
     (This            : in out ${node.name}) is
      procedure Internal
        (This : access ${node.name};
         deletePointers : Standard.RTI.Bool);
      pragma Import (C, Internal, "${node.nativeCFQNameInModule}_finalize_ex");
   begin
      Internal (This'Unrestricted_Access, Standard.RTI.RTI_BOOL_TRUE);
   end Finalize;

   procedure Copy
     (Dst : in out ${node.name};
      Src : in ${node.name}) is
      function Internal
        (Dst : not null access ${node.name};
         Src : not null access ${node.name})
         return Standard.RTI.Bool;
      pragma Import (C, Internal, "${node.nativeCFQNameInModule}_copy");
   begin
      if not Internal (Dst'Unrestricted_Access, Src'Unrestricted_Access) then
         raise Standard.DDS.ERROR with "unable to copy";
      end if;
   end Copy;
#end   
#end ##main foreach structure
end ${module.packageName};

