##/* $Id: dataWriterSpecification.vm,v 1.6 2013/06/27 15:59:41 aida Exp $
##
##   (c) Copyright, Real-Time Innovations, Inc. 2001.  All rights reserved.
##   No duplications, whole or partial, manual or electronic, may be made
##   without prior written permission.  Any such copies, or
##   revisions thereof, must display this notice unaltered.
##   This code contains trade secrets of Real-Time Innovations, Inc.
##modification history:
##---------------------
##10a,10jun13,ajm CODEGENII-109 adding envMap and constructMapList variables
##10a,25oct12, ajm Refactorizing code and variable names.
##                 RRTIDDSGEN-32 support for -use42eAlignment and -generateCTypecode
##10a,10oct12, ajm Upgrade to Bigpine.Formatting and commenting
##10a,11nov11, ajm Changing the name of the templates to camelCase
##10a,04nov11, ajm Refactoring code. Variable name changed
##10a,16ag11,ajm Adding funcionality for basic types, const and arrays
##10a,15ag11,ajm created 
##
##========================================================================*/
##-----------------------------------------------------------------
##               
##       Template for a data writer specification file
## 
##--------------------------------------------------------------------  
--  ============================================================================
--
--         WARNING: THIS FILE IS AUTO-GENERATED. DO NOT MODIFY.
--
--  This file was generated from ${envMap.idlFileName}.idl using "rtiddsgen".
--  The rtiddsgen tool is part of the RTI Connext distribution.
--  For more information, type 'rtiddsgen -help' at a command shell
--  or consult the RTI Connext manual.
--
--  ============================================================================

pragma Warnings (Off); --  Since this is autogenerated code.
with DDS.DataWriter;
with DDS.DataWriter_Impl;
with $constructMap.packageName; use $constructMap.packageName;
pragma Warnings (On);
package ${constructMap.nativeFQName}_DataWriter is

   type Ref is new Standard.DDS.DataWriter_Impl.Ref with null record;
   type Ref_Access is access all Ref'Class;

   function Register_Instance
     (This          : not null access Ref;      Instance_Data : not null ${constructMap.name}_Access)
      return Standard.DDS.InstanceHandle_T;

   function Register_Instance_W_Timestamp
     (This             : not null access Ref;      Instance_Data    : not null ${constructMap.name}_Access;
      Source_Timestamp : in Standard.DDS.Time_T)
      return Standard.DDS.InstanceHandle_T;

   procedure Unregister_Instance
     (This          : not null access Ref;      Instance_Data : not null ${constructMap.name}_Access;
      Handle        : in Standard.DDS.InstanceHandle_T);

   procedure Unregister_Instance_W_Timestamp
     (This             : not null access Ref;      Instance_Data    : not null ${constructMap.name}_Access;
      Handle           : in Standard.DDS.InstanceHandle_T;
      Source_Timestamp : in Standard.DDS.Time_T);

   procedure Write
     (This          : not null access Ref;      Instance_Data : not null ${constructMap.name}_Access;
      Handle        : in Standard.DDS.InstanceHandle_T_Access);

   procedure Write_W_Timestamp
     (This          : not null access Ref;      Instance_Data    : not null ${constructMap.name}_Access;
      Handle           : in Standard.DDS.InstanceHandle_T_Access;
      Source_Timestamp : in Standard.DDS.Time_T);

   procedure Dispose
     (This            : not null access Ref;      Instance_Data   : not null ${constructMap.name}_Access;
      Instance_Handle : in Standard.DDS.InstanceHandle_T);

   procedure Dispose_W_Timestamp
     (This             : not null access Ref;      Instance_Data    : not null ${constructMap.name}_Access;
      Instance_Handle  : in Standard.DDS.InstanceHandle_T;
      Source_Timestamp : in Standard.DDS.Time_T);

   procedure Get_Key_Value
     (This       : not null access Ref;      Key_Holder : not null ${constructMap.name}_Access;
      Handle     : in Standard.DDS.InstanceHandle_T);

   function Lookup_Instance
     (This       : not null access Ref;      Key_Holder : not null ${constructMap.name}_Access) return Standard.DDS.InstanceHandle_T;

   function CreateTypedI return Standard.DDS.DataWriter.Ref_Access;

   procedure DestroyTypedI
     (Writer : in out Standard.DDS.DataWriter.Ref_Access);

end ${constructMap.nativeFQName}_DataWriter;
