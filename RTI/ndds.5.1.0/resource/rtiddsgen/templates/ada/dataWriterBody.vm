##/* $Id: dataWriterBody.vm,v 1.8 2013/06/27 15:59:42 aida Exp $
##
##   (c) Copyright, Real-Time Innovations, Inc. 2001.  All rights reserved.
##   No duplications, whole or partial, manual or electronic, may be made
##   without prior written permission.  Any such copies, or
##   revisions thereof, must display this notice unaltered.
##   This code contains trade secrets of Real-Time Innovations, Inc.
##modification history:
##---------------------
##10a,10jun13,ajm CODEGENII-109 adding envMap and constructMapList variables
##10a,08mar13, ajm CODEGENII-30: Code reviews
##10a,25oct12, ajm Refactorizing code and variable names.
##                 RRTIDDSGEN-32 support for -use42eAlignment and -generateCTypecode
##10a,10oct12, ajm Upgrade to Bigpine.Formatting and commenting
##10a,11nov11, ajm Changing the name of the templates to camelCase
##10a,04nov11, ajm Refactoring code. Variable name changed
##10a,16ag11,ajm Adding funcionality for basic types, const and arrays
##10a,15ag11,ajm created 
##
##========================================================================*/
##-----------------------------------------------------------------
##               
##       Template for a data writer body file
## 
##------------------------------------------------------------------
--  ============================================================================
--
--         WARNING: THIS FILE IS AUTO-GENERATED. DO NOT MODIFY.
--
--  This file was generated from ${envMap.idlFileName}.idl using "rtiddsgen".
--  The rtiddsgen tool is part of the RTI Connext distribution.
--  For more information, type 'rtiddsgen -help' at a command shell
--  or consult the RTI Connext manual.
--
--  ============================================================================

pragma Warnings (Off); --  Since this is autogenerated code.
with System;

with DDS.Publisher_Impl;

with ${constructMap.packageName}; use ${constructMap.packageName};
pragma Warnings (On);
package body ${constructMap.nativeFQName}_DataWriter is

   -----------------------
   -- Register_Instance --
   -----------------------

   function Register_Instance
     (This          : not null access Ref;      Instance_Data : not null ${constructMap.name}_Access)
      return Standard.DDS.InstanceHandle_T
   is
      function Internal
        (This          : System.Address;
         Instance_Data : not null ${constructMap.name}_Access)
         return Standard.DDS.InstanceHandle_T;
      pragma Import (C, Internal, "${constructMap.nativeCFQNameInModule}DataWriter_register_instance");
   begin
      return Internal (This.GetInterface, Instance_Data);
   end Register_Instance;

   -----------------------------------
   -- Register_Instance_W_Timestamp --
   -----------------------------------

   function Register_Instance_W_Timestamp
     (This             : not null access Ref;      Instance_Data    : not null ${constructMap.name}_Access;
      Source_Timestamp : in Standard.DDS.Time_T)
      return Standard.DDS.InstanceHandle_T
   is
      function Internal
        (This             : System.Address;
         Instance_Data    : not null ${constructMap.name}_Access;
         Source_Timestamp : access constant Standard.DDS.Time_T)
         return Standard.DDS.InstanceHandle_T;
      pragma Import (C, Internal, "${constructMap.nativeCFQNameInModule}DataWriter_register_instance_w_timestamp");
   begin
      return Internal (This.GetInterface, Instance_Data, Source_Timestamp'Unrestricted_Access);
   end Register_Instance_W_Timestamp;

   -------------------------
   -- Unregister_Instance --
   -------------------------

   procedure Unregister_Instance
     (This          : not null access Ref;      Instance_Data : not null ${constructMap.name}_Access;
      Handle        : in Standard.DDS.InstanceHandle_T)
   is
      function Internal
        (This          : System.Address;
         Instance_Data : not null ${constructMap.name}_Access;
         Handle        : in Standard.DDS.InstanceHandle_T)
         return Standard.DDS.ReturnCode_T;
      pragma Import (C, Internal, "${constructMap.nativeCFQNameInModule}DataWriter_unregister_instance");
   begin
      Standard.DDS.Ret_Code_To_Exception
        (Internal (This.GetInterface, Instance_Data, Handle));
   end Unregister_Instance;

   -------------------------------------
   -- Unregister_Instance_W_Timestamp --
   -------------------------------------

   procedure Unregister_Instance_W_Timestamp
     (This             : not null access Ref;      Instance_Data    : not null ${constructMap.name}_Access;
      Handle           : in Standard.DDS.InstanceHandle_T;
      Source_Timestamp : in Standard.DDS.Time_T)
   is
      function Internal
        (This             : System.Address;
         Instance_Data    : not null ${constructMap.name}_Access;
         Handle           : in Standard.DDS.InstanceHandle_T;
         Source_Timestamp : access constant Standard.DDS.Time_T)
         return Standard.DDS.ReturnCode_T;
      pragma Import (C, Internal, "${constructMap.nativeCFQNameInModule}DataWriter_unregister_instance_w_timestamp");
   begin
      Standard.DDS.Ret_Code_To_Exception
        (Internal (This.GetInterface, Instance_Data, Handle, Source_Timestamp'Unrestricted_Access));
   end Unregister_Instance_W_Timestamp;

   -----------
   -- Write --
   -----------

   procedure Write
     (This          : not null access Ref;      Instance_Data : not null ${constructMap.name}_Access;
      Handle        : in Standard.DDS.InstanceHandle_T_Access)
   is
      function Internal
        (This          : System.Address;
         Instance_Data : not null ${constructMap.name}_Access;
         Handle        : in Standard.DDS.InstanceHandle_T_Access)
         return Standard.DDS.ReturnCode_T;
      pragma Import (C, Internal, "${constructMap.nativeCFQNameInModule}DataWriter_write");
   begin
      Standard.DDS.Ret_Code_To_Exception (Internal (This.GetInterface, Instance_Data, Handle));
   end Write;

   -----------------------
   -- Write_W_Timestamp --
   -----------------------

   procedure Write_W_Timestamp
     (This             : not null access Ref;      Instance_Data    : not null ${constructMap.name}_Access;
      Handle           : in Standard.DDS.InstanceHandle_T_Access;
      Source_Timestamp : in Standard.DDS.Time_T)
   is
      function Internal
        (This             : System.Address;
         Instance_Data    : not null ${constructMap.name}_Access;
         Handle           : in Standard.DDS.InstanceHandle_T_Access;
         Source_Timestamp : access constant Standard.DDS.Time_T)
         return Standard.DDS.ReturnCode_T;
      pragma Import (C, Internal, "${constructMap.nativeCFQNameInModule}DataWriter_write_w_timestamp");
   begin
      Standard.DDS.Ret_Code_To_Exception (Internal (This.GetInterface, Instance_Data, Handle, Source_Timestamp'Unrestricted_Access));
   end Write_W_Timestamp;

   -------------
   -- Dispose --
   -------------

   procedure Dispose
     (This            : not null access Ref;      Instance_Data   : not null ${constructMap.name}_Access;
      Instance_Handle : in Standard.DDS.InstanceHandle_T)
   is
      function Internal
        (This          : System.Address;
         Instance_Data : not null ${constructMap.name}_Access;
         Handle        : in Standard.DDS.InstanceHandle_T)
         return Standard.DDS.ReturnCode_T;
      pragma Import (C, Internal, "${constructMap.nativeCFQNameInModule}DataWriter_dispose");
   begin
      Standard.DDS.Ret_Code_To_Exception (Internal (This.GetInterface, Instance_Data, Instance_Handle));
   end Dispose;

   -------------------------
   -- Dispose_W_Timestamp --
   -------------------------

   procedure Dispose_W_Timestamp
     (This             : not null access Ref;      Instance_Data    : not null ${constructMap.name}_Access;
      Instance_Handle  : in Standard.DDS.InstanceHandle_T;
      Source_Timestamp : in Standard.DDS.Time_T)
   is
      function Internal
        (This             : System.Address;
         Instance_Data    : not null ${constructMap.name}_Access;
         Handle           : in Standard.DDS.InstanceHandle_T;
         Source_Timestamp : access constant Standard.DDS.Time_T)
         return Standard.DDS.ReturnCode_T;
      pragma Import (C, Internal, "${constructMap.nativeCFQNameInModule}DataWriter_dispose_w_timestamp");
   begin
      Standard.DDS.Ret_Code_To_Exception
        (Internal
           (This.GetInterface, Instance_Data, Instance_Handle, Source_Timestamp'Unrestricted_Access));
   end Dispose_W_Timestamp;

   -------------------
   -- Get_Key_Value --
   -------------------

   procedure Get_Key_Value
     (This       : not null access Ref;      Key_Holder : not null ${constructMap.name}_Access;
      Handle     : in Standard.DDS.InstanceHandle_T)
   is
      function Internal
        (This       : System.Address;
         Key_Holder : not null ${constructMap.name}_Access;
         Handle     : in Standard.DDS.InstanceHandle_T)
         return Standard.DDS.ReturnCode_T;
      pragma Import (C, Internal, "${constructMap.nativeCFQNameInModule}DataWriter_get_key_value");
   begin
      Standard.DDS.Ret_Code_To_Exception
        (Internal
           (This.GetInterface,
            Key_Holder,
            Handle));
   end Get_Key_Value;

   ---------------------
   -- Lookup_Instance --
   ---------------------

   function Lookup_Instance
     (This       : not null access Ref;      Key_Holder : not null ${constructMap.name}_Access) return Standard.DDS.InstanceHandle_T
   is
      function Internal
        (This       : System.Address;
         Key_Holder : not null ${constructMap.name}_Access)
         return Standard.DDS.InstanceHandle_T;
      pragma Import (C, Internal, "${constructMap.nativeCFQNameInModule}DataWriter_lookup_instance");
   begin
      return Internal (This.GetInterface, Key_Holder);
   end Lookup_Instance;

   function CreateTypedI return Standard.DDS.DataWriter.Ref_Access is
      S_Access : Ref_Access;
   begin
      S_Access := new Ref;
      return Standard.DDS.DataWriter.Ref_Access (S_Access);
   end CreateTypedI;

   procedure DestroyTypedI (Writer : in out Standard.DDS.DataWriter.Ref_Access) is
      W_Impl : Standard.DDS.DataWriter_Impl.Ref_Access :=
        Standard.DDS.DataWriter_Impl.Ref_Access (Writer);
   begin
      Standard.DDS.DataWriter_Impl.Free (W_Impl);
      Writer := null;
   end DestroyTypedI;

begin
   null;
end ${constructMap.nativeFQName}_DataWriter;
