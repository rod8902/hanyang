##/* $Id: dataReaderBody.vm,v 1.9 2013/06/27 15:59:42 aida Exp $
##
##   (c) Copyright, Real-Time Innovations, Inc. 2001.  All rights reserved.
##   No duplications, whole or partial, manual or electronic, may be made
##   without prior written permission.  Any such copies, or
##   revisions thereof, must display this notice unaltered.
##   This code contains trade secrets of Real-Time Innovations, Inc.
##modification history:
##---------------------
##10a,10jun13,ajm CODEGENII-109 adding envMap and constructMapList variables
##10a,08mar13, ajm CODEGENII-30: Code reviews
##10a,25oct12, ajm Refactorizing code and variable names.
##                 RRTIDDSGEN-32 support for -use42eAlignment and -generateCTypecode
##10a,10oct12, ajm Upgrade to Bigpine.Formatting and commenting
##10a,04jan12, jmt Upgrade to LOLA
##10a,11nov11, ajm Changing the name of the templates to camelCase
##10a,04nov11, ajm Refactoring code. Variable name changed
##10a,16ag11,ajm Adding funcionality for basic types, const and arrays
##10a,15ag11,jmt created 
##
##========================================================================*/
--  ============================================================================
--
--         WARNING: THIS FILE IS AUTO-GENERATED. DO NOT MODIFY.
--
--  This file was generated from ${envMap.idlFileName}.idl using "rtiddsgen".
--  The rtiddsgen tool is part of the RTI Connext distribution.
--  For more information, type 'rtiddsgen -help' at a command shell
--  or consult the RTI Connext manual.
--
--  ============================================================================

pragma Warnings (Off); --  Since this is autogenerated code.
with System;

with DDS.ReadCondition_Impl;

with ${constructMap.packageName}; use ${constructMap.packageName};
pragma Warnings (On);
package body ${constructMap.nativeFQName}_DataReader is

   ----------
   -- Read --
   ----------

   procedure Read
     (This            : not null access Ref;
      Received_Data   : not null access ${constructMap.name}_Seq.Sequence;
      Info_Seq        : not null access Standard.DDS.SampleInfo_Seq.Sequence;
      Max_Samples     : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;
      Sample_States   : in Standard.DDS.SampleStateMask := Standard.DDS.ANY_SAMPLE_STATE;
      View_States     : in Standard.DDS.ViewStateMask := Standard.DDS.ANY_VIEW_STATE;
      Instance_States : in Standard.DDS.InstanceStateMask := Standard.DDS.ANY_INSTANCE_STATE)
   is
      function Internal
        (This            : System.Address;
         Received_Data   : not null access ${constructMap.name}_Seq.Sequence;
         Info_Seq        : not null access Standard.DDS.SampleInfo_Seq.Sequence;
         Max_Samples     : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;
         Sample_States   : in Standard.DDS.SampleStateMask := Standard.DDS.ANY_SAMPLE_STATE;
         View_States     : in Standard.DDS.ViewStateMask := Standard.DDS.ANY_VIEW_STATE;
         Instance_States : in Standard.DDS.InstanceStateMask := Standard.DDS.ANY_INSTANCE_STATE)
         return Standard.DDS.ReturnCode_T;
      pragma Import (C, Internal, "${constructMap.nativeCFQNameInModule}DataReader_read");
   begin
      Standard.DDS.Ret_Code_To_Exception
        (Internal
           (This.GetInterface,
            Received_Data,
            Info_Seq,
            Max_Samples,
            Sample_States,
            View_States,
            Instance_States));
   end Read;

   ----------
   -- Take --
   ----------

   procedure Take
     (This            : not null access Ref;
      Received_Data   : not null access ${constructMap.name}_Seq.Sequence;
      Info_Seq        : not null access Standard.DDS.SampleInfo_Seq.Sequence;
      Max_Samples     : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;
      Sample_States   : in Standard.DDS.SampleStateMask := Standard.DDS.ANY_SAMPLE_STATE;
      View_States     : in Standard.DDS.ViewStateMask := Standard.DDS.ANY_VIEW_STATE;
      Instance_States : in Standard.DDS.InstanceStateMask := Standard.DDS.ANY_INSTANCE_STATE)
   is
      function Internal
        (This            : System.Address;
         Received_Data   : not null access ${constructMap.name}_Seq.Sequence;
         Info_Seq        : not null access Standard.DDS.SampleInfo_Seq.Sequence;
         Max_Samples     : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;
         Sample_States   : in Standard.DDS.SampleStateMask := Standard.DDS.ANY_SAMPLE_STATE;
         View_States     : in Standard.DDS.ViewStateMask := Standard.DDS.ANY_VIEW_STATE;
         Instance_States : in Standard.DDS.InstanceStateMask := Standard.DDS.ANY_INSTANCE_STATE)
         return Standard.DDS.ReturnCode_T;
      pragma Import (C, Internal, "${constructMap.nativeCFQNameInModule}DataReader_take");
   begin
      Standard.DDS.Ret_Code_To_Exception
        (Internal
           (This.GetInterface,
            Received_Data,
            Info_Seq,
            Max_Samples,
            Sample_States,
            View_States,
            Instance_States));
   end Take;

   ----------------------
   -- Read_W_Condition --
   ----------------------

   procedure Read_W_Condition
     (This          : not null access Ref;
      Received_Data : not null access ${constructMap.name}_Seq.Sequence;
      Info_Seq      : not null access Standard.DDS.SampleInfo_Seq.Sequence;
      Max_Samples   : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;
      Condition     : access Standard.DDS.ReadCondition.Ref'Class)
   is
      function Internal
        (This          : System.Address;
         Received_Data : not null access ${constructMap.name}_Seq.Sequence;
         Info_Seq      : not null access Standard.DDS.SampleInfo_Seq.Sequence;
         Max_Samples   : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;
         Condition     : System.Address)
         return Standard.DDS.ReturnCode_T;
      pragma Import (C, Internal, "${constructMap.nativeCFQNameInModule}DataReader_read_w_condition");

      C : constant Standard.DDS.ReadCondition_Impl.Ref_Access :=
        Standard.DDS.ReadCondition_Impl.Ref_Access (Condition);

   begin
      Standard.DDS.Ret_Code_To_Exception
        (Internal
           (This.GetInterface,
            Received_Data,
            Info_Seq,
            Max_Samples,
            C.GetInterface));
   end Read_W_Condition;

   ----------------------
   -- Take_W_Condition --
   ----------------------

   procedure Take_W_Condition
     (This          : not null access Ref;
      Received_Data : not null access ${constructMap.name}_Seq.Sequence;
      Info_Seq      : not null access Standard.DDS.SampleInfo_Seq.Sequence;
      Max_Samples   : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;
      Condition     : access Standard.DDS.ReadCondition.Ref'Class)
   is
      function Internal
        (This          : System.Address;
         Received_Data : not null access ${constructMap.name}_Seq.Sequence;
         Info_Seq      : not null access Standard.DDS.SampleInfo_Seq.Sequence;
         Max_Samples   : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;
         Condition     : System.Address)
         return Standard.DDS.ReturnCode_T;
      pragma Import (C, Internal, "${constructMap.nativeCFQNameInModule}DataReader_take_w_condition");

      C : constant Standard.DDS.ReadCondition_Impl.Ref_Access :=
        Standard.DDS.ReadCondition_Impl.Ref_Access (Condition);

   begin
      Standard.DDS.Ret_Code_To_Exception
        (Internal
           (This.GetInterface,
            Received_Data,
            Info_Seq,
            Max_Samples,
            C.GetInterface));
   end Take_W_Condition;

   ----------------------
   -- Read_Next_Sample --
   ----------------------

   procedure Read_Next_Sample
     (This          : not null access Ref;
      Received_Data : not null ${constructMap.name}_Access;
      Sample_Info   : not null access Standard.DDS.SampleInfo)
   is
      function Internal
        (This          : System.Address;
         Received_Data : not null ${constructMap.name}_Access;
         Sample_Info   : not null access Standard.DDS.SampleInfo)
         return Standard.DDS.ReturnCode_T;
      pragma Import (C, Internal, "${constructMap.nativeCFQNameInModule}DataReader_read_next_sample");
   begin
      Standard.DDS.Ret_Code_To_Exception
        (Internal
           (This.GetInterface,
            Received_Data,
            Sample_Info));
   end Read_Next_Sample;

   ----------------------
   -- Take_Next_Sample --
   ----------------------

   procedure Take_Next_Sample
     (This          : not null access Ref;
      Received_Data : not null ${constructMap.name}_Access;
      Sample_Info   : not null access Standard.DDS.SampleInfo)
   is
      function Internal
        (This          : System.Address;
         Received_Data : not null ${constructMap.name}_Access;
         Sample_Info   : not null access Standard.DDS.SampleInfo)
         return Standard.DDS.ReturnCode_T;
      pragma Import (C, Internal, "${constructMap.nativeCFQNameInModule}DataReader_take_next_sample");
   begin
      Standard.DDS.Ret_Code_To_Exception
        (Internal
           (This.GetInterface,
            Received_Data,
            Sample_Info));
   end Take_Next_Sample;

   -------------------
   -- Read_Instance --
   -------------------

   procedure Read_Instance
     (This            : not null access Ref;
      Received_Data   : not null access ${constructMap.name}_Seq.Sequence;
      Info_Seq        : not null access Standard.DDS.SampleInfo_Seq.Sequence;
      Max_Samples     : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;
      A_Handle        : access constant Standard.DDS.InstanceHandle_T;
      Sample_States   : in Standard.DDS.SampleStateMask := Standard.DDS.ANY_SAMPLE_STATE;
      View_States     : in Standard.DDS.ViewStateMask := Standard.DDS.ANY_VIEW_STATE;
      Instance_States : in Standard.DDS.InstanceStateMask := Standard.DDS.ANY_INSTANCE_STATE)
   is
      function Internal
        (This            : System.Address;
         Received_Data   : not null access ${constructMap.name}_Seq.Sequence;
         Info_Seq        : not null access Standard.DDS.SampleInfo_Seq.Sequence;
         Max_Samples     : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;
         A_Handle        : access constant Standard.DDS.InstanceHandle_T;
         Sample_States   : in Standard.DDS.SampleStateMask := Standard.DDS.ANY_SAMPLE_STATE;
         View_States     : in Standard.DDS.ViewStateMask := Standard.DDS.ANY_VIEW_STATE;
         Instance_States : in Standard.DDS.InstanceStateMask := Standard.DDS.ANY_INSTANCE_STATE)
         return Standard.DDS.ReturnCode_T;
      pragma Import (C, Internal, "${constructMap.nativeCFQNameInModule}DataReader_read_instance");
   begin
      Standard.DDS.Ret_Code_To_Exception
        (Internal
           (This.GetInterface,
            Received_Data,
            Info_Seq,
            Max_Samples,
            A_Handle,
            Sample_States,
            View_States,
            Instance_States));
   end Read_Instance;

   -------------------
   -- Take_Instance --
   -------------------

   procedure Take_Instance
     (This            : not null access Ref;
      Received_Data   : not null access ${constructMap.name}_Seq.Sequence;
      Info_Seq        : not null access Standard.DDS.SampleInfo_Seq.Sequence;
      Max_Samples     : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;
      A_Handle        : access constant Standard.DDS.InstanceHandle_T;
      Sample_States   : in Standard.DDS.SampleStateMask := Standard.DDS.ANY_SAMPLE_STATE;
      View_States     : in Standard.DDS.ViewStateMask := Standard.DDS.ANY_VIEW_STATE;
      Instance_States : in Standard.DDS.InstanceStateMask := Standard.DDS.ANY_INSTANCE_STATE)
   is
      function Internal
        (This            : System.Address;
         Received_Data   : not null access ${constructMap.name}_Seq.Sequence;
         Info_Seq        : not null access Standard.DDS.SampleInfo_Seq.Sequence;
         Max_Samples     : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;
         A_Handle        : access constant Standard.DDS.InstanceHandle_T;
         Sample_States   : in Standard.DDS.SampleStateMask := Standard.DDS.ANY_SAMPLE_STATE;
         View_States     : in Standard.DDS.ViewStateMask := Standard.DDS.ANY_VIEW_STATE;
         Instance_States : in Standard.DDS.InstanceStateMask := Standard.DDS.ANY_INSTANCE_STATE)
         return Standard.DDS.ReturnCode_T;
      pragma Import (C, Internal, "${constructMap.nativeCFQNameInModule}DataReader_take_instance");
   begin
      Standard.DDS.Ret_Code_To_Exception
        (Internal
           (This.GetInterface,
            Received_Data,
            Info_Seq,
            Max_Samples,
            A_Handle,
            Sample_States,
            View_States,
            Instance_States));
   end Take_Instance;

#* Begin of the 45e update *#
   -------------------------------
   -- Read_Instance_W_Condition --
   -------------------------------

   procedure Read_Instance_W_Condition
     (This            : not null access Ref;
      Received_Data   : not null access ${constructMap.name}_Seq.Sequence;
      Info_Seq        : not null access Standard.DDS.SampleInfo_Seq.Sequence;
      Max_Samples     : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;
      Previous_Handle : access constant Standard.DDS.InstanceHandle_T;
      Condition       : Standard.DDS.ReadCondition.Ref_Access)
   is
      function Internal
        (This            : System.Address;
         Received_Data   : not null access ${constructMap.name}_Seq.Sequence;
         Info_Seq        : not null access Standard.DDS.SampleInfo_Seq.Sequence;
         Max_Samples     : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;
         Previous_Handle : access constant Standard.DDS.InstanceHandle_T;
         Condition       : System.Address)
         return Standard.DDS.ReturnCode_T;
      pragma Import (C, Internal, "${constructMap.nativeCFQNameInModule}DataReader_read_instance_w_condition");

      C : constant Standard.DDS.ReadCondition_Impl.Ref_Access :=
        Standard.DDS.ReadCondition_Impl.Ref_Access (Condition);

   begin
      Standard.DDS.Ret_Code_To_Exception
        (Internal
           (This.GetInterface,
            Received_Data,
            Info_Seq,
            Max_Samples,
            Previous_Handle,
            C.GetInterface));
   end Read_Instance_W_Condition;

   -------------------------------
   -- Take_Instance_W_Condition --
   -------------------------------

   procedure Take_Instance_W_Condition
     (This            : not null access Ref;
      Received_Data   : not null access ${constructMap.name}_Seq.Sequence;
      Info_Seq        : not null access Standard.DDS.SampleInfo_Seq.Sequence;
      Max_Samples     : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;
      Previous_Handle : access constant Standard.DDS.InstanceHandle_T;
      Condition       : Standard.DDS.ReadCondition.Ref_Access)
   is
      function Internal
        (This            : System.Address;
         Received_Data   : not null access ${constructMap.name}_Seq.Sequence;
         Info_Seq        : not null access Standard.DDS.SampleInfo_Seq.Sequence;
         Max_Samples     : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;
         Previous_Handle : access constant Standard.DDS.InstanceHandle_T;
         Condition       : System.Address)
         return Standard.DDS.ReturnCode_T;
      pragma Import (C, Internal, "${constructMap.nativeCFQNameInModule}DataReader_take_instance_w_condition");

      C : constant Standard.DDS.ReadCondition_Impl.Ref_Access :=
        Standard.DDS.ReadCondition_Impl.Ref_Access (Condition);

   begin
      Standard.DDS.Ret_Code_To_Exception
        (Internal
           (This.GetInterface,
            Received_Data,
            Info_Seq,
            Max_Samples,
            Previous_Handle,
            C.GetInterface));
   end Take_Instance_W_Condition;

#* End of the 45e update *# 
   ------------------------
   -- Read_Next_Instance --
   ------------------------

   procedure Read_Next_Instance
     (This            : not null access Ref;
      Received_Data   : not null access ${constructMap.name}_Seq.Sequence;
      Info_Seq        : not null access Standard.DDS.SampleInfo_Seq.Sequence;
      Max_Samples     : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;
      Previous_Handle : access constant Standard.DDS.InstanceHandle_T;
      Sample_States   : in Standard.DDS.SampleStateMask := Standard.DDS.ANY_SAMPLE_STATE;
      View_States     : in Standard.DDS.ViewStateMask := Standard.DDS.ANY_VIEW_STATE;
      Instance_States : in Standard.DDS.InstanceStateMask := Standard.DDS.ANY_INSTANCE_STATE)
   is
      function Internal
        (This            : System.Address;
         Received_Data   : not null access ${constructMap.name}_Seq.Sequence;
         Info_Seq        : not null access Standard.DDS.SampleInfo_Seq.Sequence;
         Max_Samples     : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;
         Previous_Handle : access constant Standard.DDS.InstanceHandle_T;
         Sample_States   : in Standard.DDS.SampleStateMask := Standard.DDS.ANY_SAMPLE_STATE;
         View_States     : in Standard.DDS.ViewStateMask := Standard.DDS.ANY_VIEW_STATE;
         Instance_States : in Standard.DDS.InstanceStateMask := Standard.DDS.ANY_INSTANCE_STATE)
         return Standard.DDS.ReturnCode_T;
      pragma Import (C, Internal, "${constructMap.nativeCFQNameInModule}DataReader_read_next_instance");
   begin
      Standard.DDS.Ret_Code_To_Exception
        (Internal
           (This.GetInterface,
            Received_Data,
            Info_Seq,
            Max_Samples,
            Previous_Handle,
            Sample_States,
            View_States,
            Instance_States));
   end Read_Next_Instance;

   ------------------------
   -- Take_Next_Instance --
   ------------------------

   procedure Take_Next_Instance
     (This            : not null access Ref;
      Received_Data   : not null access ${constructMap.name}_Seq.Sequence;
      Info_Seq        : not null access Standard.DDS.SampleInfo_Seq.Sequence;
      Max_Samples     : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;
      Previous_Handle : access constant Standard.DDS.InstanceHandle_T;
      Sample_States   : in Standard.DDS.SampleStateMask := Standard.DDS.ANY_SAMPLE_STATE;
      View_States     : in Standard.DDS.ViewStateMask := Standard.DDS.ANY_VIEW_STATE;
      Instance_States : in Standard.DDS.InstanceStateMask := Standard.DDS.ANY_INSTANCE_STATE)
   is
      function Internal
        (This            : System.Address;
         Received_Data   : not null access ${constructMap.name}_Seq.Sequence;
         Info_Seq        : not null access Standard.DDS.SampleInfo_Seq.Sequence;
         Max_Samples     : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;
         Previous_Handle : access constant Standard.DDS.InstanceHandle_T;
         Sample_States   : in Standard.DDS.SampleStateMask := Standard.DDS.ANY_SAMPLE_STATE;
         View_States     : in Standard.DDS.ViewStateMask := Standard.DDS.ANY_VIEW_STATE;
         Instance_States : in Standard.DDS.InstanceStateMask := Standard.DDS.ANY_INSTANCE_STATE)
         return Standard.DDS.ReturnCode_T;
      pragma Import (C, Internal, "${constructMap.nativeCFQNameInModule}DataReader_take_next_instance");
   begin
      Standard.DDS.Ret_Code_To_Exception
        (Internal
           (This.GetInterface,
            Received_Data,
            Info_Seq,
            Max_Samples,
            Previous_Handle,
            Sample_States,
            View_States,
            Instance_States));
   end Take_Next_Instance;

   ------------------------------------
   -- Read_Next_Instance_W_Condition --
   ------------------------------------

   procedure Read_Next_Instance_W_Condition
     (This            : not null access Ref;
      Received_Data   : not null access ${constructMap.name}_Seq.Sequence;
      Info_Seq        : not null access Standard.DDS.SampleInfo_Seq.Sequence;
      Max_Samples     : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;
      Previous_Handle : access constant Standard.DDS.InstanceHandle_T;
      Condition       : Standard.DDS.ReadCondition.Ref_Access)
   is
      function Internal
        (This            : System.Address;
         Received_Data   : not null access ${constructMap.name}_Seq.Sequence;
         Info_Seq        : not null access Standard.DDS.SampleInfo_Seq.Sequence;
         Max_Samples     : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;
         Previous_Handle : access constant Standard.DDS.InstanceHandle_T;
         Condition       : System.Address)
         return Standard.DDS.ReturnCode_T;
      pragma Import (C, Internal, "${constructMap.nativeCFQNameInModule}DataReader_read_next_instance_w_condition");

      C : constant Standard.DDS.ReadCondition_Impl.Ref_Access :=
        Standard.DDS.ReadCondition_Impl.Ref_Access (Condition);

   begin
      Standard.DDS.Ret_Code_To_Exception
        (Internal
           (This.GetInterface,
            Received_Data,
            Info_Seq,
            Max_Samples,
            Previous_Handle,
            C.GetInterface));
   end Read_Next_Instance_W_Condition;

   ------------------------------------
   -- Take_Next_Instance_W_Condition --
   ------------------------------------

   procedure Take_Next_Instance_W_Condition
     (This            : not null access Ref;
      Received_Data   : not null access ${constructMap.name}_Seq.Sequence;
      Info_Seq        : not null access Standard.DDS.SampleInfo_Seq.Sequence;
      Max_Samples     : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;
      Previous_Handle : access constant Standard.DDS.InstanceHandle_T;
      Condition       : Standard.DDS.ReadCondition.Ref_Access)
   is
      function Internal
        (This            : System.Address;
         Received_Data   : not null access ${constructMap.name}_Seq.Sequence;
         Info_Seq        : not null access Standard.DDS.SampleInfo_Seq.Sequence;
         Max_Samples     : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;
         Previous_Handle : access constant Standard.DDS.InstanceHandle_T;
         Condition       : System.Address)
         return Standard.DDS.ReturnCode_T;
      pragma Import (C, Internal, "${constructMap.nativeCFQNameInModule}DataReader_take_next_instance_w_condition");

      C : constant Standard.DDS.ReadCondition_Impl.Ref_Access :=
        Standard.DDS.ReadCondition_Impl.Ref_Access (Condition);

   begin
      Standard.DDS.Ret_Code_To_Exception
        (Internal
           (This.GetInterface,
            Received_Data,
            Info_Seq,
            Max_Samples,
            Previous_Handle,
            C.GetInterface));
   end Take_Next_Instance_W_Condition;

   -------------------
   -- Get_Key_Value --
   -------------------

   procedure Get_Key_Value
     (This       : not null access Ref;
      Key_Holder : not null ${constructMap.name}_Access;
      Handle     : access constant Standard.DDS.InstanceHandle_T)
   is
      function Internal
        (This       : System.Address;
         Key_Holder : not null ${constructMap.name}_Access;
         Handle     : access constant Standard.DDS.InstanceHandle_T)
         return Standard.DDS.ReturnCode_T;
      pragma Import (C, Internal, "${constructMap.nativeCFQNameInModule}DataReader_get_key_value");
   begin
      Standard.DDS.Ret_Code_To_Exception
        (Internal
           (This.GetInterface,
            Key_Holder,
            Handle));
   end Get_Key_Value;

   ---------------------
   -- Lookup_Instance --
   ---------------------

   function Lookup_Instance
     (This       : not null access Ref;
      Key_Holder : not null ${constructMap.name}_Access) return Standard.DDS.InstanceHandle_T
   is
      function Internal
        (This       : System.Address;
         Key_Holder : not null ${constructMap.name}_Access)
         return Standard.DDS.InstanceHandle_T;
      pragma Import (C, Internal, "${constructMap.nativeCFQNameInModule}DataReader_lookup_instance");
   begin
      return Internal (This.GetInterface, Key_Holder);
   end Lookup_Instance;

   -----------------
   -- Return_Loan --
   -----------------

   procedure Return_Loan
     (This          : not null access Ref;
      Received_Data : not null access ${constructMap.name}_Seq.Sequence;
      Info_Seq      : not null access Standard.DDS.SampleInfo_Seq.Sequence)
   is
      function Internal
        (This          : System.Address;
         Received_Data : not null access ${constructMap.name}_Seq.Sequence;
         Info_Seq      : not null access Standard.DDS.SampleInfo_Seq.Sequence)
         return Standard.DDS.ReturnCode_T;
      pragma Import (C, Internal, "${constructMap.nativeCFQNameInModule}DataReader_return_loan");
   begin
      Standard.DDS.Ret_Code_To_Exception
        (Internal
           (This.GetInterface,
            Received_Data,
            Info_Seq));
   end Return_Loan;

   function CreateTypedI return Standard.DDS.DataReader.Ref_Access is
      S_Access : Ref_Access;
   begin
      S_Access := new Ref;
      return Standard.DDS.DataReader.Ref_Access (S_Access);
   end CreateTypedI;

   procedure DestroyTypedI (Reader : in out Standard.DDS.DataReader.Ref_Access) is
      R_Impl : Standard.DDS.DataReader_Impl.Ref_Access :=
        Standard.DDS.DataReader_Impl.Ref_Access (Reader);
   begin
      Standard.DDS.DataReader_Impl.Free (R_Impl);
      Reader := null;
   end DestroyTypedI;

begin
   null;
end ${constructMap.nativeFQName}_DataReader;
