##/* $Id: publisherBody.vm,v 1.6 2013/06/27 15:59:41 aida Exp $
##
##   (c) Copyright, Real-Time Innovations, Inc. 2001.  All rights reserved.
##   No duplications, whole or partial, manual or electronic, may be made
##   without prior written permission.  Any such copies, or
##   revisions thereof, must display this notice unaltered.
##   This code contains trade secrets of Real-Time Innovations, Inc.

##modification history:
##---------------------
##10a,28may13,ajm Adding constructMap node for the example type
##10a,25oct12, ajm Refactorizing code and variable names.
##                 RRTIDDSGEN-32 support for -use42eAlignment and -generateCTypecode
##10a,10oct12, ajm Upgrade to Bigpine.Formatting and commenting
##10a,04nov11, ajm Refactoring code. Variable name changed
##10a,14oct11,jmt created 
##========================================================================*/*#

--  ===========================================================================
with Ada.Command_Line; use Ada.Command_Line;
with Ada.Exceptions;
with Ada.Text_IO; use Ada.Text_IO;

with DDS; use DDS;
with DDS.DomainParticipant;
with DDS.DomainParticipantFactory;
with DDS.Publisher;
with DDS.Topic;

with GNAT.Traceback.Symbolic;

--   Uncomment this to turn on additional logging
--  with NDDS.Config.Logger;

--  ===========================================================================

with ${constructMap.packageName};
with ${constructMap.nativeFQName}_DataWriter;
with ${constructMap.nativeFQName}_TypeSupport;

procedure ${constructMap.nativeFQName}_Publisher  is
   --  procedure DDS_Enable_All_Traces;
   --  pragma Import (C, DDS_Enable_All_Traces, "DDS_Enable_All_Traces");

   --  Delete all entities
   procedure  Publisher_Shutdown
     (L_Participant : in out Standard.DDS.DomainParticipant.Ref_Access) is

      Factory : constant Standard.DDS.DomainParticipantFactory.Ref_Access :=
         Standard.DDS.DomainParticipantFactory.Get_Instance;
   begin
      L_Participant.Delete_Contained_Entities;
      Factory.Delete_Participant (L_Participant);
      --  RTI Connext provides finalize_instance() method for
      --  people who want to release memory used by the participant factory
      --  singleton. Uncomment the following block of code for clean destruction of
      --  the participant factory singleton.

      --  Factory.finalize_instance;

   end Publisher_Shutdown;



   procedure Publisher_Main (DomainId     : Standard.DDS.DomainId_T;
                            Sample_Count : Integer) is

      Factory           :  Standard.DDS.DomainParticipantFactory.Ref_Access;
      Participant       :  Standard.DDS.DomainParticipant.Ref_Access;
      Publisher         :  Standard.DDS.Publisher.Ref_Access;
      Topic             :  Standard.DDS.Topic.Ref_Access;

      ${constructMap.name}_Writer : ${constructMap.name}_DataWriter.Ref_Access;

      Instance          : ${constructMap.name}_Access;
      Instance_Handle   : aliased Standard.DDS.InstanceHandle_T := Standard.DDS.HANDLE_NIL;
      Type_Name         : Standard.DDS.String;

      Send_Period       : constant Duration  := 0.5;


      Topic_Name : constant Standard.DDS.String := Standard.DDS.To_DDS_String ("Example ${constructMap.name}");
   begin

      Factory := Standard.DDS.DomainParticipantFactory.Get_Instance;
      --  To customize participant QoS, use
      --  Factory.get_default_participant_qos instead
      Put ("Create_Participant:");
      Participant := Factory.Create_Participant
        (DomainId,
         Standard.DDS.DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT,
         null,
         Standard.DDS.STATUS_MASK_NONE);

      --  To customize publisher QoS, use
      --  Standard.DDS.DomainParticipant.get_default_publisher_qos instead


      Put ("Create_Publisher:");
      Publisher := Participant.Create_Publisher
        (Standard.DDS.DomainParticipant.PUBLISHER_QOS_DEFAULT,
         null,
         Standard.DDS.STATUS_MASK_NONE);



      --  Register type before creating topic
      Type_Name.data := ${constructMap.name}_TypeSupport.Get_Type_Name.data;
      Put ("Register_Type:");
      ${constructMap.name}_TypeSupport.Register_Type (Participant, Type_Name);

      --  To customize topic QoS, use
      --  Standard.DDS.DomainParticipant.get_default_topic_qos instead
      Put ("Create_Topic:");
      Topic := Participant.Create_Topic
        (TOPIC_NAME,
         Type_Name,
         Standard.DDS.DomainParticipant.TOPIC_QOS_DEFAULT,
         null,
         Standard.DDS.STATUS_MASK_NONE);


      --  To customize data writer QoS, use
      --  Standard.DDS.Publisher.get_default_datawriter_qos instead.
      Put ("Create_DataWriter:");
      ${constructMap.name}_Writer := ${constructMap.name}_DataWriter.Ref_Access
        (Publisher.Create_DataWriter (Topic,
         Standard.DDS.Publisher.DATAWRITER_QOS_DEFAULT,
         null,
         Standard.DDS.STATUS_MASK_NONE));

      Instance := ${constructMap.name}_TypeSupport.Create_Data (TRUE);

      --  For data type that has key, if the same instance is going to be
      --  written multiple times, initialize the key here
      --  and register the keyed instance prior to writing
      Instance_Handle := ${constructMap.name}_Writer.Register_Instance (Instance);

      --  Main loop
      for Count in 0 .. Sample_Count loop

         Put_Line ("Writing ${constructMap.name}, count " &  Count'Img);
         pragma Compile_Time_Warning (True, "Complete update of message.");
--           declare
--              Msg : Standard.DDS.String := Standard.DDS.To_DDS_String
--                ("Hello World! (" & Count'Img & ")");
--           begin
--              if Instance.message /= Standard.DDS.NULL_STRING then
--                 Finalize (Instance.message);
--              end if;
--
--              Instance.message.data := Msg.data;
--           end;
         ${constructMap.name}_Writer.Write (Instance_Data => Instance,
                                   Handle        => Instance_Handle'Unchecked_Access);

         delay Send_Period;
      end loop;

--        if Instance.message /= Standard.DDS.NULL_STRING then
--           Finalize (Instance.message);
--        end if;

      ${constructMap.name}_Writer.Unregister_Instance   (Instance, Instance_Handle);

      --   Delete data sample
      ${constructMap.name}_TypeSupport.Delete_Data (Instance, True);

      Publisher_Shutdown (Participant);


   end Publisher_Main;


begin
   Put_Line ("-----------------------------------------------------");
   New_Line (4);
   declare
      DomainId     : Standard.DDS.DomainId_T := 0;
      Sample_Count : Integer := Integer'Last; -- almost infinite
   begin

      if Argument_Count >= 1 then
         begin
            DomainId := Standard.DDS.DomainId_T'Value (Argument (1));
         exception
            when others => null;
         end;
      end if;

      if Argument_Count >= 2 then
         begin
            Sample_Count := Integer'Value (Argument (2));
         exception
            when others => null;
         end;
      end if;

      --   Uncomment this to turn on additional logging
      --  Standard.NDDS.Config.Logger.Get_Instance.Set_Verbosity_By_Category
      --    (Standard.NDDS.CONFIG.API,
      --     Standard.NDDS.CONFIG.LOG_VERBOSITY_ALL);

      Publisher_Main (DomainId, Sample_Count);
   end;
exception
   when E : others =>
      Put_Line (Ada.Exceptions.Exception_Information (E));
      Put_Line (GNAT.Traceback.Symbolic.Symbolic_Traceback (E));
end ${constructMap.nativeFQName}_Publisher;

