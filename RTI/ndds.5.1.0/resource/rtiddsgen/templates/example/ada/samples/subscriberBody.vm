##/* $Id: subscriberBody.vm,v 1.6 2013/06/27 15:59:41 aida Exp $
##
##   (c) Copyright, Real-Time Innovations, Inc. 2001.  All rights reserved.
##   No duplications, whole or partial, manual or electronic, may be made
##   without prior written permission.  Any such copies, or
##   revisions thereof, must display this notice unaltered.
##   This code contains trade secrets of Real-Time Innovations, Inc.

##modification history:
##---------------------
##10a,28may13,ajm Adding constructMap node for the example type
##10a,25oct12, ajm Refactorizing code and variable names.
##                 RRTIDDSGEN-32 support for -use42eAlignment and -generateCTypecode
##10a,10oct12, ajm Upgrade to Bigpine.Formatting and commenting
##10a,04nov11, ajm Refactoring code. Variable name changed
##10a,14oct11,jmt created 
##========================================================================*/*#

--  ===========================================================================
with Ada.Command_Line; use Ada.Command_line;
with Ada.Exceptions;
with Ada.Text_IO; use Ada.Text_IO;

with DDS.DataReader;
with DDS.DomainParticipant;
with DDS.DomainParticipantFactory;
with DDS.Subscriber;
with DDS.Topic;

with GNAT.Traceback.Symbolic;
--  ===========================================================================


with ${constructMap.nativeFQName}_SubscriberListener;
with ${constructMap.nativeFQName}_TypeSupport;

procedure  ${constructMap.nativeFQName}_Subscriber is
   use Standard.DDS;

   procedure Subscriber_Shutdown
     (Participant : in out Standard.DDS.DomainParticipant.Ref_Access);

   procedure Main (Domain_Id : Standard.DDS.DomainId_T; Num_Loops : Integer);

   procedure Subscriber_Shutdown
     (Participant : in out Standard.DDS.DomainParticipant.Ref_Access) is
      Factory : constant Standard.DDS.DomainParticipantFactory.Ref_Access :=
         Standard.DDS.DomainParticipantFactory.Get_Instance;
   begin

      Participant.Delete_Contained_Entities;
      Factory.Delete_Participant (Participant);

      --  RTI Connext provides finalize_instance() method for
      --  people who want to release memory used by the participant factory
      --  singleton. Uncomment the following block of code for clean destruction of
      --  the participant factory singleton.
      --  Factory.Finalize_Instance;

   end Subscriber_Shutdown;

   procedure Main (Domain_Id : Standard.DDS.DomainId_T; Num_Loops : Integer) is
      Factory           : Standard.DDS.DomainParticipantFactory.Ref_Access;
      Participant       : Standard.DDS.DomainParticipant.Ref_Access;
      Subscriber        : Standard.DDS.Subscriber.Ref_Access;
      Topic             : Standard.DDS.Topic.Ref_Access;
      Reader            : Standard.DDS.DataReader.Ref_Access;
      Reader_Listener   : aliased ${constructMap.name}_SubscriberListener.My_Listener;
      Type_Name         : Standard.DDS.String;
      Poll_Period       : constant Duration := 4.0;

   begin

      Factory := Standard.DDS.DomainParticipantFactory.Get_Instance;
      --  To customize participant QoS, use
      --  Factory.get_default_participant_qos
      Put_Line ("Create_Participant:");
      Participant := Factory.Create_Participant
        (Domain_Id,
         Standard.DDS.DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT,
         null,
         Standard.DDS.STATUS_MASK_NONE);


      --  To customize subscriber QoS, use
      --  Standard.DDS.DomainParticipant.get_default_subscriber_qos

      Put_Line ("Create_Subscriber:");
      Subscriber := Participant.Create_Subscriber
        (Standard.DDS.DomainParticipant.SUBSCRIBER_QOS_DEFAULT,
         null,
         Standard.DDS.STATUS_MASK_NONE);

      --  Register type before creating topic
      Type_Name.data := ${constructMap.name}_TypeSupport.Get_Type_Name.data;
      Put_Line ("Register_Type:");
      ${constructMap.name}_TypeSupport.Register_Type (Participant, Type_Name);

      --  To customize topic QoS, use
      --  Standard.DDS.DomainParticipant.get_default_topic_qos
      Put_Line ("Create_Topic:");
      Topic := Participant.Create_Topic
        (Standard.DDS.To_DDS_String ("Example ${constructMap.name}"),
         Type_Name,
         Standard.DDS.DomainParticipant.TOPIC_QOS_DEFAULT,
         null,
         Standard.DDS.STATUS_MASK_NONE);

      --  To customize data reader QoS, use
      --  DDS_Subscriber_get_default_datareader_qos()
      Put ("Create_DataReader:");
      Reader := Subscriber.Create_DataReader
        (Topic.As_TopicDescription,
         Standard.DDS.Subscriber.DATAREADER_QOS_DEFAULT,
         Reader_Listener'Unchecked_Access,
         Standard.DDS.STATUS_MASK_ALL);


      --  Main loop
      for I in 0 .. Num_Loops loop
         Put_Line ("${constructMap.name} subscriber sleeping " & Poll_Period'Img & " sec.");
         delay Poll_Period;
      end loop;
      --  Cleanup and delete delete all entities
      Subscriber_Shutdown (Participant);
   exception
      when others =>
         --  Cleanup and delete delete all entities
         Subscriber_Shutdown (Participant);
         raise;
   end Main;

begin
   declare
      Num_Loops    : Integer := 1000;
      Domain_Id    : Standard.DDS.DomainId_T := 0;
   begin
      if Argument_Count >= 1 then
         begin
            Domain_Id := Standard.DDS.DomainId_T'Value (Argument (1));
         exception
            when others => null;
         end;
      end if;

      if Argument_Count >= 2 then
         begin
            Num_Loops := Integer'Value (Argument (2));
         exception
            when others => null;
         end;
      end if;

      Main (Domain_Id, Num_Loops);
   end;
exception
   when E : others =>
      Put_Line (Ada.Exceptions.Exception_Information (E));
      Put_Line (GNAT.Traceback.Symbolic.Symbolic_Traceback (E));
end ${constructMap.nativeFQName}_Subscriber;

