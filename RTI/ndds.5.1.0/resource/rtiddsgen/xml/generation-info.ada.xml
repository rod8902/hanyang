<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE generationInfo SYSTEM "generationInfo.dtd" [
<!ENTITY namespaceSeperator ".">    <!-- namespace separator -->
]>

<!--
   $Id: generation-info.ada.xml,v 1.2 2011/12/04 01:50:15 fernando Exp $
 
   (c) Copyright 2007, Real-Time Innovations, Inc.  All rights reserved.
   No duplications, whole or partial, manual or electronic, may be made
   without prior written permission.  Any such copies, or
   revisions thereof, must display this notice unaltered.
   This code contains trade secrets of Real-Time Innovations, Inc.

Modification history
 - - - - - - - - - -
10o,25aug10,fcs Pointer support
10o,24aug10,eys Fixed wstring sequence
10o,24aug10,fcs Multidimensional array support
10o,24aug10,fcs Changed bitfield generation
10o,29nov07,fcs 11/29/07 Merge changes
10o,12nov07,fcs Removed TypeCode
10o,09nov07,fcs Introduced extra space in the declaration of the elements
                in a record
10o,25oct07,fcs Support for arrays
10o,07jul07,fcs Changed preambles
10o,07jul07,fcs Added DDS.DomainParticipant to support-header and
                support-source
10o,07jul07,fcs Replaced RTI.Sequences_Generic with DDS.Sequences_Generic
10o,06jul07,rbw Updated support-source preamble
10o,06jul07,fcs Updated support-header preamble
10o,06jul07,rbw Updated type-source and type-header preambles
10o,05jul07,rbw Updated type-source preamble
10o,05jul07,fcs Fixed structMember
10o,05jul07,fcs Continue ADA migration
10o,03jul07,rbw Removed unused preambles
10o,03jul07,rbw Created based on C version
-->

<generationInfo style="RTI" language="Ada">
    <typeInfoMap>

        <type idlType="short" nativeType="Standard.DDS.Short"
                   typeCode="DDS_g_tc_short"
                   nativeTypeSeq="Standard.DDS.Short_Seq.Sequence"
                   typeEnum="RTI_CDR_SHORT_TYPE"
                   elementSerializeMethod="RTICdrStream_serializeShort"
                   arraySerializeMethod="RTICdrStream_serializePrimitiveArray"
                   sequenceSerializeMethod="RTICdrStream_serializePrimitiveSequence"
                   pointerSequenceSerializeMethod="RTICdrStream_serializePrimitivePointerSequence"
                   elementDeserializeMethod="RTICdrStream_deserializeShort"
                   arrayDeserializeMethod="RTICdrStream_deserializePrimitiveArray"
                   sequenceDeserializeMethod="RTICdrStream_deserializePrimitiveSequence"
                   pointerSequenceDeserializeMethod="RTICdrStream_deserializePrimitivePointerSequence"
                   elementPrintMethod="RTICdrType_printShort"
                   elementInitMethod="RTICdrType_initShort"
                   elementCopyMethod="RTICdrType_copyShort"
                   elementSize="RTI_CDR_SHORT_SIZE"
                   elementAlignment="RTI_CDR_SHORT_ALIGN"
                   elementSizeMethod="RTICdrType_getShortMaxSizeSerialized"
                   arraySizeMethod="RTICdrType_getPrimitiveArrayMaxSizeSerialized"
                   sequenceSizeMethod="RTICdrType_getPrimitiveSequenceMaxSizeSerialized"
                   elementPrintBitsMethod="RTICdrType_printBits"/>


        <type idlType="long" nativeType="Standard.DDS.Long"
                   typeCode="DDS_g_tc_long"
                   nativeTypeSeq="Standard.DDS.Long_Seq.Sequence"
                   typeEnum="RTI_CDR_LONG_TYPE"
                   elementSerializeMethod="RTICdrStream_serializeLong"
                   arraySerializeMethod="RTICdrStream_serializePrimitiveArray"
                   sequenceSerializeMethod="RTICdrStream_serializePrimitiveSequence"
                   pointerSequenceSerializeMethod="RTICdrStream_serializePrimitivePointerSequence"
                   elementDeserializeMethod="RTICdrStream_deserializeLong"
                   arrayDeserializeMethod="RTICdrStream_deserializePrimitiveArray"
                   sequenceDeserializeMethod="RTICdrStream_deserializePrimitiveSequence"
                   pointerSequenceDeserializeMethod="RTICdrStream_deserializePrimitivePointerSequence"
                   elementPrintMethod="RTICdrType_printLong"
                   elementInitMethod="RTICdrType_initLong"
                   elementCopyMethod="RTICdrType_copyLong"
                   elementSize="RTI_CDR_LONG_SIZE"
                   elementAlignment="RTI_CDR_LONG_ALIGN"
                   elementSizeMethod="RTICdrType_getLongMaxSizeSerialized"
                   arraySizeMethod="RTICdrType_getPrimitiveArrayMaxSizeSerialized"
                   sequenceSizeMethod="RTICdrType_getPrimitiveSequenceMaxSizeSerialized"
                   elementPrintBitsMethod="RTICdrType_printBits"/>


        <type idlType="longlong" nativeType="Standard.DDS.Long_Long"
                   typeCode="DDS_g_tc_longlong"
                   nativeTypeSeq="Standard.DDS.Long_Long_Seq.Sequence"
                   typeEnum="RTI_CDR_LONG_LONG_TYPE"
                   elementSerializeMethod="RTICdrStream_serializeLongLong"
                   arraySerializeMethod="RTICdrStream_serializePrimitiveArray"
                   sequenceSerializeMethod="RTICdrStream_serializePrimitiveSequence"
                   pointerSequenceSerializeMethod="RTICdrStream_serializePrimitivePointerSequence"
                   elementDeserializeMethod="RTICdrStream_deserializeLongLong"
                   arrayDeserializeMethod="RTICdrStream_deserializePrimitiveArray"
                   sequenceDeserializeMethod="RTICdrStream_deserializePrimitiveSequence"
                   pointerSequenceDeserializeMethod="RTICdrStream_deserializePrimitivePointerSequence"
                   elementPrintMethod="RTICdrType_printLongLong"
                   elementInitMethod="RTICdrType_initLongLong"
                   elementCopyMethod="RTICdrType_copyLongLong"
                   elementSize="RTI_CDR_LONG_LONG_SIZE"
                   elementAlignment="RTI_CDR_LONG_LONG_ALIGN"
                   elementSizeMethod="RTICdrType_getLongLongMaxSizeSerialized"
                   arraySizeMethod="RTICdrType_getPrimitiveArrayMaxSizeSerialized"
                   sequenceSizeMethod="RTICdrType_getPrimitiveSequenceMaxSizeSerialized"
                   elementPrintBitsMethod="notUsed"/>



        <type idlType="unsignedshort" nativeType="Standard.DDS.Unsigned_Short"
                   typeCode="DDS_g_tc_ushort"
                   nativeTypeSeq="Standard.DDS.Unsigned_Short_Seq.Sequence"
                   typeEnum="RTI_CDR_UNSIGNED_SHORT_TYPE"
                   elementSerializeMethod="RTICdrStream_serializeUnsignedShort"
                   arraySerializeMethod="RTICdrStream_serializePrimitiveArray"
                   sequenceSerializeMethod="RTICdrStream_serializePrimitiveSequence"
                   pointerSequenceSerializeMethod="RTICdrStream_serializePrimitivePointerSequence"
                   elementDeserializeMethod="RTICdrStream_deserializeUnsignedShort"
                   arrayDeserializeMethod="RTICdrStream_deserializePrimitiveArray"
                   sequenceDeserializeMethod="RTICdrStream_deserializePrimitiveSequence"
                   pointerSequenceDeserializeMethod="RTICdrStream_deserializePrimitivePointerSequence"
                   elementPrintMethod="RTICdrType_printUnsignedShort"
                   elementInitMethod="RTICdrType_initUnsignedShort"
                   elementCopyMethod="RTICdrType_copyUnsignedShort"
                   elementSize="RTI_CDR_UNSIGNED_SHORT_SIZE"
                   elementAlignment="RTI_CDR_UNSIGNED_SHORT_ALIGN"
                   elementSizeMethod="RTICdrType_getUnsignedShortMaxSizeSerialized"
                   arraySizeMethod="RTICdrType_getPrimitiveArrayMaxSizeSerialized"
                   sequenceSizeMethod="RTICdrType_getPrimitiveSequenceMaxSizeSerialized"
                   elementPrintBitsMethod="RTICdrType_printUnsignedBits"/>


        <type idlType="unsignedlong" nativeType="Standard.DDS.Unsigned_Long"
                   typeCode="DDS_g_tc_ulong"
                   nativeTypeSeq="Standard.DDS.Unsigned_Long_Seq.Sequence"
                   typeEnum="RTI_CDR_UNSIGNED_LONG_TYPE"
                   elementSerializeMethod="RTICdrStream_serializeUnsignedLong"
                   arraySerializeMethod="RTICdrStream_serializePrimitiveArray"
                   sequenceSerializeMethod="RTICdrStream_serializePrimitiveSequence"
                   pointerSequenceSerializeMethod="RTICdrStream_serializePrimitivePointerSequence"
                   elementDeserializeMethod="RTICdrStream_deserializeUnsignedLong"
                   arrayDeserializeMethod="RTICdrStream_deserializePrimitiveArray"
                   sequenceDeserializeMethod="RTICdrStream_deserializePrimitiveSequence"
                   pointerSequenceDeserializeMethod="RTICdrStream_deserializePrimitivePointerSequence"
                   elementPrintMethod="RTICdrType_printUnsignedLong"
                   elementInitMethod="RTICdrType_initUnsignedLong"
                   elementCopyMethod="RTICdrType_copyUnsignedLong"
                   elementSize="RTI_CDR_UNSIGNED_LONG_SIZE"
                   elementAlignment="RTI_CDR_UNSIGNED_LONG_ALIGN"
                   elementSizeMethod="RTICdrType_getUnsignedLongMaxSizeSerialized"
                   arraySizeMethod="RTICdrType_getPrimitiveArrayMaxSizeSerialized"
                   sequenceSizeMethod="RTICdrType_getPrimitiveSequenceMaxSizeSerialized"
                   elementPrintBitsMethod="RTICdrType_printUnsignedBits"/>



        <type idlType="unsignedlonglong" nativeType="Standard.DDS.Unsigned_Long_Long"
                   typeCode="DDS_g_tc_ulonglong"
                   nativeTypeSeq="Standard.DDS.Unsigned_Long_Long_Seq.Sequence"
                   typeEnum="RTI_CDR_UNSIGNED_LONG_LONG_TYPE"
                   elementSerializeMethod="RTICdrStream_serializeUnsignedLongLong"
                   arraySerializeMethod="RTICdrStream_serializePrimitiveArray"
                   sequenceSerializeMethod="RTICdrStream_serializePrimitiveSequence"
                   pointerSequenceSerializeMethod="RTICdrStream_serializePrimitivePointerSequence"
                   elementDeserializeMethod="RTICdrStream_deserializeUnsignedLongLong"
                   arrayDeserializeMethod="RTICdrStream_deserializePrimitiveArray"
                   sequenceDeserializeMethod="RTICdrStream_deserializePrimitiveSequence"
                   pointerSequenceDeserializeMethod="RTICdrStream_deserializePrimitivePointerSequence"
                   elementPrintMethod="RTICdrType_printUnsignedLongLong"
                   elementInitMethod="RTICdrType_initUnsignedLongLong"
                   elementCopyMethod="RTICdrType_copyUnsignedLongLong"
                   elementSize="RTI_CDR_UNSIGNED_LONG_LONG_SIZE"
                   elementAlignment="RTI_CDR_UNSIGNED_LONG_LONG_ALIGN"
                   elementSizeMethod="RTICdrType_getLongLongMaxSizeSerialized"
                   arraySizeMethod="RTICdrType_getPrimitiveArrayMaxSizeSerialized"
                   sequenceSizeMethod="RTICdrType_getPrimitiveSequenceMaxSizeSerialized"
                   elementPrintBitsMethod="notUsed"/>



        <type idlType="float" nativeType="Standard.DDS.Float"
                   typeCode="DDS_g_tc_float"
                   nativeTypeSeq="Standard.DDS.Float_Seq.Sequence"
                   typeEnum="RTI_CDR_FLOAT_TYPE"
                   elementSerializeMethod="RTICdrStream_serializeFloat"
                   arraySerializeMethod="RTICdrStream_serializePrimitiveArray"
                   sequenceSerializeMethod="RTICdrStream_serializePrimitiveSequence"
                   pointerSequenceSerializeMethod="RTICdrStream_serializePrimitivePointerSequence"
                   elementDeserializeMethod="RTICdrStream_deserializeFloat"
                   arrayDeserializeMethod="RTICdrStream_deserializePrimitiveArray"
                   sequenceDeserializeMethod="RTICdrStream_deserializePrimitiveSequence"
                   pointerSequenceDeserializeMethod="RTICdrStream_deserializePrimitivePointerSequence"
                   elementPrintMethod="RTICdrType_printFloat"
                   elementInitMethod="RTICdrType_initFloat"
                   elementCopyMethod="RTICdrType_copyFloat"
                   elementSize="RTI_CDR_FLOAT_SIZE"
                   elementAlignment="RTI_CDR_FLOAT_ALIGN"
                   elementSizeMethod="RTICdrType_getFloatMaxSizeSerialized"
                   arraySizeMethod="RTICdrType_getPrimitiveArrayMaxSizeSerialized"
                   sequenceSizeMethod="RTICdrType_getPrimitiveSequenceMaxSizeSerialized"
                   elementPrintBitsMethod="notUsed"/>


        <type idlType="double" nativeType="Standard.DDS.Double"
                   typeCode="DDS_g_tc_double"
                   nativeTypeSeq="Standard.DDS.Double_Seq.Sequence"
                   typeEnum="RTI_CDR_DOUBLE_TYPE"
                   elementSerializeMethod="RTICdrStream_serializeDouble"
                   arraySerializeMethod="RTICdrStream_serializePrimitiveArray"
                   sequenceSerializeMethod="RTICdrStream_serializePrimitiveSequence"
                   pointerSequenceSerializeMethod="RTICdrStream_serializePrimitivePointerSequence"
                   elementDeserializeMethod="RTICdrStream_deserializeDouble"
                   arrayDeserializeMethod="RTICdrStream_deserializePrimitiveArray"
                   sequenceDeserializeMethod="RTICdrStream_deserializePrimitiveSequence"
                   pointerSequenceDeserializeMethod="RTICdrStream_deserializePrimitivePointerSequence"
                   elementPrintMethod="RTICdrType_printDouble"
                   elementInitMethod="RTICdrType_initDouble"
                   elementCopyMethod="RTICdrType_copyDouble"
                   elementSize="RTI_CDR_DOUBLE_SIZE"
                   elementAlignment="RTI_CDR_DOUBLE_ALIGN"
                   elementSizeMethod="RTICdrType_getDoubleMaxSizeSerialized"
                   arraySizeMethod="RTICdrType_getPrimitiveArrayMaxSizeSerialized"
                   sequenceSizeMethod="RTICdrType_getPrimitiveSequenceMaxSizeSerialized"
                   elementPrintBitsMethod="notUsed"/>


        <type idlType="longdouble" nativeType="Standard.DDS.Long_Double" 
                   typeCode="DDS_g_tc_longdouble"
                   nativeTypeSeq="Standard.DDS.Long_Double_Seq.Sequence"
                   typeEnum="RTI_CDR_LONG_DOUBLE_TYPE"
                   elementSerializeMethod="RTICdrStream_serializeLongDouble"
                   arraySerializeMethod="RTICdrStream_serializePrimitiveArray"
                   sequenceSerializeMethod="RTICdrStream_serializePrimitiveSequence"
                   pointerSequenceSerializeMethod="RTICdrStream_serializePrimitivePointerSequence"
                   elementDeserializeMethod="RTICdrStream_deserializeLongDouble"
                   arrayDeserializeMethod="RTICdrStream_deserializePrimitiveArray"
                   sequenceDeserializeMethod="RTICdrStream_deserializePrimitiveSequence"
                   pointerSequenceDeserializeMethod="RTICdrStream_deserializePrimitivePointerSequence"
                   elementPrintMethod="RTICdrType_printLongDouble"
                   elementInitMethod="RTICdrType_initLongDouble"
                   elementCopyMethod="RTICdrType_copyLongDouble"
                   elementSize="RTI_CDR_LONG_DOUBLE_SIZE"
                   elementAlignment="RTI_CDR_LONG_DOUBLE_ALIGN"
                   elementSizeMethod="RTICdrType_getLongDoubleMaxSizeSerialized"
                   arraySizeMethod="RTICdrType_getPrimitiveArrayMaxSizeSerialized"
                   sequenceSizeMethod="RTICdrType_getPrimitiveSequenceMaxSizeSerialized"
                   elementPrintBitsMethod="notUsed"/>


        <type idlType="char" nativeType="Standard.DDS.Char" 
                   typeCode="DDS_g_tc_char"
                   nativeTypeSeq="Standard.DDS.Char_Seq.Sequence"
                   typeEnum="RTI_CDR_CHAR_TYPE"
                   elementSerializeMethod="RTICdrStream_serializeChar"
                   arraySerializeMethod="RTICdrStream_serializePrimitiveArray"
                   sequenceSerializeMethod="RTICdrStream_serializePrimitiveSequence"
                   pointerSequenceSerializeMethod="RTICdrStream_serializePrimitivePointerSequence"
                   elementDeserializeMethod="RTICdrStream_deserializeChar"
                   arrayDeserializeMethod="RTICdrStream_deserializePrimitiveArray"
                   sequenceDeserializeMethod="RTICdrStream_deserializePrimitiveSequence"
                   pointerSequenceDeserializeMethod="RTICdrStream_deserializePrimitivePointerSequence"
                   elementPrintMethod="RTICdrType_printChar"
                   elementInitMethod="RTICdrType_initChar"
                   elementCopyMethod="RTICdrType_copyChar"
                   elementSize="RTI_CDR_CHAR_SIZE"
                   elementAlignment="RTI_CDR_CHAR_ALIGN"
                   elementSizeMethod="RTICdrType_getCharMaxSizeSerialized"
                   arraySizeMethod="RTICdrType_getPrimitiveArrayMaxSizeSerialized"
                   sequenceSizeMethod="RTICdrType_getPrimitiveSequenceMaxSizeSerialized"
                   elementPrintBitsMethod="RTICdrType_printUnsignedBits"/>


        <type idlType="wchar" nativeType="Standard.DDS.Wchar"
                   typeCode="DDS_g_tc_wchar"
                   nativeTypeSeq="Standard.DDS.Wchar_Seq.Sequence"
                   typeEnum="RTI_CDR_WCHAR_TYPE"
                   elementSerializeMethod="RTICdrStream_serializeWchar"
                   arraySerializeMethod="RTICdrStream_serializePrimitiveArray"
                   sequenceSerializeMethod="RTICdrStream_serializePrimitiveSequence"
                   pointerSequenceSerializeMethod="RTICdrStream_serializePrimitivePointerSequence"
                   elementDeserializeMethod="RTICdrStream_deserializeWchar"
                   arrayDeserializeMethod="RTICdrStream_deserializePrimitiveArray"
                   sequenceDeserializeMethod="RTICdrStream_deserializePrimitiveSequence"
                   pointerSequenceDeserializeMethod="RTICdrStream_deserializePrimitivePointerSequence"
                   elementPrintMethod="RTICdrType_printWchar"
                   elementInitMethod="RTICdrType_initWchar"
                   elementCopyMethod="RTICdrType_copyWchar"
                   elementSize="RTI_CDR_WCHAR_SIZE"
                   elementAlignment="RTI_CDR_WCHAR_ALIGN"
                   elementSizeMethod="RTICdrType_getWcharMaxSizeSerialized"
                   arraySizeMethod="RTICdrType_getPrimitiveArrayMaxSizeSerialized"
                   sequenceSizeMethod="RTICdrType_getPrimitiveSequenceMaxSizeSerialized"
                   elementPrintBitsMethod="RTICdrType_printBits"/>

        <type idlType="octet" nativeType="Standard.DDS.Octet"
                   typeCode="DDS_g_tc_octet"
                   nativeTypeSeq="Standard.DDS.Octet_Seq.Sequence"
                   typeEnum="RTI_CDR_OCTET_TYPE"
                   elementSerializeMethod="RTICdrStream_serializeOctet"
                   arraySerializeMethod="RTICdrStream_serializePrimitiveArray"
                   sequenceSerializeMethod="RTICdrStream_serializePrimitiveSequence"
                   pointerSequenceSerializeMethod="RTICdrStream_serializePrimitivePointerSequence"
                   elementDeserializeMethod="RTICdrStream_deserializeOctet"
                   arrayDeserializeMethod="RTICdrStream_deserializePrimitiveArray"
                   sequenceDeserializeMethod="RTICdrStream_deserializePrimitiveSequence"
                   pointerSequenceDeserializeMethod="RTICdrStream_deserializePrimitivePointerSequence"
                   elementPrintMethod="RTICdrType_printOctet"
                   elementInitMethod="RTICdrType_initOctet"
                   elementCopyMethod="RTICdrType_copyOctet"
                   elementSize="RTI_CDR_OCTET_SIZE"
                   elementAlignment="RTI_CDR_OCTET_ALIGN"
                   elementSizeMethod="RTICdrType_getOctetMaxSizeSerialized"
                   arraySizeMethod="RTICdrType_getPrimitiveArrayMaxSizeSerialized"
                   sequenceSizeMethod="RTICdrType_getPrimitiveSequenceMaxSizeSerialized"
                   elementPrintBitsMethod="RTICdrType_printBits"/>

        <!-- Note: The CORBA IDL->C spec maps boolean to unsigned short -->
        <type idlType="boolean" nativeType="Standard.DDS.Boolean"
                   typeCode="DDS_g_tc_boolean"
                   nativeTypeSeq="Standard.DDS.Boolean_Seq.Sequence"
                   typeEnum="RTI_CDR_BOOLEAN_TYPE"
                   elementSerializeMethod="RTICdrStream_serializeBoolean"
                   arraySerializeMethod="RTICdrStream_serializePrimitiveArray"
                   sequenceSerializeMethod="RTICdrStream_serializePrimitiveSequence"
                   pointerSequenceSerializeMethod="RTICdrStream_serializePrimitivePointerSequence"
                   elementDeserializeMethod="RTICdrStream_deserializeBoolean"
                   arrayDeserializeMethod="RTICdrStream_deserializePrimitiveArray"
                   sequenceDeserializeMethod="RTICdrStream_deserializePrimitiveSequence"
                   pointerSequenceDeserializeMethod="RTICdrStream_deserializePrimitivePointerSequence"
                   elementPrintMethod="RTICdrType_printBoolean"
                   elementInitMethod="RTICdrType_initBoolean"
                   elementCopyMethod="RTICdrType_copyBoolean"
                   elementSize="RTI_CDR_BOOLEAN_SIZE"
                   elementAlignment="RTI_CDR_BOOLEAN_ALIGN"
                   elementSizeMethod="RTICdrType_getBooleanMaxSizeSerialized"
                   arraySizeMethod="RTICdrType_getPrimitiveArrayMaxSizeSerialized"
                   sequenceSizeMethod="RTICdrType_getPrimitiveSequenceMaxSizeSerialized"
                   elementPrintBitsMethod="notUsed"/>

    </typeInfoMap>


    <!-- Mapping of method kinds (serialize, deserialize, etc) to their template string.
         Each method kind is further categorized using <method> child element that has
         a mandetory attribute "kind" and an optional attribute "typeKind". When a
         code generation stylesheet seeks the right template given a method and a member,
         it should be ready to match even when the typeKind attribute is missing. This
         avoids duplicating the template when the difference between typeKind (builtin
         vs. user) does not matter.
    -->

    <!-- TODO: Document the substitution strings and their meaning in form of a table -->
    <methodInfoMap>

    <!-- ============= Struct member declaration ========================= -->

    <!-- While not really a method, from code-generation point-of-view, the difference
         between declaration code and method code for a struct member is irrelevant. -->

        <method kind="structMember">
            <template kind="scalar">
    %%rawName%% : %%aliased%% %%pointer%% %%nativeType%%;</template>
            <template kind="string">
    %%rawName%% : %%aliased%% %%pointer%% Standard.DDS.String; -- maximum length = %%stringMaxLength%%</template>
            <template kind="wstring">
    %%rawName%% : %%aliased%% %%pointer%% Standard.DDS.Wide_String; -- maximum length = %%stringMaxLength%%</template>
            <template kind="array" typeKind="builtin">
    %%rawName%% : %%aliased%% %%pointer%% %%nativeType%%_Array%%cardinality%%;</template>
            <template kind="array" typeKind="user" type="string">
    %%rawName%% : %%aliased%% %%pointer%% Standard.DDS.String_Array%%cardinality%%;</template>
            <template kind="array" typeKind="user" type="wstring">
    %%rawName%% : %%aliased%% %%pointer%% Standard.DDS.Wide_String_Array%%cardinality%%;</template>
            <template kind="array" typeKind="user">
    %%rawName%% : %%aliased%% %%pointer%% %%nativeType%%_Array%%cardinality%%;</template>
            <template kind="sequence" typeKind="user" type="string">
    %%rawName%% : %%aliased%% %%pointer%% Standard.DDS.String_Seq.Sequence;</template>
            <template kind="sequence" typeKind="user" type="wstring">
    %%rawName%% : %%aliased%% %%pointer%% Standard.DDS.Wide_String_Seq.Sequence;</template>
            <template kind="sequence">
    %%rawName%% : %%aliased%% %%pointer%% %%nativeTypeSeq%%;</template>
            <template kind="arraySequence" typeKind="user" type="string">
    %%rawName%% : %%aliased%% %%pointer%% %%nativeType%%_Array;</template>
            <template kind="arraySequence" typeKind="user" type="wstring">
    %%rawName%% : %%aliased%% %%pointer%% %%nativeType%%_Array;</template>
            <template kind="arraySequence">
    %%rawName%% : %%aliased%% %%pointer%% %%nativeType%%_Array;</template>
    	    <!--<template kind="bitfield">
    %%rawName%% : aliased %%pointer%% %%nativeType%% range 0 .. %%bits%%;</template>-->
            <template kind="bitfield">
    %%rawName%% : %%aliased%% %%pointer%% %%nativeType%%;</template>
        </method>


    <!-- ============================== Serialize ========================= -->

        <method kind="serialize">
            <template kind="scalar" typeKind="builtin">
    if (!%%elementSerializeMethod%%(
        stream, %%sampleAccessPointer%%%%name%%)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="scalar" typeKind="user">
    if (!%%elementSerializeMethod%%(
        stream, %%sampleAccessPointer%%%%name%%, serialize_option)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="string">
    if (%%sampleAccess%%%%name%% == NULL) {
        return RTI_FALSE;
    }
    if (!RTICdrStream_serializeString(
        stream, %%sampleAccess%%%%name%%, %%stringMaxLength%% + 1)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="wstring">
    if (%%sampleAccess%%%%name%% == NULL) {
        return RTI_FALSE;
    }
    if (!RTICdrStream_serializeWstring(
        stream, %%sampleAccess%%%%name%%,%%stringMaxLength%% + 1)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="builtin">
    if (!%%arraySerializeMethod%%(
        stream, (void*)%%sampleAccess%%%%name%%, %%multiDimensionalArraySize%%, %%typeEnum%%)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="builtin" pointer="yes">
    if (!%%arraySerializeMethod%%(
        stream, (const void**)%%sampleAccessPointer%%%%name%%, %%multiDimensionalArraySize%%, %%typeEnum%%)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="user" type="string">
    if (!RTICdrStream_serializeStringArray(
        stream, (void *)%%sampleAccess%%%%name%%,
        %%multiDimensionalArraySize%%, %%stringMaxLength%% + 1,
        RTI_CDR_CHAR_TYPE)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="user" type="string" pointer="yes">
    if (!RTICdrStream_serializeStringPointerArray(
        stream, (const void **)%%sampleAccessPointer%%%%name%%,
        %%multiDimensionalArraySize%%, %%stringMaxLength%% + 1,
        RTI_CDR_CHAR_TYPE)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="user" type="wstring">
    if (!RTICdrStream_serializeStringArray(
        stream, (void *)%%sampleAccess%%%%name%%,
        %%multiDimensionalArraySize%%, %%stringMaxLength%% + 1,
        RTI_CDR_WCHAR_TYPE)){
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="user" type="wstring" pointer="yes">
    if (!RTICdrStream_serializeStringPointerArray(
        stream, (const void **)%%sampleAccessPointer%%%%name%%,
        %%multiDimensionalArraySize%%, %%stringMaxLength%% + 1,
        RTI_CDR_WCHAR_TYPE)){
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="user">
    if (!%%arraySerializeMethod%%(
        stream, (void*)%%sampleAccess%%%%name%%,
        %%multiDimensionalArraySize%%, sizeof(%%nativeType%%),
        (RTICdrStreamSerializeFunction)%%elementSerializeMethod%%,
        serialize_option)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="user" pointer="yes">
    if (!%%arraySerializeMethod%%(
        stream, (const void**)%%sampleAccessPointer%%%%name%%,
        %%multiDimensionalArraySize%%, sizeof(%%nativeType%%),
        (RTICdrStreamSerializeFunction)%%elementSerializeMethod%%,
        serialize_option)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="sequence" typeKind="builtin">
    if (%%nativeTypeSeq%%_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%) != NULL) {
        if (!%%sequenceSerializeMethod%%(
            stream,
            %%nativeTypeSeq%%_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            %%nativeTypeSeq%%_get_length(%%sampleAccessPointer%%%%name%%),
            %%sequenceMaxLength%%,
            %%typeEnum%%)) {
            return RTI_FALSE;
        }
    } else {
        if (!%%pointerSequenceSerializeMethod%%(
            stream,
            (const void **)%%nativeTypeSeq%%_get_discontiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            %%nativeTypeSeq%%_get_length(%%sampleAccessPointer%%%%name%%),
            %%sequenceMaxLength%%,
            %%typeEnum%%)) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="sequence" typeKind="user" type="string">
    if (DDS_StringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%) != NULL) {
        if (!RTICdrStream_serializeStringSequence(
            stream,
            DDS_StringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            DDS_StringSeq_get_length(%%sampleAccessPointer%%%%name%%),
            %%sequenceMaxLength%%,
            %%stringMaxLength%% + 1,
            RTI_CDR_CHAR_TYPE)) {
            return RTI_FALSE;
        }
    } else {
        if (!RTICdrStream_serializeStringPointerSequence(
            stream,
            (const void **)DDS_StringSeq_get_discontiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            DDS_StringSeq_get_length(%%sampleAccessPointer%%%%name%%),
            %%sequenceMaxLength%%,
            %%stringMaxLength%% + 1,
            RTI_CDR_CHAR_TYPE)) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="sequence" typeKind="user" type="wstring">
    if (DDS_WstringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%) != NULL) {
        if (!RTICdrStream_serializeStringSequence(
            stream,
            DDS_WstringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            DDS_WstringSeq_get_length(%%sampleAccessPointer%%%%name%%),
            %%sequenceMaxLength%%,
            %%stringMaxLength%% + 1,
            RTI_CDR_WCHAR_TYPE)) {
            return RTI_FALSE;
        }
    } else {
        if (!RTICdrStream_serializeStringPointerSequence(
            stream,
            (const void **)DDS_WstringSeq_get_discontiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            DDS_WstringSeq_get_length(%%sampleAccessPointer%%%%name%%),
            %%sequenceMaxLength%%,
            %%stringMaxLength%% + 1,
            RTI_CDR_WCHAR_TYPE)) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="sequence" typeKind="user">
    if (%%nativeTypeSeq%%_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%) != NULL) {
        if (!%%sequenceSerializeMethod%%(
            stream,
            %%nativeTypeSeq%%_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            %%nativeTypeSeq%%_get_length(%%sampleAccessPointer%%%%name%%),
            %%sequenceMaxLength%%,
            sizeof(%%nativeType%%),
            (RTICdrStreamSerializeFunction)%%elementSerializeMethod%%,
            serialize_option)) {
            return RTI_FALSE;
        }
    } else {
        if (!%%pointerSequenceSerializeMethod%%(
            stream,
            (const void **)%%nativeTypeSeq%%_get_discontiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            %%nativeTypeSeq%%_get_length(%%sampleAccessPointer%%%%name%%),
            %%sequenceMaxLength%%,
            (RTICdrStreamSerializeFunction)%%elementSerializeMethod%%,
            serialize_option)) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="arraySequence" typeKind="user" type="string">
    for (i = 0; i &lt; %%multiDimensionalArraySize%%; ++i) {
        if (DDS_StringSeq_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]) != NULL) {
            if (!RTICdrStream_serializeStringSequence(
                stream,
                DDS_StringSeq_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                DDS_StringSeq_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                %%sequenceMaxLength%%,
                %%stringMaxLength%% + 1,
                RTI_CDR_CHAR_TYPE)) {
                return RTI_FALSE;
            }
        } else {
            if (!RTICdrStream_serializeStringPointerSequence(
                stream,
                (const void **)DDS_StringSeq_get_discontiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                DDS_StringSeq_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                %%sequenceMaxLength%%,
                %%stringMaxLength%% + 1,
                RTI_CDR_CHAR_TYPE)){
                return RTI_FALSE;
            }
        }
    }
            </template>
            <template kind="arraySequence" typeKind="user" type="wstring">
    for (i = 0; i &lt; %%multiDimensionalArraySize%%; ++i) {
        if (DDS_WstringSeq_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]) != NULL) {
            if (!RTICdrStream_serializeStringSequence(
                stream,
                DDS_WstringSeq_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                DDS_WstringSeq_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                %%sequenceMaxLength%%,
                %%stringMaxLength%% + 1,
                RTI_CDR_WCHAR_TYPE)){
                return RTI_FALSE;
            }
        } else {
            if (!RTICdrStream_serializeStringPointerSequence(
                stream,
                (const void **)DDS_WstringSeq_get_discontiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                DDS_WstringSeq_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                %%sequenceMaxLength%%,
                %%stringMaxLength%% + 1,
                RTI_CDR_WCHAR_TYPE)) {
                return RTI_FALSE;
            }
        }
    }
            </template>
            <template kind="arraySequence" typeKind="user">
    for (i = 0; i &lt; %%multiDimensionalArraySize%%; ++i) {
        if (%%nativeTypeSeq%%_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]) != NULL) {
            if (!%%sequenceSerializeMethod%%(
                stream,
                %%nativeTypeSeq%%_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                %%nativeTypeSeq%%_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                %%sequenceMaxLength%%,
                sizeof(%%nativeType%%),
                (RTICdrStreamSerializeFunction)%%elementSerializeMethod%%,
                serialize_option)) {
                return RTI_FALSE;
            }
        } else {
            if (!%%pointerSequenceSerializeMethod%%(
                stream,
                (const void **)%%nativeTypeSeq%%_get_discontiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                %%nativeTypeSeq%%_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                %%sequenceMaxLength%%,
                (RTICdrStreamSerializeFunction)%%elementSerializeMethod%%,
                serialize_option)) {
                return RTI_FALSE;
            }
        }
    }
            </template>
            <template kind="arraySequence" typeKind="builtin">
    for (i = 0; i&lt; %%multiDimensionalArraySize%%; ++i) {
        if (%%nativeTypeSeq%%_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]) != NULL) {
            if (!%%sequenceSerializeMethod%%(
                stream,
                %%nativeTypeSeq%%_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                %%nativeTypeSeq%%_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                %%sequenceMaxLength%%,
                %%typeEnum%%)) {
                return RTI_FALSE;
            }
        } else {
            if (!%%pointerSequenceSerializeMethod%%(
                stream,
                (const void **)%%nativeTypeSeq%%_get_discontiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                %%nativeTypeSeq%%_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                %%sequenceMaxLength%%,
                %%typeEnum%%)) {
                return RTI_FALSE;
            }
        }
    }
            </template>
            <template kind="bitfield" bitKind="normal">
    bit_val = (RTICdrUnsignedLong) %%sampleAccess%%%%name%%;
    if (!RTICdrStream_serializeBits(stream, &amp;bit_val, %%bits%%)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="bitfield" bitKind="lastBitField">
    bit_val = (RTICdrUnsignedLong) %%sampleAccess%%%%name%%;
    if (!RTICdrStream_serializeBits(stream, &amp;bit_val, %%bits%%)) {
        return RTI_FALSE;
    }
    if (!RTICdrStream_flushBitsBuffer(stream)) {
    	return RTI_FALSE;
    }
            </template>
        </method>

    <!-- =========================== Deserialize ========================= -->

        <method kind="deserialize">
            <template kind="scalar" typeKind="builtin">
    if (!%%elementDeserializeMethod%%(
        stream, %%sampleAccessPointer%%%%name%%)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="scalar" typeKind="user">
    if (!%%elementDeserializeMethod%%(
        stream, %%sampleAccessPointer%%%%name%%, deserialize_option)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="string">
    if (!RTICdrStream_deserializeString(
        stream, %%sampleAccess%%%%name%%, %%stringMaxLength%% + 1)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="wstring">
    if (!RTICdrStream_deserializeWstring(
        stream, %%sampleAccess%%%%name%%,%%stringMaxLength%% + 1)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="builtin">
    if (!%%arrayDeserializeMethod%%(
        stream, (void*)%%sampleAccess%%%%name%%, %%multiDimensionalArraySize%%, %%typeEnum%%)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="builtin" pointer="yes">
    if (!%%arrayDeserializeMethod%%(
        stream, (void**)%%sampleAccessPointer%%%%name%%, %%multiDimensionalArraySize%%, %%typeEnum%%)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="user" type="string">
    if (!RTICdrStream_deserializeStringArray(
        stream, (void*)%%sampleAccess%%%%name%%,
        %%multiDimensionalArraySize%%, %%stringMaxLength%% + 1,
        RTI_CDR_CHAR_TYPE)){
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="user" type="string" pointer="yes">
    if (!RTICdrStream_deserializeStringPointerArray(
        stream, (void**)%%sampleAccessPointer%%%%name%%,
        %%multiDimensionalArraySize%%, %%stringMaxLength%% + 1,
        RTI_CDR_CHAR_TYPE)){
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="user" type="wstring">
    if (!RTICdrStream_deserializeStringArray(
        stream, (void*)%%sampleAccess%%%%name%%,
        %%multiDimensionalArraySize%%, %%stringMaxLength%% + 1,
        RTI_CDR_WCHAR_TYPE)){
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="user" type="wstring" pointer="yes">
    if (!RTICdrStream_deserializeStringPointerArray(
        stream, (void**)%%sampleAccessPointer%%%%name%%,
        %%multiDimensionalArraySize%%, %%stringMaxLength%% + 1,
        RTI_CDR_WCHAR_TYPE)){
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="user">
    if (!%%arrayDeserializeMethod%%(
        stream, (void*)%%sampleAccess%%%%name%%,
        %%multiDimensionalArraySize%%, sizeof(%%nativeType%%),
        (RTICdrStreamDeserializeFunction)%%elementDeserializeMethod%%,
        deserialize_option)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="user" pointer="yes">
    if (!%%arrayDeserializeMethod%%(
        stream, (void**)%%sampleAccessPointer%%%%name%%,
        %%multiDimensionalArraySize%%, sizeof(%%nativeType%%),
        (RTICdrStreamDeserializeFunction)%%elementDeserializeMethod%%,
        deserialize_option)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="sequence" typeKind="builtin">
    if (%%nativeTypeSeq%%_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%) != NULL) {
        if (!%%sequenceDeserializeMethod%%(
            stream,
            %%nativeTypeSeq%%_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            &amp;sequence_length,
            %%nativeTypeSeq%%_get_maximum(%%sampleAccessPointer%%%%name%%),
            %%typeEnum%%)) {
            return RTI_FALSE;
        }
    } else {
        if (!%%pointerSequenceDeserializeMethod%%(
            stream,
            (void **)%%nativeTypeSeq%%_get_discontiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            &amp;sequence_length,
            %%nativeTypeSeq%%_get_maximum(%%sampleAccessPointer%%%%name%%),
            %%typeEnum%%)) {
            return RTI_FALSE;
        }
    }
    if (!%%nativeTypeSeq%%_set_length(%%sampleAccessPointer%%%%name%%, sequence_length)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="sequence" typeKind="user" type="string">
    if (DDS_StringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%) != NULL) {
        if (!RTICdrStream_deserializeStringSequence(
            stream,
            DDS_StringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            &amp;sequence_length,
            DDS_StringSeq_get_maximum(%%sampleAccessPointer%%%%name%%),
            %%stringMaxLength%% + 1,
            RTI_CDR_CHAR_TYPE)){
            return RTI_FALSE;
        }
    } else {
        if (!RTICdrStream_deserializeStringPointerSequence(
            stream,
            (void **)DDS_StringSeq_get_discontiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            &amp;sequence_length,
            DDS_StringSeq_get_maximum(%%sampleAccessPointer%%%%name%%),
            %%stringMaxLength%% + 1,
            RTI_CDR_CHAR_TYPE)){
            return RTI_FALSE;
        }
    }
    if (!DDS_StringSeq_set_length(%%sampleAccessPointer%%%%name%%, sequence_length)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="sequence" typeKind="user" type="wstring">
    if (DDS_WstringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%) != NULL) {
        if (!RTICdrStream_deserializeStringSequence(
            stream,
            DDS_WstringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            &amp;sequence_length,
            DDS_WstringSeq_get_maximum(%%sampleAccessPointer%%%%name%%),
            %%stringMaxLength%% + 1,
            RTI_CDR_WCHAR_TYPE)){
            return RTI_FALSE;
        }
    } else {
        if (!RTICdrStream_deserializeStringPointerSequence(
            stream,
            (void **)DDS_WstringSeq_get_discontiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            &amp;sequence_length,
            DDS_WstringSeq_get_maximum(%%sampleAccessPointer%%%%name%%),
            %%stringMaxLength%% + 1,
            RTI_CDR_WCHAR_TYPE)){
            return RTI_FALSE;
        }
    }
    if (!DDS_WstringSeq_set_length(%%sampleAccessPointer%%%%name%%, sequence_length)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="sequence" typeKind="user">
    if (%%nativeTypeSeq%%_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%) != NULL) {
        if (!%%sequenceDeserializeMethod%%(
            stream,
            %%nativeTypeSeq%%_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            &amp;sequence_length,
            %%nativeTypeSeq%%_get_maximum(%%sampleAccessPointer%%%%name%%),
            sizeof(%%nativeType%%),
            (RTICdrStreamDeserializeFunction)%%elementDeserializeMethod%%,
            deserialize_option)) {
            return RTI_FALSE;
        }
    } else {
        if (!%%pointerSequenceDeserializeMethod%%(
            stream,
            (void **)%%nativeTypeSeq%%_get_discontiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            &amp;sequence_length,
            %%nativeTypeSeq%%_get_maximum(%%sampleAccessPointer%%%%name%%),
            (RTICdrStreamDeserializeFunction)%%elementDeserializeMethod%%,
            deserialize_option)) {
            return RTI_FALSE;
        }
    }
    if (!%%nativeTypeSeq%%_set_length(
        %%sampleAccessPointer%%%%name%%, sequence_length)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="arraySequence" typeKind="user" type="string">
    for (i = 0; i &lt; %%multiDimensionalArraySize%%; i++) {
        if (DDS_StringSeq_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]) != NULL) {
            if (!RTICdrStream_deserializeStringSequence(
                stream,
                DDS_StringSeq_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                &amp;sequence_length,
                DDS_StringSeq_get_maximum(&amp;%%sampleAccess%%%%name%%[i]),
                %%stringMaxLength%% + 1,
                RTI_CDR_CHAR_TYPE)){
                return RTI_FALSE;
            }
        } else {
            if (!RTICdrStream_deserializeStringPointerSequence(
                stream,
                (void **)DDS_StringSeq_get_discontiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                &amp;sequence_length,
                DDS_StringSeq_get_maximum(&amp;%%sampleAccess%%%%name%%[i]),
                %%stringMaxLength%% + 1,
                RTI_CDR_CHAR_TYPE)){
                return RTI_FALSE;
            }
        }
        if (!DDS_StringSeq_set_length(&amp;%%sampleAccess%%%%name%%[i], sequence_length)) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="arraySequence" typeKind="user" type="wstring">
    for (i = 0; i &lt; %%multiDimensionalArraySize%%; i++) {
        if (DDS_WstringSeq_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]) != NULL) {
            if (!RTICdrStream_deserializeStringSequence(
                stream,
                DDS_WstringSeq_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                &amp;sequence_length,
                DDS_WstringSeq_get_maximum(&amp;%%sampleAccess%%%%name%%[i]),
                %%stringMaxLength%% + 1,
                RTI_CDR_WCHAR_TYPE)){
                return RTI_FALSE;
            }
        } else {
            if (!RTICdrStream_deserializeStringPointerSequence(
                stream,
                (void **)DDS_WstringSeq_get_discontiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                &amp;sequence_length,
                DDS_WstringSeq_get_maximum(&amp;%%sampleAccess%%%%name%%[i]),
                %%stringMaxLength%% + 1,
                RTI_CDR_WCHAR_TYPE)){
                return RTI_FALSE;
            }
        }
        if (!DDS_WstringSeq_set_length(&amp;%%sampleAccess%%%%name%%[i], sequence_length)) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="arraySequence" typeKind="user">
    for (i = 0; i &lt; %%multiDimensionalArraySize%%; i++) {
        if (%%nativeTypeSeq%%_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]) != NULL) {
            if (!%%sequenceDeserializeMethod%%(
                stream,
                %%nativeTypeSeq%%_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                &amp;sequence_length,
                %%nativeTypeSeq%%_get_maximum(&amp;%%sampleAccess%%%%name%%[i]),
                sizeof(%%nativeType%%),
                (RTICdrStreamDeserializeFunction)%%elementDeserializeMethod%%,
                deserialize_option)) {
                return RTI_FALSE;
            }
        } else {
            if (!%%pointerSequenceDeserializeMethod%%(
                stream,
                (void **)%%nativeTypeSeq%%_get_discontiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                &amp;sequence_length,
                %%nativeTypeSeq%%_get_maximum(&amp;%%sampleAccess%%%%name%%[i]),
                (RTICdrStreamDeserializeFunction)%%elementDeserializeMethod%%,
                deserialize_option)) {
                return RTI_FALSE;
            }
        }
        if (!%%nativeTypeSeq%%_set_length(
            &amp;%%sampleAccess%%%%name%%[i],sequence_length)) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="arraySequence" typeKind="builtin">
    for (i = 0; i &lt; %%multiDimensionalArraySize%%; i++) {
        if (%%nativeTypeSeq%%_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]) != NULL) {
            if (!%%sequenceDeserializeMethod%%(
                stream,
                %%nativeTypeSeq%%_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                &amp;sequence_length,
                %%nativeTypeSeq%%_get_maximum(&amp;%%sampleAccess%%%%name%%[i]),
                %%typeEnum%%)) {
                return RTI_FALSE;
            }
         } else {
            if (!%%pointerSequenceDeserializeMethod%%(
                stream,
                (void **)%%nativeTypeSeq%%_get_discontiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                &amp;sequence_length,
                %%nativeTypeSeq%%_get_maximum(&amp;%%sampleAccess%%%%name%%[i]),
                %%typeEnum%%)) {
                return RTI_FALSE;
            }
         }
         if (!%%nativeTypeSeq%%_set_length(&amp;%%sampleAccess%%%%name%%[i], sequence_length)) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="bitfield" bitKind="normal">
    if (!RTICdrStream_deserializeBits(stream, &amp;bit_val, %%bits%%)) {
        return RTI_FALSE;
    }
    %%sampleAccess%%%%name%% = (%%nativeType%%)bit_val;
    	    </template>
            <template kind="bitfield" bitKind="lastBitField">
    if (!RTICdrStream_deserializeBits(stream, &amp;bit_val, %%bits%%)) {
        return RTI_FALSE;
    }
    %%sampleAccess%%%%name%% = (%%nativeType%%)bit_val;
    if (!RTICdrStream_resetBitsBuffer(stream)){
        return RTI_FALSE;
    }
            </template>
        </method>

    <!-- ======================= get_max_size_serialized ================== -->

        <method kind="get_max_size_serialized">
            <template kind="scalar">
    %%maxSerializeLeading%% %%elementSizeMethod%%(
        %%currentAlignment%%)%%maxSerializeTrailing%%;
            </template>
            <template kind="string">
    %%maxSerializeLeading%% RTICdrType_getStringMaxSizeSerialized(
        %%currentAlignment%%, %%stringMaxLength%% + 1)%%maxSerializeTrailing%%;
            </template>
            <template kind="wstring">
    %%maxSerializeLeading%% RTICdrType_getWstringMaxSizeSerialized(
        %%currentAlignment%%, %%stringMaxLength%% + 1)%%maxSerializeTrailing%%;
            </template>
            <template kind="array" typeKind="builtin">
    %%maxSerializeLeading%% %%arraySizeMethod%%(
        %%currentAlignment%%, %%multiDimensionalArraySize%%, %%typeEnum%%)%%maxSerializeTrailing%%;
            </template>
            <template kind="array" typeKind="user" type="string">
    %%maxSerializeLeading%% RTICdrType_getStringArrayMaxSizeSerialized(
        %%currentAlignment%%,%%multiDimensionalArraySize%%,%%stringMaxLength%% + 1,RTI_CDR_CHAR_TYPE)%%maxSerializeTrailing%%;
            </template>
            <template kind="array" typeKind="user" type="wstring">
    %%maxSerializeLeading%% RTICdrType_getStringArrayMaxSizeSerialized(
        %%currentAlignment%%,%%multiDimensionalArraySize%%,%%stringMaxLength%% + 1,RTI_CDR_WCHAR_TYPE)%%maxSerializeTrailing%%;
            </template>
            <template kind="array" typeKind="user">
    %%maxSerializeLeading%% %%arraySizeMethod%%(
        %%currentAlignment%%, %%multiDimensionalArraySize%%,
        %%elementSizeMethod%%)%%maxSerializeTrailing%%;
            </template>
            <template kind="sequence" typeKind="builtin">
    %%maxSerializeLeading%% %%sequenceSizeMethod%%(
        %%currentAlignment%%, %%sequenceMaxLength%%, %%typeEnum%%)%%maxSerializeTrailing%%;
            </template>
            <template kind="sequence" typeKind="user" type="string">
    %%maxSerializeLeading%% RTICdrType_getStringSequenceMaxSizeSerialized(
        %%currentAlignment%%,%%sequenceMaxLength%%,%%stringMaxLength%% + 1,RTI_CDR_CHAR_TYPE)%%maxSerializeTrailing%%;
            </template>
            <template kind="sequence" typeKind="user" type="wstring">
    %%maxSerializeLeading%% RTICdrType_getStringSequenceMaxSizeSerialized(
        %%currentAlignment%%,%%sequenceMaxLength%%,%%stringMaxLength%% + 1,RTI_CDR_WCHAR_TYPE)%%maxSerializeTrailing%%;
            </template>
            <template kind="sequence" typeKind="user">
    %%maxSerializeLeading%% %%sequenceSizeMethod%%(
        %%currentAlignment%%, %%sequenceMaxLength%%,
        %%elementSizeMethod%%)%%maxSerializeTrailing%%;
            </template>
            <template kind="arraySequence" typeKind="user" type="string">
    for (i = 0; i &lt; %%multiDimensionalArraySize%%; i++) {
        %%maxSerializeLeading%% RTICdrType_getStringSequenceMaxSizeSerialized(
            %%currentAlignment%%,%%sequenceMaxLength%%,%%stringMaxLength%% + 1,RTI_CDR_CHAR_TYPE)%%maxSerializeTrailing%%;
    }
            </template>
            <template kind="arraySequence" typeKind="user" type="wstring">
    for (i = 0; i &lt; %%multiDimensionalArraySize%%; i++) {
        %%maxSerializeLeading%% RTICdrType_getStringSequenceMaxSizeSerialized(
            %%currentAlignment%%,%%sequenceMaxLength%%,%%stringMaxLength%% + 1,RTI_CDR_WCHAR_TYPE)%%maxSerializeTrailing%%;
    }
            </template>
            <template kind="arraySequence" typeKind="user">
    for (i = 0; i &lt; %%multiDimensionalArraySize%%; i++) {
        %%maxSerializeLeading%% %%sequenceSizeMethod%%(
            %%currentAlignment%%, %%sequenceMaxLength%%,
            %%elementSizeMethod%%)%%maxSerializeTrailing%%;
    }
            </template>
            <template kind="arraySequence" typeKind="builtin">
    for (i = 0; i &lt; %%multiDimensionalArraySize%%; i++) {
        %%maxSerializeLeading%% %%sequenceSizeMethod%%(
            %%currentAlignment%%, %%sequenceMaxLength%%, %%typeEnum%%)%%maxSerializeTrailing%%;
    }
            </template>
            <template kind="bitfield" bitKind="normal">
    %%maxSerializeLeading%% RTICdrType_getBitsMaxSizeSerialized(
        current_alignment, &amp;current_bits, %%bits%%);
            </template>
            <template kind="bitfield" bitKind="lastBitField">
    %%maxSerializeLeading%% RTICdrType_getBitsMaxSizeSerialized(
        current_alignment, &amp;current_bits, %%bits%%);
    %%maxSerializeLeading%% RTICdrType_flushBitsMaxSizeSerialized(
        current_alignment, &amp;current_bits);
            </template>
        </method>

    <!-- ============================== Print ========================= -->

        <method kind="print">
            <template kind="scalar">
    %%elementPrintMethod%%(
        %%sampleAccessPointer%%%%name%%, "%%name%%", indent_level + 1);
            </template>
            <template kind="string">
    if (%%sampleAccessPointer%%%%name%%==NULL) {
        RTICdrType_printString(
            NULL, "%%name%%", indent_level + 1);
    } else {
        RTICdrType_printString(
            %%sampleAccess%%%%name%%, "%%name%%", indent_level + 1);
    }
            </template>
            <template kind="wstring">
    if (%%sampleAccessPointer%%%%name%%==NULL) {
        RTICdrType_printWstring(
            NULL,"%%name%%", indent_level + 1);
    } else {
        RTICdrType_printWstring(
            %%sampleAccess%%%%name%%,"%%name%%", indent_level + 1);
    }
            </template>
            <template kind="array" typeKind="builtin">
    RTICdrType_printArray(
        %%sampleAccess%%%%name%%, %%multiDimensionalArraySize%%, %%elementSize%%,
        (RTICdrTypePrintFunction)%%elementPrintMethod%%,
        "%%name%%", indent_level + 1);
            </template>
            <template kind="array" typeKind="builtin" pointer="yes">
    RTICdrType_printPointerArray(
        %%sampleAccessPointer%%%%name%%, %%multiDimensionalArraySize%%,
        (RTICdrTypePrintFunction)%%elementPrintMethod%%,
        "%%name%%", indent_level + 1);
            </template>
            <template kind="array" typeKind="user" type="string">
    RTICdrType_printStringArray(
        %%sampleAccess%%%%name%%,
        %%multiDimensionalArraySize%%,
        "%%name%%", indent_level + 1,
        RTI_CDR_CHAR_TYPE);
            </template>
            <template kind="array" typeKind="user" type="string" pointer="yes">
    RTICdrType_printStringPointerArray(
        %%sampleAccessPointer%%%%name%%,
        %%multiDimensionalArraySize%%,
        "%%name%%", indent_level + 1,
        RTI_CDR_CHAR_TYPE);
            </template>
            <template kind="array" typeKind="user" type="wstring">
    RTICdrType_printStringArray(
        %%sampleAccess%%%%name%%,
        %%multiDimensionalArraySize%%,
        "%%name%%", indent_level + 1,
        RTI_CDR_WCHAR_TYPE);
            </template>
            <template kind="array" typeKind="user" type="wstring" pointer="yes">
    RTICdrType_printStringPointerArray(
        %%sampleAccessPointer%%%%name%%,
        %%multiDimensionalArraySize%%,
        "%%name%%", indent_level + 1,
        RTI_CDR_WCHAR_TYPE);
            </template>
            <template kind="array" typeKind="user">
    RTICdrType_printArray(
        %%sampleAccess%%%%name%%, %%multiDimensionalArraySize%%, sizeof(%%nativeType%%),
        (RTICdrTypePrintFunction)%%elementPrintMethod%%,
        "%%name%%", indent_level + 1);
            </template>
            <template kind="array" typeKind="user" pointer="yes">
    RTICdrType_printPointerArray(%%sampleAccessPointer%%%%name%%,
        %%multiDimensionalArraySize%%,
        (RTICdrTypePrintFunction)%%elementPrintMethod%%,
        "%%name%%", indent_level + 1);
            </template>
            <template kind="sequence" typeKind="builtin">
    if (%%sampleAccessPointer%%%%name%% == NULL) {
        RTICdrType_printIndent(indent_level+1);
        RTILog_debug("%%name%%: NULL\n");
    } else {

        if (%%nativeTypeSeq%%_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%) != NULL) {
            RTICdrType_printArray(
                %%nativeTypeSeq%%_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%),
                %%nativeTypeSeq%%_get_length(%%sampleAccessPointer%%%%name%%),
                %%elementSize%%,
                (RTICdrTypePrintFunction)%%elementPrintMethod%%,
                "%%name%%", indent_level + 1);
        } else {
            RTICdrType_printPointerArray(
                %%nativeTypeSeq%%_get_discontiguous_bufferI(%%sampleAccessPointer%%%%name%%),
                %%nativeTypeSeq%%_get_length(%%sampleAccessPointer%%%%name%%),
               (RTICdrTypePrintFunction)%%elementPrintMethod%%,
               "%%name%%", indent_level + 1);
        }

    }
            </template>
            <template kind="sequence" typeKind="user" type="string">
    if (%%sampleAccessPointer%%%%name%% == NULL) {
        RTICdrType_printIndent(indent_level+1);
        RTILog_debug("%%name%%: NULL\n");
    } else {

        if (DDS_StringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%) != NULL) {
            RTICdrType_printStringArray(
                DDS_StringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%),
                DDS_StringSeq_get_length(%%sampleAccessPointer%%%%name%%),
                "%%name%%", indent_level + 1,
                RTI_CDR_CHAR_TYPE);
        } else {
            RTICdrType_printStringPointerArray(
                DDS_StringSeq_get_discontiguous_bufferI(%%sampleAccessPointer%%%%name%%),
                DDS_StringSeq_get_length(%%sampleAccessPointer%%%%name%%),
                "%%name%%", indent_level + 1,
                RTI_CDR_CHAR_TYPE);
        }

    }
            </template>
            <template kind="sequence" typeKind="user" type="wstring">
    if (%%sampleAccessPointer%%%%name%% == NULL) {
        RTICdrType_printIndent(indent_level+1);
        RTILog_debug("%%name%%: NULL\n");
    } else {

        if (DDS_WstringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%) != NULL) {
            RTICdrType_printStringArray(
                DDS_WstringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%),
                DDS_WstringSeq_get_length(%%sampleAccessPointer%%%%name%%),
                "%%name%%", indent_level + 1,
                RTI_CDR_WCHAR_TYPE);
        } else {
            RTICdrType_printStringPointerArray(
                DDS_WstringSeq_get_discontiguous_bufferI(%%sampleAccessPointer%%%%name%%),
                DDS_WstringSeq_get_length(%%sampleAccessPointer%%%%name%%),
                "%%name%%", indent_level + 1,
                RTI_CDR_WCHAR_TYPE);
        }

    }
            </template>
            <template kind="sequence" typeKind="user">
    if (%%sampleAccessPointer%%%%name%% == NULL) {
        RTICdrType_printIndent(indent_level+1);
        RTILog_debug("%%name%%: NULL\n");
    } else {

        if (%%nativeTypeSeq%%_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%) != NULL) {
            RTICdrType_printArray(
                %%nativeTypeSeq%%_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%),
    	        %%nativeTypeSeq%%_get_length(%%sampleAccessPointer%%%%name%%),
                sizeof(%%nativeType%%),
                (RTICdrTypePrintFunction)%%elementPrintMethod%%,
                "%%name%%", indent_level + 1);
        } else {
            RTICdrType_printPointerArray(
                %%nativeTypeSeq%%_get_discontiguous_bufferI(%%sampleAccessPointer%%%%name%%),
    	        %%nativeTypeSeq%%_get_length(%%sampleAccessPointer%%%%name%%),
                (RTICdrTypePrintFunction)%%elementPrintMethod%%,
                "%%name%%", indent_level + 1);
        }

    }
            </template>
            <template kind="arraySequence" typeKind="user" type="string">
    RTICdrType_printIndent(indent_level+1);
    RTILog_debug("%%name%%:\n");
    for (i = 0; i &lt; %%multiDimensionalArraySize%%; i++) {
        if (%%sampleAccessPointer%%%%name%%[i] == NULL) {
            RTICdrType_printIndent(indent_level+2);
            RTILog_debug("%s[%d]: NULL\n","%%name%%",i);
        } else {

            if (DDS_StringSeq_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]) != NULL) {
                RTICdrType_printStringArray(
                    DDS_StringSeq_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                    DDS_StringSeq_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                    "", indent_level + 2,
                    RTI_CDR_CHAR_TYPE);
            } else {
                RTICdrType_printStringPointerArray(
                    DDS_StringSeq_get_discontiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                    DDS_StringSeq_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                    "", indent_level + 2,
                    RTI_CDR_CHAR_TYPE);
            }

        }
    }
            </template>
            <template kind="arraySequence" typeKind="user" type="wstring">
    RTICdrType_printIndent(indent_level+1);
    RTILog_debug("%%name%%:\n");
    for (i = 0; i &lt; %%multiDimensionalArraySize%%; i++) {
        if (%%sampleAccessPointer%%%%name%%[i] == NULL) {
            RTICdrType_printIndent(indent_level+2);
            RTILog_debug("%s[%d]: NULL\n","%%name%%",i);
        } else {

            if (DDS_WstringSeq_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]) != NULL) {
                RTICdrType_printStringArray(
                    DDS_WstringSeq_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                    DDS_WstringSeq_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                    "", indent_level + 2,
                    RTI_CDR_WCHAR_TYPE);
            } else {
                RTICdrType_printStringPointerArray(
                    DDS_WstringSeq_get_discontiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                    DDS_WstringSeq_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                    "", indent_level + 2,
                    RTI_CDR_WCHAR_TYPE);
            }

        }
    }
            </template>
            <template kind="arraySequence" typeKind="user">
    RTICdrType_printIndent(indent_level+1);
    RTILog_debug("%%name%%:\n");
    for (i = 0; i &lt; %%multiDimensionalArraySize%%; i++) {
        if (%%sampleAccessPointer%%%%name%%[i] == NULL) {
            RTICdrType_printIndent(indent_level+2);
            RTILog_debug("%s[%d]: NULL\n","%%name%%",i);
        } else {

            if (%%nativeTypeSeq%%_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]) != NULL) {
                RTICdrType_printArray(
                    %%nativeTypeSeq%%_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                    %%nativeTypeSeq%%_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                    sizeof(%%nativeType%%),
                    (RTICdrTypePrintFunction)%%elementPrintMethod%%,
                    "", indent_level + 2);
            } else {
                RTICdrType_printPointerArray(
                    %%nativeTypeSeq%%_get_discontiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                    %%nativeTypeSeq%%_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                    (RTICdrTypePrintFunction)%%elementPrintMethod%%,
                    "", indent_level + 2);
            }

        }
    }
            </template>
            <template kind="arraySequence" typeKind="builtin">
    RTICdrType_printIndent(indent_level+1);
    RTILog_debug("%%name%%:\n");
    for (i = 0; i &lt; %%multiDimensionalArraySize%%; i++) {
        if (%%sampleAccessPointer%%%%name%%[i] == NULL) {
            RTICdrType_printIndent(indent_level+2);
            RTILog_debug("%s[%d]: NULL\n","%%name%%",i);
        } else {

            if (%%nativeTypeSeq%%_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]) != NULL) {
                RTICdrType_printArray(
                    %%nativeTypeSeq%%_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                    %%nativeTypeSeq%%_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                    %%elementSize%%,
                    (RTICdrTypePrintFunction)%%elementPrintMethod%%,
                    "", indent_level + 2);
            } else {
                RTICdrType_printPointerArray(
                    %%nativeTypeSeq%%_get_discontiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                    %%nativeTypeSeq%%_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                    (RTICdrTypePrintFunction)%%elementPrintMethod%%,
                    "", indent_level + 2);
            }

        }
    }
            </template>
            <template kind="bitfield" bitKind="normal">
    bit_val = %%sampleAccess%%%%name%%;
    %%elementPrintBitsMethod%%(&amp;bit_val, "%%name%%", indent_level + 1, %%bits%%);
            </template>
            <template kind="bitfield" bitKind="lastBitField">
    bit_val = %%sampleAccess%%%%name%%;
    %%elementPrintBitsMethod%%(&amp;bit_val, "%%name%%", indent_level + 1, %%bits%%);
            </template>
        </method>

    <!-- ============================== Copy ========================= -->

        <method kind="copy">
            <template kind="scalar">
    if (!%%elementCopyMethod%%(
        %%dstAccessPointer%%%%name%%, %%srcAccessPointer%%%%name%%)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="string">
    if (!RTICdrType_copyString(
        %%dstAccess%%%%name%%, %%srcAccess%%%%name%%, %%stringMaxLength%% + 1)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="wstring">
    if (!RTICdrType_copyWstring(
        %%dstAccess%%%%name%%, %%srcAccess%%%%name%%, %%stringMaxLength%% + 1)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="builtin">
    if (!RTICdrType_copyArray(
        %%dstAccess%%%%name%%, %%srcAccess%%%%name%%, %%multiDimensionalArraySize%%, %%elementSize%%)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="builtin" pointer="yes">
    {
        int i = 0;
        %%nativeType%%** elemOut = (%%nativeType%%**) %%dstAccessPointer%%%%name%%;
        %%nativeType%%** elemIn = (%%nativeType%%**) %%srcAccessPointer%%%%name%%;

        for (i = 0; i &lt; %%multiDimensionalArraySize%%;
             ++i, ++elemOut, ++elemIn) {
            if (!%%elementCopyMethod%%(*elemOut,*elemIn)) {
                return RTI_FALSE;
            }
        }
    }
            </template>
            <template kind="array" typeKind="user" type="string">
    if (!RTICdrType_copyStringArray(
        %%dstAccess%%%%name%%, %%srcAccess%%%%name%%,
        %%multiDimensionalArraySize%%, %%stringMaxLength%% + 1,
        RTI_CDR_CHAR_TYPE)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="user" type="string" pointer="yes">
    {
        int i = 0;
        DDS_Char *** elemOut = (DDS_Char***) %%dstAccessPointer%%%%name%%;
        DDS_Char *** elemIn =  (DDS_Char***) %%srcAccessPointer%%%%name%%;

        for (i = 0; i &lt; %%multiDimensionalArraySize%%;
             ++i, ++elemOut, ++elemIn) {
            if (*elemIn==NULL || *elemOut==NULL) {
                return RTI_FALSE;
            }
            if (!RTICdrType_copyString(**elemOut,**elemIn,
                %%stringMaxLength%% + 1)){
                return RTI_FALSE;
            }
        }
    }
            </template>
            <template kind="array" typeKind="user" type="wstring">
    if (!RTICdrType_copyStringArray(
        %%dstAccess%%%%name%%, %%srcAccess%%%%name%%,
        %%multiDimensionalArraySize%%, %%stringMaxLength%% + 1,
        RTI_CDR_WCHAR_TYPE)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="user" type="wstring" pointer="yes">
    {
        int i = 0;
        DDS_Wchar *** elemOut = (DDS_Wchar***) %%dstAccessPointer%%%%name%%;
        DDS_Wchar *** elemIn =  (DDS_Wchar***) %%srcAccessPointer%%%%name%%;

        for (i = 0; i &lt; %%multiDimensionalArraySize%%;
             ++i, ++elemOut, ++elemIn) {
            if (*elemIn==NULL || *elemOut==NULL) {
                return RTI_FALSE;
            }
            if (!RTICdrType_copyWstring(**elemOut,**elemIn,
                %%stringMaxLength%% + 1)){
                return RTI_FALSE;
            }
        }
    }
            </template>
            <template kind="array" typeKind="user">
    <!-- The seemingly useless type casts in the declarations of the pointer
         fields below are necessary in the case where the field is a multi-
         dimensional array. They let us treat it as if it were a single-
         dimensional array, which simplifies the code quite a bit. -->
    {
        int i = 0;
        %%nativeType%%* elemOut = (%%nativeType%%*) &amp;%%dstAccess%%%%name%%[0];
        const %%nativeType%%* elemIn = (const %%nativeType%%*) &amp;%%srcAccess%%%%name%%[0];

        for (i = 0; i &lt; %%multiDimensionalArraySize%%;
             ++i, ++elemOut, ++elemIn) {
            if (!%%elementCopyMethod%%(elemOut,(const %%nativeType%%*)elemIn)) {
                return RTI_FALSE;
            }
        }
    }
            </template>
            <template kind="array" typeKind="user" pointer="yes">
    {
        int i = 0;
        %%nativeType%%** elemOut = (%%nativeType%%**) %%dstAccessPointer%%%%name%%;
        %%nativeType%%** elemIn = (%%nativeType%%**) %%srcAccessPointer%%%%name%%;

        for (i = 0; i &lt; %%multiDimensionalArraySize%%;
             ++i, ++elemOut, ++elemIn) {
            if (*elemIn==NULL || *elemOut==NULL) {
                return RTI_FALSE;
            }
            if (!%%elementCopyMethod%%(*elemOut,*elemIn)) {
                return RTI_FALSE;
            }
        }
    }
            </template>
            <template kind="sequence" typeKind="builtin">
    if (!%%nativeTypeSeq%%_copy_no_alloc(%%dstAccessPointer%%%%name%%,
                                          %%srcAccessPointer%%%%name%%)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="sequence" typeKind="user" type="string">
    if (!DDS_StringSeq_copy_no_alloc(%%dstAccessPointer%%%%name%%,
                                      %%srcAccessPointer%%%%name%%)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="sequence" typeKind="user" type="wstring">
    if (!DDS_WstringSeq_copy_no_alloc(%%dstAccessPointer%%%%name%%,
                                       %%srcAccessPointer%%%%name%%)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="sequence" typeKind="user">
    if (!%%nativeTypeSeq%%_copy_no_alloc(%%dstAccessPointer%%%%name%%,
                                          %%srcAccessPointer%%%%name%%)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="arraySequence" typeKind="user" type="string">
    for (i = 0; i &lt; %%multiDimensionalArraySize%%; i++) {
        if (!DDS_StringSeq_copy_no_alloc(&amp;%%dstAccess%%%%name%%[i],
                                          &amp;%%srcAccess%%%%name%%[i])) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="arraySequence" typeKind="user" type="wstring">
    for (i = 0; i &lt; %%multiDimensionalArraySize%%; i++) {
        if (!DDS_WstringSeq_copy_no_alloc(&amp;%%dstAccess%%%%name%%[i],
                                           &amp;%%srcAccess%%%%name%%[i])) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="arraySequence" typeKind="user">
    for (i = 0; i &lt; %%multiDimensionalArraySize%%; i++) {
        if (!%%nativeTypeSeq%%_copy_no_alloc(&amp;%%dstAccess%%%%name%%[i],
                                              &amp;%%srcAccess%%%%name%%[i])) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="arraySequence" typeKind="builtin">
    for (i = 0; i &lt; %%multiDimensionalArraySize%%; i++) {
        if (!%%nativeTypeSeq%%_copy_no_alloc(&amp;%%dstAccess%%%%name%%[i],
                                              &amp;%%srcAccess%%%%name%%[i])) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="bitfield" bitKind="normal">
    %%dstAccess%%%%name%% = %%srcAccess%%%%name%%;
            </template>
            <template kind="bitfield" bitKind="lastBitField">
    %%dstAccess%%%%name%% = %%srcAccess%%%%name%%;
            </template>
        </method>

    <!-- ============================== initialize======================== -->

        <method kind="initialize">
            <template kind="scalar" typeKind="builtin">
    if (!%%elementInitMethod%%(%%sampleAccessPointer%%%%name%%)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="scalar" typeKind="builtin" pointer="yes">
    if (allocatePointers) {
        RTIOsapiHeap_allocateStructure(&amp;(%%sampleAccessPointer%%%%name%%),%%nativeType%%);
        if (%%sampleAccessPointer%%%%name%%==NULL) {
            return RTI_FALSE;
        }
        if (!%%elementInitMethod%%(%%sampleAccessPointer%%%%name%%)) {
            return RTI_FALSE;
        }
    } else {
        %%sampleAccessPointer%%%%name%% = NULL;
    }
            </template>
            <template kind="scalar">
    if (!%%elementInitMethod%%(%%sampleAccessPointer%%%%name%%,allocatePointers)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="scalar" pointer="yes">
    if (allocatePointers) {
        RTIOsapiHeap_allocateStructure(&amp;(%%sampleAccessPointer%%%%name%%),%%nativeType%%);
        if (%%sampleAccessPointer%%%%name%%==NULL) {
            return RTI_FALSE;
        }
        if (!%%elementInitMethod%%(%%sampleAccessPointer%%%%name%%,allocatePointers)) {
            return RTI_FALSE;
        }
    } else {
        %%sampleAccessPointer%%%%name%% = NULL;
    }
            </template>
            <template kind="string">
    %%sampleAccess%%%%name%% = DDS_String_alloc(%%stringMaxLength%%);
    if (%%sampleAccess%%%%name%% == NULL) {
        return RTI_FALSE;
    }
            </template>
            <template kind="string" pointer="yes">
    if (allocatePointers) {
        RTIOsapiHeap_allocateStructure(&amp;(%%sampleAccessPointer%%%%name%%),char*);
        if (%%sampleAccessPointer%%%%name%%==NULL) {
            return RTI_FALSE;
        }
        %%sampleAccess%%%%name%% = DDS_String_alloc(%%stringMaxLength%%);
        if (%%sampleAccess%%%%name%% == NULL) {
            return RTI_FALSE;
        }
    } else {
        %%sampleAccessPointer%%%%name%% = NULL;
    }
            </template>
            <template kind="wstring">
    %%sampleAccess%%%%name%% = DDS_Wstring_alloc(%%stringMaxLength%%);
    if (%%sampleAccess%%%%name%% == NULL) {
        return RTI_FALSE;
    }
            </template>
            <template kind="wstring" pointer="yes">
    if (allocatePointers) {
        RTIOsapiHeap_allocateStructure(&amp;(%%sampleAccessPointer%%%%name%%),DDS_Wchar*);
        if (%%sampleAccessPointer%%%%name%%==NULL) {
            return RTI_FALSE;
        }
        %%sampleAccess%%%%name%% = DDS_Wstring_alloc(%%stringMaxLength%%);
        if (%%sampleAccess%%%%name%% == NULL) {
            return RTI_FALSE;
        }
    } else {
        %%sampleAccessPointer%%%%name%% = NULL;
    }
            </template>
            <template kind="array" typeKind="builtin">
    if (!RTICdrType_initArray(
        %%sampleAccess%%%%name%%, %%multiDimensionalArraySize%%, %%elementSize%%)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="builtin" pointer="yes">
    {
        int i;
        %%nativeType%%** elem =
            (%%nativeType%%**) %%sampleAccessPointer%%%%name%%;

        if (allocatePointers) {
            for (i=0;i &lt; %%multiDimensionalArraySize%%;i++,++elem) {
                RTIOsapiHeap_allocateStructure(elem,%%nativeType%%);
                if (*elem == NULL) {
                    return RTI_FALSE;
                }
                memset((void *)*elem,0,sizeof(%%nativeType%%));
            }
        } else {
            for (i=0;i &lt; %%multiDimensionalArraySize%%;i++,++elem) {
                *elem = NULL;
            }
        }
    }
            </template>
            <template kind="array" typeKind="user" type="string">
    if (!RTICdrType_initStringArray(%%sampleAccess%%%%name%%,%%multiDimensionalArraySize%%,%%stringMaxLength%%+1,
        RTI_CDR_CHAR_TYPE)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="user" type="string" pointer="yes">
    {
        int i;
        DDS_Char*** elem =
            (DDS_Char***) %%sampleAccessPointer%%%%name%%;

        if (allocatePointers) {
            for (i=0;i &lt; %%multiDimensionalArraySize%%;i++,++elem) {
                RTIOsapiHeap_allocateStructure(elem,DDS_Char*);
                if (*elem == NULL) {
                    return RTI_FALSE;
                }
                **elem = DDS_String_alloc(%%stringMaxLength%%);
                if (**elem == NULL) {
                    return RTI_FALSE;
                }
            }
        } else {
            for (i=0;i &lt; %%multiDimensionalArraySize%%;i++,++elem) {
                *elem = NULL;
            }
        }
    }
            </template>
            <template kind="array" typeKind="user" type="wstring">
    if (!RTICdrType_initStringArray(%%sampleAccess%%%%name%%,%%multiDimensionalArraySize%%,%%stringMaxLength%%+1,
        RTI_CDR_WCHAR_TYPE)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="user" type="wstring" pointer="yes">
    {
        int i;
        DDS_Wchar*** elem =
            (DDS_Wchar***) %%sampleAccessPointer%%%%name%%;

        if (allocatePointers) {
            for (i=0;i &lt; %%multiDimensionalArraySize%%;i++,++elem) {
                RTIOsapiHeap_allocateStructure(elem,DDS_Wchar*);
                if (*elem == NULL) {
                    return RTI_FALSE;
                }
                **elem = DDS_Wstring_alloc(%%stringMaxLength%%);
                if (**elem == NULL) {
                    return RTI_FALSE;
                }
            }
        } else {
            for (i=0;i &lt; %%multiDimensionalArraySize%%;i++,++elem) {
                *elem = NULL;
            }
        }
    }
            </template>
            <template kind="array" typeKind="user">
    <!-- The seemingly useless type cast in the declarations of the pointer
         fields below is necessary in the case where the field is a multi-
         dimensional array. It lets us treat it as if it were a single-
         dimensional array, which simplifies the code quite a bit. -->
    {
        int i = 0;
        %%nativeType%%* elem =
            (%%nativeType%%*) &amp;%%sampleAccess%%%%name%%[0];

        for (i = 0; i &lt; %%multiDimensionalArraySize%%; ++i, ++elem) {
            if (!%%elementInitMethod%%(elem,allocatePointers)) {
                return RTI_FALSE;
            }
        }
    }
            </template>
            <template kind="array" typeKind="user" pointer="yes">
    {
        int i = 0;
        %%nativeType%%** elem =
            (%%nativeType%%**) %%sampleAccessPointer%%%%name%%;

        if (allocatePointers) {
            for (i = 0; i &lt; %%multiDimensionalArraySize%%; ++i, ++elem) {
                RTIOsapiHeap_allocateStructure(elem,%%nativeType%%);
                if (*elem == NULL) {
                    return RTI_FALSE;
                }
                if (!%%elementInitMethod%%(*elem,allocatePointers)) {
                    return RTI_FALSE;
                }
            }
        } else {
            for (i=0;i &lt; %%multiDimensionalArraySize%%;i++,++elem) {
                *elem = NULL;
            }
        }
    }
            </template>
            <template kind="sequence" typeKind="builtin">
    %%nativeTypeSeq%%_initialize(%%sampleAccessPointer%%%%name%%);

    if (!%%nativeTypeSeq%%_set_maximum(%%sampleAccessPointer%%%%name%%,
            %%sequenceMaxLength%%)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="sequence" typeKind="builtin" pointer="yes">
    if (allocatePointers) {
        RTIOsapiHeap_allocateStructure(&amp;(%%sampleAccessPointer%%%%name%%),struct %%nativeTypeSeq%%);
        if (%%sampleAccessPointer%%%%name%%==NULL) {
            return RTI_FALSE;
        }
        %%nativeTypeSeq%%_initialize(%%sampleAccessPointer%%%%name%%);
        if (!%%nativeTypeSeq%%_set_maximum(%%sampleAccessPointer%%%%name%%,
            %%sequenceMaxLength%%)) {
            return RTI_FALSE;
        }
    } else {
        %%sampleAccessPointer%%%%name%% = NULL;
    }
            </template>
            <template kind="sequence" typeKind="user" type="string">
    DDS_StringSeq_initialize(%%sampleAccessPointer%%%%name%%);
    if (!DDS_StringSeq_set_maximum(%%sampleAccessPointer%%%%name%%,
                                   %%sequenceMaxLength%%)) {
        return RTI_FALSE;
    }
    buffer = DDS_StringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%);
    if (buffer == NULL) {
        return RTI_FALSE;
    }
    if (!RTICdrType_initStringArray(buffer, %%sequenceMaxLength%%,%%stringMaxLength%%+1,
        RTI_CDR_CHAR_TYPE)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="sequence" typeKind="user" type="string" pointer="yes">
    if (allocatePointers) {
        RTIOsapiHeap_allocateStructure(&amp;(%%sampleAccessPointer%%%%name%%),struct DDS_StringSeq);
        if (%%sampleAccessPointer%%%%name%%==NULL) {
            return RTI_FALSE;
        }
	    DDS_StringSeq_initialize(%%sampleAccessPointer%%%%name%%);
        if (!DDS_StringSeq_set_maximum(%%sampleAccessPointer%%%%name%%,
                                       %%sequenceMaxLength%%)) {
             return RTI_FALSE;
        }
        buffer = DDS_StringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%);
        if (buffer == NULL) {
            return RTI_FALSE;
        }
        if (!RTICdrType_initStringArray(buffer, %%sequenceMaxLength%%,%%stringMaxLength%%+1,
            RTI_CDR_CHAR_TYPE)) {
            return RTI_FALSE;
        }
    } else {
        %%sampleAccessPointer%%%%name%% = NULL;
    }
            </template>
            <template kind="sequence" typeKind="user" type="wstring">
    DDS_WstringSeq_initialize(%%sampleAccessPointer%%%%name%%);
    if (!DDS_WstringSeq_set_maximum(%%sampleAccessPointer%%%%name%%,
                                    %%sequenceMaxLength%%)) {
        return RTI_FALSE;
    }
    buffer = DDS_WstringSeq_get_contiguous_bufferI(
        %%sampleAccessPointer%%%%name%%);
    if (buffer == NULL) {
        return RTI_FALSE;
    }
    if (!RTICdrType_initStringArray(buffer, %%sequenceMaxLength%%,%%stringMaxLength%%+1,
        RTI_CDR_WCHAR_TYPE)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="sequence" typeKind="user" type="wstring" pointer="yes">
    if (allocatePointers) {
        RTIOsapiHeap_allocateStructure(&amp;(%%sampleAccessPointer%%%%name%%),struct DDS_WstringSeq);
        if (%%sampleAccessPointer%%%%name%%==NULL) {
            return RTI_FALSE;
        }
	DDS_WstringSeq_initialize(%%sampleAccessPointer%%%%name%%);
        if (!DDS_WstringSeq_set_maximum(%%sampleAccessPointer%%%%name%%,
                                        %%sequenceMaxLength%%)) {
            return RTI_FALSE;
        }
        buffer = DDS_WstringSeq_get_contiguous_bufferI(
            %%sampleAccessPointer%%%%name%%);
        if (buffer == NULL) {
            return RTI_FALSE;
        }
        if (!RTICdrType_initStringArray(buffer, %%sequenceMaxLength%%,%%stringMaxLength%%+1,
            RTI_CDR_WCHAR_TYPE)) {
            return RTI_FALSE;
        }
    } else {
        %%sampleAccessPointer%%%%name%% = NULL;
    }
            </template>
            <template kind="sequence" typeKind="user">
    %%nativeTypeSeq%%_initialize(%%sampleAccessPointer%%%%name%%);
    %%nativeTypeSeq%%_set_element_pointers_allocation(%%sampleAccessPointer%%%%name%%,allocatePointers);
    if (!%%nativeTypeSeq%%_set_maximum(%%sampleAccessPointer%%%%name%%,
                                       %%sequenceMaxLength%%)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="sequence" typeKind="user" pointer="yes">
    if (allocatePointers) {
        RTIOsapiHeap_allocateStructure(&amp;(%%sampleAccessPointer%%%%name%%),struct %%nativeTypeSeq%%);
        if (%%sampleAccessPointer%%%%name%%==NULL) {
            return RTI_FALSE;
        }
	%%nativeTypeSeq%%_initialize(%%sampleAccessPointer%%%%name%%);
        %%nativeTypeSeq%%_set_element_pointers_allocation(%%sampleAccessPointer%%%%name%%,allocatePointers);
        if (!%%nativeTypeSeq%%_set_maximum(%%sampleAccessPointer%%%%name%%,
                                           %%sequenceMaxLength%%)) {
            return RTI_FALSE;
        }
    } else {
        %%sampleAccessPointer%%%%name%% = NULL;
    }
            </template>
            <template kind="arraySequence" typeKind="user" type="string">
    for (i = 0; i &lt; %%multiDimensionalArraySize%%; i++) {
        DDS_StringSeq_initialize(&amp;%%sampleAccess%%%%name%%[i]);
        if (!DDS_StringSeq_set_maximum(&amp;%%sampleAccess%%%%name%%[i],
                                       %%sequenceMaxLength%%)) {
            return RTI_FALSE;
        }
        buffer = DDS_StringSeq_get_contiguous_bufferI(
            &amp;%%sampleAccess%%%%name%%[i]);
        if (buffer == NULL) {
            return RTI_FALSE;
        }
        if (!RTICdrType_initStringArray(buffer, %%sequenceMaxLength%%,%%stringMaxLength%%+1,
            RTI_CDR_CHAR_TYPE)) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="arraySequence" typeKind="user" type="string" pointer="yes">
    {
        %%cStruct%% DDS_StringSeq** elem =
            (%%cStruct%% DDS_StringSeq**) %%sampleAccessPointer%%%%name%%;

        if (allocatePointers) {
            for (i=0;i &lt; %%multiDimensionalArraySize%%;i++,++elem) {
                RTIOsapiHeap_allocateStructure(elem,%%cStruct%% DDS_StringSeq);
                if (*elem == NULL) {
                    return RTI_FALSE;
                }
                DDS_StringSeq_initialize(*elem);
                if (!DDS_StringSeq_set_maximum(*elem,
                                               %%sequenceMaxLength%%)) {
                    return RTI_FALSE;
                }
                buffer = DDS_StringSeq_get_contiguous_bufferI(*elem);
                if (buffer == NULL) {
                    return RTI_FALSE;
                }
                if (!RTICdrType_initStringArray(buffer,%%sequenceMaxLength%%,%%stringMaxLength%%+1,
                                                RTI_CDR_CHAR_TYPE)) {
                    return RTI_FALSE;
                }
            }
        } else {
            for (i=0;i &lt; %%multiDimensionalArraySize%%;i++,++elem) {
                *elem=NULL;
            }
        }
    }
            </template>
            <template kind="arraySequence" typeKind="user" type="wstring">
    for (i = 0; i &lt; %%multiDimensionalArraySize%%; i++) {
        DDS_WstringSeq_initialize(&amp;%%sampleAccess%%%%name%%[i]);
        if (!DDS_WstringSeq_set_maximum(&amp;%%sampleAccess%%%%name%%[i],
                                        %%sequenceMaxLength%%)) {
            return RTI_FALSE;
        }
        buffer = DDS_WstringSeq_get_contiguous_bufferI(
            &amp;%%sampleAccess%%%%name%%[i]);
        if (buffer == NULL) {
            return RTI_FALSE;
        }
        if (!RTICdrType_initStringArray(buffer, %%sequenceMaxLength%%,%%stringMaxLength%%+1,
            RTI_CDR_WCHAR_TYPE)) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="arraySequence" typeKind="user" type="wstring" pointer="yes">
    {
        %%cStruct%% DDS_WstringSeq** elem =
            (%%cStruct%% DDS_WstringSeq**) %%sampleAccessPointer%%%%name%%;

        if (allocatePointers) {
            for (i=0;i &lt; %%multiDimensionalArraySize%%;i++,++elem) {
                RTIOsapiHeap_allocateStructure(elem,%%cStruct%% DDS_WstringSeq);
                if (*elem == NULL) {
                    return RTI_FALSE;
                }
        	DDS_WstringSeq_initialize(*elem);
                if (!DDS_WstringSeq_set_maximum(*elem,
                                               %%sequenceMaxLength%%)) {
                    return RTI_FALSE;
                }
                buffer = DDS_WstringSeq_get_contiguous_bufferI(*elem);
                if (buffer == NULL) {
                    return RTI_FALSE;
                }
                if (!RTICdrType_initStringArray(buffer,%%sequenceMaxLength%%,%%stringMaxLength%%+1,
                                                RTI_CDR_WCHAR_TYPE)) {
                    return RTI_FALSE;
                }
            }
        } else {
            for (i=0;i &lt; %%multiDimensionalArraySize%%;i++,++elem) {
                *elem=NULL;
            }
        }
    }
            </template>
            <template kind="arraySequence" typeKind="user">
    for (i = 0; i &lt; %%multiDimensionalArraySize%%; i++) {
        %%nativeTypeSeq%%_initialize(&amp;%%sampleAccess%%%%name%%[i]);
        %%nativeTypeSeq%%_set_element_pointers_allocation(&amp;%%sampleAccess%%%%name%%[i],allocatePointers);
        if (!%%nativeTypeSeq%%_set_maximum(&amp;%%sampleAccess%%%%name%%[i],
                                           %%sequenceMaxLength%%)) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="arraySequence" typeKind="user" pointer="yes">
    {
        %%cStruct%% %%nativeTypeSeq%%** elem =
            (%%cStruct%% %%nativeTypeSeq%%**) %%sampleAccessPointer%%%%name%%;

        if (allocatePointers) {
            for (i=0;i &lt; %%multiDimensionalArraySize%%;i++,++elem) {
                RTIOsapiHeap_allocateStructure(elem,%%cStruct%% %%nativeTypeSeq%%);
                if (*elem == NULL) {
                    return RTI_FALSE;
                }
		%%nativeTypeSeq%%_initialize(*elem);
                %%nativeTypeSeq%%_set_element_pointers_allocation(*elem,allocatePointers);
                if (!%%nativeTypeSeq%%_set_maximum(*elem,
                                                   %%sequenceMaxLength%%)) {
                    return RTI_FALSE;
                }
            }
       } else {
           for (i=0;i &lt; %%multiDimensionalArraySize%%;i++,++elem) {
               *elem=NULL;
           }
       }
    }
            </template>
            <template kind="arraySequence" typeKind="builtin">
    for (i = 0; i &lt; %%multiDimensionalArraySize%%; i++) {
        %%nativeTypeSeq%%_initialize(&amp;%%sampleAccess%%%%name%%[i]);
        if (!%%nativeTypeSeq%%_set_maximum(&amp;%%sampleAccess%%%%name%%[i],
                                           %%sequenceMaxLength%%)) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="arraySequence" typeKind="builtin" pointer="yes">
    {
        %%cStruct%% %%nativeTypeSeq%%** elem =
            (%%cStruct%% %%nativeTypeSeq%%**) %%sampleAccessPointer%%%%name%%;

        if (allocatePointers) {
            for (i=0;i &lt; %%multiDimensionalArraySize%%;i++,++elem) {
                RTIOsapiHeap_allocateStructure(elem,%%cStruct%% %%nativeTypeSeq%%);
                if (*elem == NULL) {
                    return RTI_FALSE;
                }
                %%nativeTypeSeq%%_initialize(*elem);
                if (!%%nativeTypeSeq%%_set_maximum(*elem,
                                                   %%sequenceMaxLength%%)) {
                    return RTI_FALSE;
                }
            }
       } else {
           for (i=0;i &lt; %%multiDimensionalArraySize%%;i++,++elem) {
               *elem=NULL;
           }
       }
    }
            </template>
            <template kind="bitfield" bitKind="normal">
    %%sampleAccess%%%%name%% = 0;
            </template>
            <template kind="bitfield" bitKind="lastBitField">
    %%sampleAccess%%%%name%% = 0;
            </template>
        </method>

    <!-- ============================== finalize ========================= -->

        <method kind="finalize">
            <template kind="scalar" typeKind="builtin"></template>
            <template kind="scalar" typeKind="builtin" pointer="yes">
    if (deletePointers) {
        RTIOsapiHeap_freeStructure(%%sampleAccessPointer%%%%name%%);
        %%sampleAccessPointer%%%%name%%=NULL;
    }
            </template>
            <template kind="scalar" typeKind="user">
    %%elementFinalizeMethod%%(%%sampleAccessPointer%%%%name%%,deletePointers);
            </template>
            <template kind="scalar" typeKind="user" pointer="yes">
    if (deletePointers) {
        %%elementFinalizeMethod%%(%%sampleAccessPointer%%%%name%%,deletePointers);
        RTIOsapiHeap_freeStructure(%%sampleAccessPointer%%%%name%%);
        %%sampleAccessPointer%%%%name%%=NULL;
    }
            </template>
            <template kind="string">
    DDS_String_free(%%sampleAccess%%%%name%%);
            </template>
            <template kind="string" pointer="yes">
    if (deletePointers) {
        DDS_String_free(%%sampleAccess%%%%name%%);
        RTIOsapiHeap_freeStructure(%%sampleAccessPointer%%%%name%%);
        %%sampleAccessPointer%%%%name%%=NULL;
    }
            </template>
            <template kind="wstring">
    DDS_Wstring_free(%%sampleAccess%%%%name%%);
            </template>
            <template kind="wstring" pointer="yes">
    if (deletePointers) {
        DDS_Wstring_free(%%sampleAccess%%%%name%%);
        RTIOsapiHeap_freeStructure(%%sampleAccessPointer%%%%name%%);
        %%sampleAccessPointer%%%%name%%=NULL;
    }
            </template>
            <template kind="array" typeKind="builtin"></template>
            <template kind="array" typeKind="builtin" pointer="yes">
    {
        int i;
        %%nativeType%%** elem =
            (%%nativeType%%**) %%sampleAccessPointer%%%%name%%;

        if (deletePointers) {
            for (i=0;i &lt; %%multiDimensionalArraySize%%;i++,++elem) {
                RTIOsapiHeap_freeStructure(*elem);
                *elem=NULL;
            }
        }
    }
            </template>
            <template kind="array" typeKind="user" type="string">
    RTICdrType_finalizeStringArray(%%sampleAccess%%%%name%%,%%multiDimensionalArraySize%%,RTI_CDR_CHAR_TYPE);
            </template>
            <template kind="array" typeKind="user" type="string" pointer="yes">
    {
        int i;
        DDS_Char*** elem =
            (DDS_Char***) %%sampleAccessPointer%%%%name%%;

        if (deletePointers) {
            for (i=0;i &lt; %%multiDimensionalArraySize%%;i++,++elem) {
                DDS_String_free(**elem);
                RTIOsapiHeap_freeStructure(*elem);
                *elem=NULL;
            }
        }
    }
            </template>
            <template kind="array" typeKind="user" type="wstring">
    RTICdrType_finalizeStringArray(%%sampleAccess%%%%name%%,%%multiDimensionalArraySize%%,RTI_CDR_WCHAR_TYPE);
            </template>
            <template kind="array" typeKind="user" type="wstring" pointer="yes">
    {
        int i;
        DDS_Wchar*** elem =
            (DDS_Wchar***) %%sampleAccessPointer%%%%name%%;

        if (deletePointers) {
            for (i=0;i &lt; %%multiDimensionalArraySize%%;i++,++elem) {
                DDS_Wstring_free(**elem);
                RTIOsapiHeap_freeStructure(*elem);
                *elem=NULL;
            }
        }
    }
            </template>
            <template kind="array" typeKind="user">
    <!-- The seemingly useless type cast in the declarations of the pointer
         fields below is necessary in the case where the field is a multi-
         dimensional array. It lets us treat it as if it were a single-
         dimensional array, which simplifies the code quite a bit. -->
    {
        int i = 0;
        %%nativeType%%* elem =
            (%%nativeType%%*) &amp;%%sampleAccess%%%%name%%[0];

        for (i = 0; i &lt; %%multiDimensionalArraySize%%; ++i, ++elem) {
            %%elementFinalizeMethod%%(elem,deletePointers);
        }
    }
            </template>
            <template kind="array" typeKind="user" pointer="yes">
    {
        int i = 0;
        %%nativeType%%** elem =
            (%%nativeType%%**) %%sampleAccessPointer%%%%name%%;

        if (deletePointers) {
            for (i = 0; i &lt; %%multiDimensionalArraySize%%; ++i, ++elem) {
                %%elementFinalizeMethod%%(*elem,deletePointers);
                RTIOsapiHeap_freeStructure(*elem);
                *elem=NULL;
            }
        }
    }
            </template>
            <template kind="sequence" typeKind="builtin">
    %%nativeTypeSeq%%_finalize(%%sampleAccessPointer%%%%name%%);
            </template>
            <template kind="sequence" typeKind="builtin" pointer="yes">
    if (deletePointers) {
        %%nativeTypeSeq%%_finalize(%%sampleAccessPointer%%%%name%%);
        RTIOsapiHeap_freeStructure(%%sampleAccessPointer%%%%name%%);
        %%sampleAccessPointer%%%%name%%=NULL;
    }
            </template>
            <template kind="sequence" typeKind="user" type="string">
    DDS_StringSeq_finalize(%%sampleAccessPointer%%%%name%%);
            </template>
            <template kind="sequence" typeKind="user" type="string" pointer="yes">
    if (deletePointers) {
        DDS_StringSeq_finalize(%%sampleAccessPointer%%%%name%%);
        RTIOsapiHeap_freeStructure(%%sampleAccessPointer%%%%name%%);
        %%sampleAccessPointer%%%%name%%=NULL;
    }
            </template>
            <template kind="sequence" typeKind="user" type="wstring">
    DDS_WstringSeq_finalize(%%sampleAccessPointer%%%%name%%);
            </template>
            <template kind="sequence" typeKind="user" type="wstring" pointer="yes">
    if (deletePointers) {
        DDS_WstringSeq_finalize(%%sampleAccessPointer%%%%name%%);
        RTIOsapiHeap_freeStructure(%%sampleAccessPointer%%%%name%%);
        %%sampleAccessPointer%%%%name%%=NULL;
    }
            </template>
            <template kind="sequence" typeKind="user">
    %%nativeTypeSeq%%_finalize(%%sampleAccessPointer%%%%name%%);
            </template>
            <template kind="sequence" typeKind="user" pointer="yes">
    if (deletePointers) {
        %%nativeTypeSeq%%_finalize(%%sampleAccessPointer%%%%name%%);
        RTIOsapiHeap_freeStructure(%%sampleAccessPointer%%%%name%%);
        %%sampleAccessPointer%%%%name%%=NULL;
    }
            </template>
            <template kind="arraySequence" typeKind="user" type="string">
    for (i = 0; i &lt; %%multiDimensionalArraySize%%; i++) {
        DDS_StringSeq_finalize(&amp;%%sampleAccess%%%%name%%[i]);
    }
            </template>
            <template kind="arraySequence" typeKind="user" type="string" pointer="yes">
    {
        %%cStruct%% DDS_StringSeq** elem =
            (%%cStruct%% DDS_StringSeq**) %%sampleAccessPointer%%%%name%%;

        if (deletePointers) {
            for (i = 0; i &lt; %%multiDimensionalArraySize%%; ++i, ++elem) {
                DDS_StringSeq_finalize(*elem);
                RTIOsapiHeap_freeStructure(*elem);
                *elem=NULL;
            }
        }
    }
            </template>
            <template kind="arraySequence" typeKind="user" type="wstring">
    for (i = 0; i &lt; %%multiDimensionalArraySize%%;i++) {
        DDS_WstringSeq_finalize(&amp;%%sampleAccess%%%%name%%[i]);
    }
            </template>
            <template kind="arraySequence" typeKind="user" type="wstring" pointer="yes">
    {
        %%cStruct%% DDS_WstringSeq** elem =
            (%%cStruct%% DDS_WstringSeq**) %%sampleAccessPointer%%%%name%%;

        if (deletePointers) {
            for (i = 0; i &lt; %%multiDimensionalArraySize%%; ++i, ++elem) {
                DDS_WstringSeq_finalize(*elem);
                RTIOsapiHeap_freeStructure(*elem);
                *elem=NULL;
            }
        }
    }
            </template>
            <template kind="arraySequence" typeKind="user">
    for (i = 0; i &lt; %%multiDimensionalArraySize%%; i++) {
        %%nativeTypeSeq%%_finalize(&amp;%%sampleAccess%%%%name%%[i]);
    }
            </template>
            <template kind="arraySequence" typeKind="user" pointer="yes">
    {
        %%cStruct%% %%nativeTypeSeq%%** elem =
            (%%cStruct%% %%nativeTypeSeq%%**) %%sampleAccessPointer%%%%name%%;

        if (deletePointers) {
            for (i = 0; i &lt; %%multiDimensionalArraySize%%; ++i, ++elem) {
                %%nativeTypeSeq%%_finalize(*elem);
                RTIOsapiHeap_freeStructure(*elem);
                *elem=NULL;
            }
        }
    }
            </template>
            <template kind="arraySequence" typeKind="builtin">
    for (i = 0; i &lt; %%multiDimensionalArraySize%%; i++) {
        %%nativeTypeSeq%%_finalize(&amp;%%sampleAccess%%%%name%%[i]);
    }
            </template>
            <template kind="arraySequence" typeKind="builtin" pointer="yes">
    {
        %%cStruct%% %%nativeTypeSeq%%** elem =
            (%%cStruct%% %%nativeTypeSeq%%**) %%sampleAccessPointer%%%%name%%;

        if (deletePointers) {
            for (i = 0; i &lt; %%multiDimensionalArraySize%%; ++i, ++elem) {
                %%nativeTypeSeq%%_finalize(*elem);
                RTIOsapiHeap_freeStructure(*elem);
                *elem=NULL;
            }
        }
    }
            </template>
        </method>
    </methodInfoMap>


<sourcePreamble kind="type-header">
<![CDATA[
pragma Warnings (Off); --  Since this is auto generated code.
with Interfaces.C; use Interfaces.C;
with Interfaces.C.Strings;
with DDS;
with DDS.Entity;
with Ada.Finalization;
with System;
pragma Warnings (On);
]]>
</sourcePreamble>

<sourcePreamble kind="type-source">
<![CDATA[
pragma Warnings (Off); --  Since this is auto generated code.
with System;
with Ada.Finalization;
with Interfaces.C; use Interfaces.C;
with Interfaces.C.Strings;
with DDS.Entity;
pragma Warnings (On);
]]>
</sourcePreamble>

<sourcePreamble kind="support-source">
<![CDATA[
pragma Warnings (off); --  Since this is auto generated code.
with System;
with Standard;
with Ada.Finalization;
with Interfaces.C; use Interfaces.C;
with Interfaces.C.Strings;
with DDS;
with DDS.Entity;
with DDS.RootSequence;
with DDS.Sequences_Generic;
with DDS.DataReader;
with DDS.ReadCondition;
with DDS.DataWriter;
with DDS.DomainParticipant;
with DDS.SampleInfo_Seq;
pragma Warnings (on);
]]>
</sourcePreamble>

<sourcePreamble kind="support-header">
<![CDATA[
pragma Warnings (Off); --  Since this is auto generated code.
with System;
with Standard;
with Ada.Finalization;
with Interfaces.C; use Interfaces.C;
with Interfaces.C.Strings;
with DDS;
with DDS.Entity;
with DDS.RootSequence;
with DDS.Sequences_Generic;
with DDS.DataReader;
with DDS.ReadCondition;
with DDS.DataWriter;
with DDS.DomainParticipant;
with DDS.SampleInfo_Seq;
pragma Warnings (On);
]]>
</sourcePreamble>

</generationInfo>
