<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE generationInfo SYSTEM "generationInfo.dtd" [
<!ENTITY namespaceSeperator "_">    <!-- namespace separator -->
]>

<!--

(c) Copyright, Real-Time Innovations, Inc. 2003-2010.  All rights reserved.

Modification history
- - - - - - - - - - - - -
5.0.1,18jul13,fcs Fixed compilation warnings
5.0.1,12jul13,fcs CODEGEN-574 Added finalize_optional_members template
5.0.1,30apr13,acr CODEGEN-574 Added new allocate method and removed templates
                  for optional members. Code for optional member is
                  now composed of existing code for pointer and non-pointer
                  members selected from typeCommon.c.xsl 
5.0.1,24apr13,acr CODEGEN-574 Added templates to initialize, finalize
                  copy, serialize and deserialize optional members. Added
                  new function finalizeOptionalMembers. (So far primitive types and
                  structures.)
5.0.0,02oct12,gn  CODEGEN-512: TSeq_copy() Instead of TSeq_copy_no_alloc()
5.0.0,21jul12,fcs Fixed issues in finalize and get_serialized_size methods to
                  support XTypes
5.0.0,13jul12,fcs Added deserialized size methods (cont'd)
5.0.0,13jul12,fcs Added deserialized size methods
10ad,22jun11,ai   XTYPES - fixed initialization of arrays of strings and wstrings
10ad,01jun11,ai   XTYPES - Completed enhancements to <type>initialize_ex fnc
10ad,02may11,ai  XTYPES - Added preDeserializeBufferLengthAdjs and postDeserializeBufferLengthAdjs
                to user's types deserialization functions
10ad,06apr11,ai   Added deserialization error handling 
10ac,23mar11,yy  Merged from HEAD: Do not return false when string or wstring is NULL
10ac,04aug11,fcs Fixed bug 14047
10ac,04oct10,ai  Do not return false when string or wstring is NULL
10ac,20aug09,fcs Removed CDR_NATIVE usage
1.0ac,10aug09,fcs get_serialized_sample_size support
10v,23jul08,fcs Added sequence_length variables
10v,19jul08,fcs ignoreAlignment and optimizeAlignment support
10v,17mar08,rbw Fixed typo in header inclusion
10s,29feb08,fcs Support for get_min_size_serialized
10s,18feb08,fcs MD5 KeyHash generation support
10p,15feb08,fcs Added skip support
10p,15may07,eh  Support data encapsulation of RTPS 2.0
10h,18jan05,fcs Fixed bug 10521 (pointers does not compile)
10h,15dec05,fcs Fixed tabs        
10h,08dec05,fcs C++ namespace support
10g,02aug05,fcs Standalone type support
10g,09jul05,jml Fixed bug #9338. See bugzilla for details.
10f,27jun05,fcs Added type code variable for primitive types
10e,05jun05,fcs Modified print templates to take into account pointers NULL values
10e,02jun05,fcs Called set_element_pointer_allocation function after create user sequences
                This function will allow to indicate to the sequences if we want deep allocation
                for the pointers of the elements or not.
10e,23may05,fcs Pointer Support (NDDS IDL extension)
10e,19apr05,rw  Bug #10076: make sure ndds_*.h gets included first
10e,14apr05,fcs Fixed BUG 9527 (serializing sequence with maximum length)
10e,29mar05,eys sequence buffer may not be contiguous. See bug 10260.
                Fixed line breaks.
10e,08apr05,fcs Replaced RTICdrWchar with DDS_Wchar in Wstring declarations
10e,29mar05,fcs Refactored print functions for arrays of sequences
10e,29mar05,rw  Bug #10270: removed dependency on PRESTypePlugin in
                initialize, finalize, and copy; made dependency on CDR type
                submodule explicit
10e,28mar05,rw  Bug #10270: unified copy_key_fields with copy;
                simplified copy code
10e,28mar05,rw  Bug #10270: simplified generated initialize and finalize
                methods
10e,25mar05,fcs Fixed bug calling RTICdrType_printStringArray for Wstring in the print section.
                To access the buffer of the Wstring sequence we used the String sequence functions.
10e,17mar05,fcs Used "RTICdrType_printStringArray" function for printing strings arrays or string sequences 
10e,16mar05,fcs Modified Keys copy code
                Included support for sequences arrays
                Included support for string arrays
                The Wstring mapping is changed to RTICdrWchar *
                Added support for sequences and arrays of strings and wide strings
                In C++ the buffer of the primitive sequences was assigned with 'new' and freed with 'free'
                This bug has been fixed
                Replacement of %%sampleAccessPointer%% for &amp;%%sampleAccess%% in wstring operations
10d,07feb05,rw  Define wstring in terms of DDS types, not CDR types
10d,09dec04,rw  Reflected change in sequence copy API
10d,22nov04,eys For C++, initialize sequence by calling constructor of 
                the type.
10d,15nov04,eys Type plugin refactoring
10d,20oct04,eys copyString() and copyWstring() API change
10d,17aug04,rw  Restored rti_ip #include to allow preemptive undo of mig
                byte swapping
10d,04aug04,rw  Removed rti_ip #include: mig already does byte swapping
10d,26jul04,rw  Added copy_key_fields() method template
10d,22jul04,rw  Updated method names to match DDS conventions; refactored
                out DTD to separate file
10d,29jun04,eys Fixed output indentation
10c,26may04,rrl Fixed #8866 by calling assert on each member type
                and replaced tabs by 4 spaces to make output prettier
10c,05may04,eys Added getSharedInstance() and copy() method.
10c,06feb04,sjr Integrated newly refactored dds_c and dds_cpp.
40b,03feb04,rrl Support typedef
40b,14jan04,rrl Support unions
40a,13oct03,eys Changed sequence implementation
40a,13oct03,eys Fixed includes
40a,06oct03,eys Changed native type names to DDS
40a,29sep03,eys Added comments for support files
40a,29sep03,eys Fixed includes
40a,24sep03,eys Added initArrayMethod, elementFinalizeMethod and
                arrayFinalizeMethod  into typeInfoMap
40a,09sep03,eys Added octet type. Fixed sequence type output.
40a,09sep03,eys Added octet type. Fixed wchar type output.
40a,09sep03,eys Fixed output after comparing with presentation typePlugin
	        examples
40a,09sep03,eys Added code to allocate memory for all pointers field
40a,08sep03,rrl Fixed string length to include null terminator
40a,07sep03,rrl Support finalizeInstance() method.
40a,05sep03,rrl Remvoed integer type from primitive types list
40a,04sep03,rrl Fixed problem exhibited by testsuite.
40a,04sep03,rrl Fixed problem with string types and removed incorrect passing
                of pointer (instead of value) for non-primitive types.
40a,27aug03,rrl Added method generation template as well as more type
                information in typeInfoMap.
40a,08aug03,rrl Modified element names to use a more consistent style
-->


<generationInfo style="RTI" language="C">
    <typeInfoMap>
               
        <type idlType="short" nativeType="DDS_Short"
                   typeCode="DDS_g_tc_short"
                   nativeTypeSeq="DDS_ShortSeq"
                   typeEnum="RTI_CDR_SHORT_TYPE"
                   elementSerializeMethod="RTICdrStream_serializeShort"
                   arraySerializeMethod="RTICdrStream_serializePrimitiveArray"
                   sequenceSerializeMethod="RTICdrStream_serializePrimitiveSequence"
                   pointerSequenceSerializeMethod="RTICdrStream_serializePrimitivePointerSequence"
                   elementDeserializeMethod="RTICdrStream_deserializeShort"
                   arrayDeserializeMethod="RTICdrStream_deserializePrimitiveArray"
                   sequenceDeserializeMethod="RTICdrStream_deserializePrimitiveSequence"
                   pointerSequenceDeserializeMethod="RTICdrStream_deserializePrimitivePointerSequence"
                   elementSkipMethod="RTICdrStream_skipShort"
                   arraySkipMethod="RTICdrStream_skipPrimitiveArray"
                   sequenceSkipMethod="RTICdrStream_skipPrimitiveSequence"
                   pointerSequenceSkipMethod="RTICdrStream_skipPrimitivePointerSequence"
                   elementPrintMethod="RTICdrType_printShort"
                   elementInitMethod="RTICdrType_initShort"
                   elementCopyMethod="RTICdrType_copyShort"
                   elementSize="RTI_CDR_SHORT_SIZE"
                   elementAlignment="RTI_CDR_SHORT_ALIGN"
                   elementSizeMethod="RTICdrType_getShortMaxSizeSerialized"
                   arraySizeMethod="RTICdrType_getPrimitiveArrayMaxSizeSerialized"
                   sequenceSizeMethod="RTICdrType_getPrimitiveSequenceMaxSizeSerialized"
                   elementPrintBitsMethod="RTICdrType_printBits"/>   

               
        <type idlType="long" nativeType="DDS_Long" 
                   typeCode="DDS_g_tc_long"
                   nativeTypeSeq="DDS_LongSeq"
                   typeEnum="RTI_CDR_LONG_TYPE"       
                   elementSerializeMethod="RTICdrStream_serializeLong"
                   arraySerializeMethod="RTICdrStream_serializePrimitiveArray"
                   sequenceSerializeMethod="RTICdrStream_serializePrimitiveSequence"
                   pointerSequenceSerializeMethod="RTICdrStream_serializePrimitivePointerSequence"
                   elementDeserializeMethod="RTICdrStream_deserializeLong"
                   arrayDeserializeMethod="RTICdrStream_deserializePrimitiveArray"
                   sequenceDeserializeMethod="RTICdrStream_deserializePrimitiveSequence"
                   pointerSequenceDeserializeMethod="RTICdrStream_deserializePrimitivePointerSequence"
                   elementSkipMethod="RTICdrStream_skipLong"
                   arraySkipMethod="RTICdrStream_skipPrimitiveArray"
                   sequenceSkipMethod="RTICdrStream_skipPrimitiveSequence"
                   pointerSequenceSkipMethod="RTICdrStream_skipPrimitivePointerSequence"
                   elementPrintMethod="RTICdrType_printLong"
                   elementInitMethod="RTICdrType_initLong"
                   elementCopyMethod="RTICdrType_copyLong"
                   elementSize="RTI_CDR_LONG_SIZE"
                   elementAlignment="RTI_CDR_LONG_ALIGN"  
                   elementSizeMethod="RTICdrType_getLongMaxSizeSerialized"
                   arraySizeMethod="RTICdrType_getPrimitiveArrayMaxSizeSerialized"
                   sequenceSizeMethod="RTICdrType_getPrimitiveSequenceMaxSizeSerialized"
                   elementPrintBitsMethod="RTICdrType_printBits"/>   

               
        <type idlType="longlong" nativeType="DDS_LongLong" 
                   typeCode="DDS_g_tc_longlong"
                   nativeTypeSeq="DDS_LongLongSeq"
                   typeEnum="RTI_CDR_LONG_LONG_TYPE"    
                   elementSerializeMethod="RTICdrStream_serializeLongLong"
                   arraySerializeMethod="RTICdrStream_serializePrimitiveArray"
                   sequenceSerializeMethod="RTICdrStream_serializePrimitiveSequence"
                   pointerSequenceSerializeMethod="RTICdrStream_serializePrimitivePointerSequence"
                   elementDeserializeMethod="RTICdrStream_deserializeLongLong"
                   arrayDeserializeMethod="RTICdrStream_deserializePrimitiveArray"        
                   sequenceDeserializeMethod="RTICdrStream_deserializePrimitiveSequence"
                   pointerSequenceDeserializeMethod="RTICdrStream_deserializePrimitivePointerSequence"
                   elementSkipMethod="RTICdrStream_skipLongLong"
                   arraySkipMethod="RTICdrStream_skipPrimitiveArray"
                   sequenceSkipMethod="RTICdrStream_skipPrimitiveSequence"
                   pointerSequenceSkipMethod="RTICdrStream_skipPrimitivePointerSequence"
                   elementPrintMethod="RTICdrType_printLongLong"
                   elementInitMethod="RTICdrType_initLongLong"
                   elementCopyMethod="RTICdrType_copyLongLong"
                   elementSize="RTI_CDR_LONG_LONG_SIZE"
                   elementAlignment="RTI_CDR_LONG_LONG_ALIGN"     
                   elementSizeMethod="RTICdrType_getLongLongMaxSizeSerialized"
                   arraySizeMethod="RTICdrType_getPrimitiveArrayMaxSizeSerialized"
                   sequenceSizeMethod="RTICdrType_getPrimitiveSequenceMaxSizeSerialized"
                   elementPrintBitsMethod="notUsed"/>   



        <type idlType="unsignedshort" nativeType="DDS_UnsignedShort" 
                   typeCode="DDS_g_tc_ushort"
                   nativeTypeSeq="DDS_UnsignedShortSeq"
                   typeEnum="RTI_CDR_UNSIGNED_SHORT_TYPE"         
                   elementSerializeMethod="RTICdrStream_serializeUnsignedShort"
                   arraySerializeMethod="RTICdrStream_serializePrimitiveArray"
                   sequenceSerializeMethod="RTICdrStream_serializePrimitiveSequence"
                   pointerSequenceSerializeMethod="RTICdrStream_serializePrimitivePointerSequence"
                   elementDeserializeMethod="RTICdrStream_deserializeUnsignedShort"
                   arrayDeserializeMethod="RTICdrStream_deserializePrimitiveArray" 
                   sequenceDeserializeMethod="RTICdrStream_deserializePrimitiveSequence"
                   pointerSequenceDeserializeMethod="RTICdrStream_deserializePrimitivePointerSequence"
                   elementSkipMethod="RTICdrStream_skipUnsignedShort"
                   arraySkipMethod="RTICdrStream_skipPrimitiveArray"
                   sequenceSkipMethod="RTICdrStream_skipPrimitiveSequence"
                   pointerSequenceSkipMethod="RTICdrStream_skipPrimitivePointerSequence"
                   elementPrintMethod="RTICdrType_printUnsignedShort"
                   elementInitMethod="RTICdrType_initUnsignedShort"
                   elementCopyMethod="RTICdrType_copyUnsignedShort"
                   elementSize="RTI_CDR_UNSIGNED_SHORT_SIZE"
                   elementAlignment="RTI_CDR_UNSIGNED_SHORT_ALIGN"
                   elementSizeMethod="RTICdrType_getUnsignedShortMaxSizeSerialized"
                   arraySizeMethod="RTICdrType_getPrimitiveArrayMaxSizeSerialized"
                   sequenceSizeMethod="RTICdrType_getPrimitiveSequenceMaxSizeSerialized"
                   elementPrintBitsMethod="RTICdrType_printUnsignedBits"/>   

                                      
        <type idlType="unsignedlong" nativeType="DDS_UnsignedLong" 
                   typeCode="DDS_g_tc_ulong"
                   nativeTypeSeq="DDS_UnsignedLongSeq"
                   typeEnum="RTI_CDR_UNSIGNED_LONG_TYPE"                 
                   elementSerializeMethod="RTICdrStream_serializeUnsignedLong"
                   arraySerializeMethod="RTICdrStream_serializePrimitiveArray"
                   sequenceSerializeMethod="RTICdrStream_serializePrimitiveSequence"
                   pointerSequenceSerializeMethod="RTICdrStream_serializePrimitivePointerSequence"
                   elementDeserializeMethod="RTICdrStream_deserializeUnsignedLong"
                   arrayDeserializeMethod="RTICdrStream_deserializePrimitiveArray"
                   sequenceDeserializeMethod="RTICdrStream_deserializePrimitiveSequence"
                   pointerSequenceDeserializeMethod="RTICdrStream_deserializePrimitivePointerSequence"
                   elementSkipMethod="RTICdrStream_skipUnsignedLong"
                   arraySkipMethod="RTICdrStream_skipPrimitiveArray"
                   sequenceSkipMethod="RTICdrStream_skipPrimitiveSequence"
                   pointerSequenceSkipMethod="RTICdrStream_skipPrimitivePointerSequence"
                   elementPrintMethod="RTICdrType_printUnsignedLong"
                   elementInitMethod="RTICdrType_initUnsignedLong"
                   elementCopyMethod="RTICdrType_copyUnsignedLong"
                   elementSize="RTI_CDR_UNSIGNED_LONG_SIZE"
                   elementAlignment="RTI_CDR_UNSIGNED_LONG_ALIGN"
                   elementSizeMethod="RTICdrType_getUnsignedLongMaxSizeSerialized"
                   arraySizeMethod="RTICdrType_getPrimitiveArrayMaxSizeSerialized"
                   sequenceSizeMethod="RTICdrType_getPrimitiveSequenceMaxSizeSerialized"
                   elementPrintBitsMethod="RTICdrType_printUnsignedBits"/>   

                         
                                      
        <type idlType="unsignedlonglong" nativeType="DDS_UnsignedLongLong" 
                   typeCode="DDS_g_tc_ulonglong"
                   nativeTypeSeq="DDS_UnsignedLongLongSeq"
                   typeEnum="RTI_CDR_UNSIGNED_LONG_LONG_TYPE"                 
                   elementSerializeMethod="RTICdrStream_serializeUnsignedLongLong"
                   arraySerializeMethod="RTICdrStream_serializePrimitiveArray"
                   sequenceSerializeMethod="RTICdrStream_serializePrimitiveSequence"
                   pointerSequenceSerializeMethod="RTICdrStream_serializePrimitivePointerSequence"
                   elementDeserializeMethod="RTICdrStream_deserializeUnsignedLongLong"
                   arrayDeserializeMethod="RTICdrStream_deserializePrimitiveArray"        
                   sequenceDeserializeMethod="RTICdrStream_deserializePrimitiveSequence"
                   pointerSequenceDeserializeMethod="RTICdrStream_deserializePrimitivePointerSequence"
                   elementSkipMethod="RTICdrStream_skipUnsignedLongLong"
                   arraySkipMethod="RTICdrStream_skipPrimitiveArray"
                   sequenceSkipMethod="RTICdrStream_skipPrimitiveSequence"
                   pointerSequenceSkipMethod="RTICdrStream_skipPrimitivePointerSequence"
                   elementPrintMethod="RTICdrType_printUnsignedLongLong"
                   elementInitMethod="RTICdrType_initUnsignedLongLong"
                   elementCopyMethod="RTICdrType_copyUnsignedLongLong"
                   elementSize="RTI_CDR_UNSIGNED_LONG_LONG_SIZE"
                   elementAlignment="RTI_CDR_UNSIGNED_LONG_LONG_ALIGN"
                   elementSizeMethod="RTICdrType_getLongLongMaxSizeSerialized"
                   arraySizeMethod="RTICdrType_getPrimitiveArrayMaxSizeSerialized"
                   sequenceSizeMethod="RTICdrType_getPrimitiveSequenceMaxSizeSerialized"
                   elementPrintBitsMethod="notUsed"/>   



        <type idlType="float" nativeType="DDS_Float" 
                   typeCode="DDS_g_tc_float"
                   nativeTypeSeq="DDS_FloatSeq"
                   typeEnum="RTI_CDR_FLOAT_TYPE"                 
                   elementSerializeMethod="RTICdrStream_serializeFloat"
                   arraySerializeMethod="RTICdrStream_serializePrimitiveArray"
                   sequenceSerializeMethod="RTICdrStream_serializePrimitiveSequence"
                   pointerSequenceSerializeMethod="RTICdrStream_serializePrimitivePointerSequence"
                   elementDeserializeMethod="RTICdrStream_deserializeFloat"
                   arrayDeserializeMethod="RTICdrStream_deserializePrimitiveArray"
                   sequenceDeserializeMethod="RTICdrStream_deserializePrimitiveSequence"
                   pointerSequenceDeserializeMethod="RTICdrStream_deserializePrimitivePointerSequence"
                   elementSkipMethod="RTICdrStream_skipFloat"
                   arraySkipMethod="RTICdrStream_skipPrimitiveArray"
                   sequenceSkipMethod="RTICdrStream_skipPrimitiveSequence"
                   pointerSequenceSkipMethod="RTICdrStream_skipPrimitivePointerSequence"
                   elementPrintMethod="RTICdrType_printFloat"
                   elementInitMethod="RTICdrType_initFloat"
                   elementCopyMethod="RTICdrType_copyFloat"
                   elementSize="RTI_CDR_FLOAT_SIZE"
                   elementAlignment="RTI_CDR_FLOAT_ALIGN"
                   elementSizeMethod="RTICdrType_getFloatMaxSizeSerialized"
                   arraySizeMethod="RTICdrType_getPrimitiveArrayMaxSizeSerialized"
                   sequenceSizeMethod="RTICdrType_getPrimitiveSequenceMaxSizeSerialized"
                   elementPrintBitsMethod="notUsed"/>   

               
        <type idlType="double" nativeType="DDS_Double" 
                   typeCode="DDS_g_tc_double"
                   nativeTypeSeq="DDS_DoubleSeq"
                   typeEnum="RTI_CDR_DOUBLE_TYPE"                 
                   elementSerializeMethod="RTICdrStream_serializeDouble"
                   arraySerializeMethod="RTICdrStream_serializePrimitiveArray"
                   sequenceSerializeMethod="RTICdrStream_serializePrimitiveSequence"
                   pointerSequenceSerializeMethod="RTICdrStream_serializePrimitivePointerSequence"
                   elementDeserializeMethod="RTICdrStream_deserializeDouble"
                   arrayDeserializeMethod="RTICdrStream_deserializePrimitiveArray"
                   sequenceDeserializeMethod="RTICdrStream_deserializePrimitiveSequence"
                   pointerSequenceDeserializeMethod="RTICdrStream_deserializePrimitivePointerSequence"
                   elementSkipMethod="RTICdrStream_skipDouble"
                   arraySkipMethod="RTICdrStream_skipPrimitiveArray"
                   sequenceSkipMethod="RTICdrStream_skipPrimitiveSequence"
                   pointerSequenceSkipMethod="RTICdrStream_skipPrimitivePointerSequence"
                   elementPrintMethod="RTICdrType_printDouble"
                   elementInitMethod="RTICdrType_initDouble"
                   elementCopyMethod="RTICdrType_copyDouble"
                   elementSize="RTI_CDR_DOUBLE_SIZE"
                   elementAlignment="RTI_CDR_DOUBLE_ALIGN"
                   elementSizeMethod="RTICdrType_getDoubleMaxSizeSerialized"
                   arraySizeMethod="RTICdrType_getPrimitiveArrayMaxSizeSerialized"
                   sequenceSizeMethod="RTICdrType_getPrimitiveSequenceMaxSizeSerialized"
                   elementPrintBitsMethod="notUsed"/>   

               
        <type idlType="longdouble" nativeType="DDS_LongDouble" 
                   typeCode="DDS_g_tc_longdouble"
                   nativeTypeSeq="DDS_LongDoubleSeq"
                   typeEnum="RTI_CDR_LONG_DOUBLE_TYPE"                 
                   elementSerializeMethod="RTICdrStream_serializeLongDouble"
                   arraySerializeMethod="RTICdrStream_serializePrimitiveArray"
                   sequenceSerializeMethod="RTICdrStream_serializePrimitiveSequence"
                   pointerSequenceSerializeMethod="RTICdrStream_serializePrimitivePointerSequence"
                   elementDeserializeMethod="RTICdrStream_deserializeLongDouble"
                   arrayDeserializeMethod="RTICdrStream_deserializePrimitiveArray"
                   sequenceDeserializeMethod="RTICdrStream_deserializePrimitiveSequence"
                   pointerSequenceDeserializeMethod="RTICdrStream_deserializePrimitivePointerSequence"
                   elementSkipMethod="RTICdrStream_skipLongDouble"
                   arraySkipMethod="RTICdrStream_skipPrimitiveArray"
                   sequenceSkipMethod="RTICdrStream_skipPrimitiveSequence"
                   pointerSequenceSkipMethod="RTICdrStream_skipPrimitivePointerSequence"
                   elementPrintMethod="RTICdrType_printLongDouble"
                   elementInitMethod="RTICdrType_initLongDouble"
                   elementCopyMethod="RTICdrType_copyLongDouble"
                   elementSize="RTI_CDR_LONG_DOUBLE_SIZE"
                   elementAlignment="RTI_CDR_LONG_DOUBLE_ALIGN"
                   elementSizeMethod="RTICdrType_getLongDoubleMaxSizeSerialized"
                   arraySizeMethod="RTICdrType_getPrimitiveArrayMaxSizeSerialized"
                   sequenceSizeMethod="RTICdrType_getPrimitiveSequenceMaxSizeSerialized"
                   elementPrintBitsMethod="notUsed"/>   


        <type idlType="char" nativeType="DDS_Char" 
                   typeCode="DDS_g_tc_char"
                   nativeTypeSeq="DDS_CharSeq"
                   typeEnum="RTI_CDR_CHAR_TYPE"                 
                   elementSerializeMethod="RTICdrStream_serializeChar"
                   arraySerializeMethod="RTICdrStream_serializePrimitiveArray"
                   sequenceSerializeMethod="RTICdrStream_serializePrimitiveSequence"
                   pointerSequenceSerializeMethod="RTICdrStream_serializePrimitivePointerSequence"
                   elementDeserializeMethod="RTICdrStream_deserializeChar"
                   arrayDeserializeMethod="RTICdrStream_deserializePrimitiveArray"
                   sequenceDeserializeMethod="RTICdrStream_deserializePrimitiveSequence"
                   pointerSequenceDeserializeMethod="RTICdrStream_deserializePrimitivePointerSequence"
                   elementSkipMethod="RTICdrStream_skipChar"
                   arraySkipMethod="RTICdrStream_skipPrimitiveArray"
                   sequenceSkipMethod="RTICdrStream_skipPrimitiveSequence"
                   pointerSequenceSkipMethod="RTICdrStream_skipPrimitivePointerSequence"
                   elementPrintMethod="RTICdrType_printChar"
                   elementInitMethod="RTICdrType_initChar"
                   elementCopyMethod="RTICdrType_copyChar"
                   elementSize="RTI_CDR_CHAR_SIZE"
                   elementAlignment="RTI_CDR_CHAR_ALIGN"
                   elementSizeMethod="RTICdrType_getCharMaxSizeSerialized"
                   arraySizeMethod="RTICdrType_getPrimitiveArrayMaxSizeSerialized"
                   sequenceSizeMethod="RTICdrType_getPrimitiveSequenceMaxSizeSerialized"
                   elementPrintBitsMethod="RTICdrType_printUnsignedBits"/>   

                                      
        <type idlType="wchar" nativeType="DDS_Wchar" 
                   typeCode="DDS_g_tc_wchar"
                   nativeTypeSeq="DDS_WcharSeq"
                   typeEnum="RTI_CDR_WCHAR_TYPE"                 
                   elementSerializeMethod="RTICdrStream_serializeWchar"
                   arraySerializeMethod="RTICdrStream_serializePrimitiveArray"
                   sequenceSerializeMethod="RTICdrStream_serializePrimitiveSequence"
                   pointerSequenceSerializeMethod="RTICdrStream_serializePrimitivePointerSequence"
                   elementDeserializeMethod="RTICdrStream_deserializeWchar"
                   arrayDeserializeMethod="RTICdrStream_deserializePrimitiveArray"
                   sequenceDeserializeMethod="RTICdrStream_deserializePrimitiveSequence"
                   pointerSequenceDeserializeMethod="RTICdrStream_deserializePrimitivePointerSequence"
                   elementSkipMethod="RTICdrStream_skipWchar"
                   arraySkipMethod="RTICdrStream_skipPrimitiveArray"
                   sequenceSkipMethod="RTICdrStream_skipPrimitiveSequence"
                   pointerSequenceSkipMethod="RTICdrStream_skipPrimitivePointerSequence"
                   elementPrintMethod="RTICdrType_printWchar"
                   elementInitMethod="RTICdrType_initWchar"
                   elementCopyMethod="RTICdrType_copyWchar"
                   elementSize="RTI_CDR_WCHAR_SIZE"
                   elementAlignment="RTI_CDR_WCHAR_ALIGN"
                   elementSizeMethod="RTICdrType_getWcharMaxSizeSerialized"
                   arraySizeMethod="RTICdrType_getPrimitiveArrayMaxSizeSerialized"
                   sequenceSizeMethod="RTICdrType_getPrimitiveSequenceMaxSizeSerialized"
                   elementPrintBitsMethod="RTICdrType_printBits"/>   

        <type idlType="octet" nativeType="DDS_Octet" 
                   typeCode="DDS_g_tc_octet"
                   nativeTypeSeq="DDS_OctetSeq"
                   typeEnum="RTI_CDR_OCTET_TYPE"                 
                   elementSerializeMethod="RTICdrStream_serializeOctet"
                   arraySerializeMethod="RTICdrStream_serializePrimitiveArray"
                   sequenceSerializeMethod="RTICdrStream_serializePrimitiveSequence"
                   pointerSequenceSerializeMethod="RTICdrStream_serializePrimitivePointerSequence"
                   elementDeserializeMethod="RTICdrStream_deserializeOctet"
                   arrayDeserializeMethod="RTICdrStream_deserializePrimitiveArray"
                   sequenceDeserializeMethod="RTICdrStream_deserializePrimitiveSequence"
                   pointerSequenceDeserializeMethod="RTICdrStream_deserializePrimitivePointerSequence"
                   elementSkipMethod="RTICdrStream_skipOctet"
                   arraySkipMethod="RTICdrStream_skipPrimitiveArray"
                   sequenceSkipMethod="RTICdrStream_skipPrimitiveSequence"
                   pointerSequenceSkipMethod="RTICdrStream_skipPrimitivePointerSequence"
                   elementPrintMethod="RTICdrType_printOctet"
                   elementInitMethod="RTICdrType_initOctet"
                   elementCopyMethod="RTICdrType_copyOctet"
                   elementSize="RTI_CDR_OCTET_SIZE"
                   elementAlignment="RTI_CDR_OCTET_ALIGN"
                   elementSizeMethod="RTICdrType_getOctetMaxSizeSerialized"
                   arraySizeMethod="RTICdrType_getPrimitiveArrayMaxSizeSerialized"
                   sequenceSizeMethod="RTICdrType_getPrimitiveSequenceMaxSizeSerialized"
                   elementPrintBitsMethod="RTICdrType_printBits"/>   

        <!-- Note: The CORBA IDL->C spec maps boolean to unsigned short -->
        <type idlType="boolean" nativeType="DDS_Boolean" 
                   typeCode="DDS_g_tc_boolean"
                   nativeTypeSeq="DDS_BooleanSeq"
                   typeEnum="RTI_CDR_BOOLEAN_TYPE"                 
                   elementSerializeMethod="RTICdrStream_serializeBoolean"
                   arraySerializeMethod="RTICdrStream_serializePrimitiveArray"
                   sequenceSerializeMethod="RTICdrStream_serializePrimitiveSequence"
                   pointerSequenceSerializeMethod="RTICdrStream_serializePrimitivePointerSequence"
                   elementDeserializeMethod="RTICdrStream_deserializeBoolean"
                   arrayDeserializeMethod="RTICdrStream_deserializePrimitiveArray"
                   sequenceDeserializeMethod="RTICdrStream_deserializePrimitiveSequence"
                   pointerSequenceDeserializeMethod="RTICdrStream_deserializePrimitivePointerSequence"
                   elementSkipMethod="RTICdrStream_skipBoolean"
                   arraySkipMethod="RTICdrStream_skipPrimitiveArray"
                   sequenceSkipMethod="RTICdrStream_skipPrimitiveSequence"
                   pointerSequenceSkipMethod="RTICdrStream_skipPrimitivePointerSequence"
                   elementPrintMethod="RTICdrType_printBoolean"
                   elementInitMethod="RTICdrType_initBoolean"
                   elementCopyMethod="RTICdrType_copyBoolean"
                   elementSize="RTI_CDR_BOOLEAN_SIZE"
                   elementAlignment="RTI_CDR_BOOLEAN_ALIGN"
                   elementSizeMethod="RTICdrType_getBooleanMaxSizeSerialized"
                   arraySizeMethod="RTICdrType_getPrimitiveArrayMaxSizeSerialized"
                   sequenceSizeMethod="RTICdrType_getPrimitiveSequenceMaxSizeSerialized"
                   elementPrintBitsMethod="notUsed"/>   
    
    </typeInfoMap>
    

    <!-- Mapping of method kinds (serialize, deserialize, etc) to their template string.
         Each method kind is further categorized using <method> child element that has
         a mandetory attribute "kind" and an optional attribute "typeKind". When a
         code generation stylesheet seeks the right template given a method and a member,
         it should be ready to match even when the typeKind attribute is missing. This
         avoids duplicating the template when the difference between typeKind (builtin
         vs. user) does not matter.
    -->
    
    <!-- TODO: Document the substitution strings and their meaning in form of a table -->
    <methodInfoMap>
    
    <!-- ============= Struct member declaration ========================= -->
 
    <!-- While not really a method, from code-generation point-of-view, the difference 
         between declaration code and method code for a struct member is irrelevant. -->

        <method kind="structMember">
            <template kind="scalar">
    %%nativeType%% %%pointer%% %%rawName%%;</template>
            <template kind="string">
    char* %%pointer%% %%rawName%%; /* maximum length = %%stringMaxLength%% */</template>
            <template kind="wstring">
    DDS_Wchar * %%pointer%% %%rawName%%; /* maximum length = %%stringMaxLength%% */</template>
            <template kind="array">
    %%nativeType%% %%pointer%% %%rawName%%%%cardinality%%;</template>
            <template kind="array" typeKind="user" type="string">
    char * %%pointer%% %%rawName%%%%cardinality%%;</template>
            <template kind="array" typeKind="user" type="wstring">
    DDS_Wchar * %%pointer%% %%rawName%%%%cardinality%%;</template>    
            <template kind="sequence" typeKind="user" type="string">
    %%cStruct%% DDS_StringSeq %%pointer%% %%rawName%%;</template>
            <template kind="sequence" typeKind="user" type="wstring">
    %%cStruct%% DDS_WstringSeq %%pointer%% %%rawName%%;</template>    
            <template kind="sequence">
    %%cStruct%% %%nativeTypeSeq%% %%pointer%% %%rawName%%;</template>
            <template kind="arraySequence" typeKind="user" type="string">
    %%cStruct%% DDS_StringSeq %%pointer%% %%rawName%%%%cardinality%%;</template>                
            <template kind="arraySequence" typeKind="user" type="wstring">
    %%cStruct%% DDS_WstringSeq %%pointer%% %%rawName%%%%cardinality%%;</template>                
            <template kind="arraySequence">
    %%cStruct%% %%nativeTypeSeq%% %%pointer%% %%rawName%%%%cardinality%%;</template>                
            <template kind="bitfield">
    %%nativeType%% %%pointer%% %%rawName%% : %%bits%%;</template>
        </method>
    

    <!-- ============================== Serialize ========================= -->

        <method kind="serialize">
            <template kind="scalar" typeKind="builtin" fastSerialization="yes">
    %%elementSerializeMethod%%Fast(
        stream, %%sampleAccessPointer%%%%name%%);
            </template>
            <template kind="scalar" typeKind="builtin" fastSerialization="no">
    if (!%%elementSerializeMethod%%(
        stream, %%sampleAccessPointer%%%%name%%)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="scalar" typeKind="user">
    if (!%%elementSerializeMethod%%(
            endpoint_data,
            %%sampleAccessPointer%%%%name%%, 
            stream, 
            RTI_FALSE, encapsulation_id, 
            RTI_TRUE, 
            endpoint_plugin_qos)) {
        return RTI_FALSE;
    }
            </template>
            
            <template kind="string">
    if (!RTICdrStream_serializeString(
        stream, %%sampleAccess%%%%name%%, %%stringMaxLength%% + 1)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="wstring">
    if (!RTICdrStream_serializeWstring(
        stream, %%sampleAccess%%%%name%%,%%stringMaxLength%% + 1)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="builtin" fastSerialization="no">
    if (!%%arraySerializeMethod%%(
        stream, (void*)%%sampleAccess%%%%name%%, %%multiDimensionalArraySize%%, %%typeEnum%%)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="builtin" fastSerialization="yes">
    if (!%%arraySerializeMethod%%Fast(
        stream, (void*)%%sampleAccess%%%%name%%, %%multiDimensionalArraySize%%, %%typeEnum%%)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="builtin" pointer="yes">
    if (!%%arraySerializeMethod%%(
        stream, (const void**)%%sampleAccessPointer%%%%name%%, %%multiDimensionalArraySize%%, %%typeEnum%%)) {
        return RTI_FALSE;
    }
            </template>            
            <template kind="array" typeKind="user" type="string">
    if (!RTICdrStream_serializeStringArray(
        stream, (void *)%%sampleAccess%%%%name%%,
        %%multiDimensionalArraySize%%, %%stringMaxLength%% + 1,
        RTI_CDR_CHAR_TYPE)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="user" type="string" pointer="yes">                
    if (!RTICdrStream_serializeStringPointerArray(
        stream, (const void **)%%sampleAccessPointer%%%%name%%,
        %%multiDimensionalArraySize%%, %%stringMaxLength%% + 1,
        RTI_CDR_CHAR_TYPE)) {
        return RTI_FALSE;
    }
            </template>            
            <template kind="array" typeKind="user" type="wstring">
    if (!RTICdrStream_serializeStringArray(
        stream, (void *)%%sampleAccess%%%%name%%,
        %%multiDimensionalArraySize%%, %%stringMaxLength%% + 1,
        RTI_CDR_WCHAR_TYPE)){
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="user" type="wstring" pointer="yes">
    if (!RTICdrStream_serializeStringPointerArray(
        stream, (const void **)%%sampleAccessPointer%%%%name%%,
        %%multiDimensionalArraySize%%, %%stringMaxLength%% + 1,
        RTI_CDR_WCHAR_TYPE)){
        return RTI_FALSE;
    }
            </template>            
            <template kind="array" typeKind="user">
    if (!%%arraySerializeMethod%%(
        stream, (void*)%%sampleAccess%%%%name%%,
        %%multiDimensionalArraySize%%, sizeof(%%nativeType%%),
        (RTICdrStreamSerializeFunction)%%elementSerializeMethod%%,
        RTI_FALSE, encapsulation_id, RTI_TRUE,
        endpoint_data,endpoint_plugin_qos)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="user" pointer="yes">
    if (!%%arraySerializeMethod%%(
        stream, (const void**)%%sampleAccessPointer%%%%name%%,
        %%multiDimensionalArraySize%%, sizeof(%%nativeType%%),
        (RTICdrStreamSerializeFunction)%%elementSerializeMethod%%,
        RTI_FALSE, encapsulation_id, RTI_TRUE,
        endpoint_data,endpoint_plugin_qos)) {
        return RTI_FALSE;
    }
            </template>            
            <template kind="sequence" typeKind="builtin" fastSerialization="no">
    if (%%nativeTypeSeq%%_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%) != NULL) {
        if (!%%sequenceSerializeMethod%%(
            stream,
            %%nativeTypeSeq%%_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            %%nativeTypeSeq%%_get_length(%%sampleAccessPointer%%%%name%%),
            %%sequenceMaxLength%%,
            %%typeEnum%%)) {
            return RTI_FALSE;
        }
    } else {
        if (!%%pointerSequenceSerializeMethod%%(
            stream,
            (const void **)%%nativeTypeSeq%%_get_discontiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            %%nativeTypeSeq%%_get_length(%%sampleAccessPointer%%%%name%%),
            %%sequenceMaxLength%%,
            %%typeEnum%%)) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="sequence" typeKind="builtin" fastSerialization="yes">
    if (%%nativeTypeSeq%%_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%) != NULL) {
        if (!%%sequenceSerializeMethod%%Fast(
            stream,
            %%nativeTypeSeq%%_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            %%nativeTypeSeq%%_get_length(%%sampleAccessPointer%%%%name%%),
            %%sequenceMaxLength%%,
            %%typeEnum%%)) {
            return RTI_FALSE;
        }
    } else {
        if (!%%pointerSequenceSerializeMethod%%(
            stream,
            (const void **)%%nativeTypeSeq%%_get_discontiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            %%nativeTypeSeq%%_get_length(%%sampleAccessPointer%%%%name%%),
            %%sequenceMaxLength%%,
            %%typeEnum%%)) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="sequence" typeKind="user" type="string">
    if (DDS_StringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%) != NULL) {
        if (!RTICdrStream_serializeStringSequence(
            stream,
            DDS_StringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            DDS_StringSeq_get_length(%%sampleAccessPointer%%%%name%%),
            %%sequenceMaxLength%%,
            %%stringMaxLength%% + 1,
            RTI_CDR_CHAR_TYPE)) {
            return RTI_FALSE;
        }
    } else {
        if (!RTICdrStream_serializeStringPointerSequence(
            stream,
            (const void **)DDS_StringSeq_get_discontiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            DDS_StringSeq_get_length(%%sampleAccessPointer%%%%name%%),
            %%sequenceMaxLength%%,
            %%stringMaxLength%% + 1,
            RTI_CDR_CHAR_TYPE)) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="sequence" typeKind="user" type="wstring">
    if (DDS_WstringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%) != NULL) {
        if (!RTICdrStream_serializeStringSequence(
            stream,
            DDS_WstringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            DDS_WstringSeq_get_length(%%sampleAccessPointer%%%%name%%),
            %%sequenceMaxLength%%,
            %%stringMaxLength%% + 1,
            RTI_CDR_WCHAR_TYPE)) {
            return RTI_FALSE;
        }
    } else {
        if (!RTICdrStream_serializeStringPointerSequence(
            stream,
            (const void **)DDS_WstringSeq_get_discontiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            DDS_WstringSeq_get_length(%%sampleAccessPointer%%%%name%%),
            %%sequenceMaxLength%%,
            %%stringMaxLength%% + 1,
            RTI_CDR_WCHAR_TYPE)) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="sequence" typeKind="user">
    if (%%nativeTypeSeq%%_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%) != NULL) {
        if (!%%sequenceSerializeMethod%%(
            stream,
            %%nativeTypeSeq%%_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            %%nativeTypeSeq%%_get_length(%%sampleAccessPointer%%%%name%%),
            %%sequenceMaxLength%%,
            sizeof(%%nativeType%%),
            (RTICdrStreamSerializeFunction)%%elementSerializeMethod%%,
            RTI_FALSE, encapsulation_id,RTI_TRUE,
            endpoint_data,endpoint_plugin_qos)) {
            return RTI_FALSE;
        }
    } else {
        if (!%%pointerSequenceSerializeMethod%%(
            stream,
            (const void **)%%nativeTypeSeq%%_get_discontiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            %%nativeTypeSeq%%_get_length(%%sampleAccessPointer%%%%name%%),
            %%sequenceMaxLength%%,
            (RTICdrStreamSerializeFunction)%%elementSerializeMethod%%,
            RTI_FALSE, encapsulation_id,RTI_TRUE,
            endpoint_data,endpoint_plugin_qos)) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="arraySequence" typeKind="user" type="string">
    {
        int i;
        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); ++i) {
            if (DDS_StringSeq_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]) != NULL) {
                if (!RTICdrStream_serializeStringSequence(
                    stream,
                    DDS_StringSeq_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                    DDS_StringSeq_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                    %%sequenceMaxLength%%,
                    %%stringMaxLength%% + 1,
                    RTI_CDR_CHAR_TYPE)) {
                    return RTI_FALSE;
                }
            } else {
                if (!RTICdrStream_serializeStringPointerSequence(
                    stream,
                    (const void **)DDS_StringSeq_get_discontiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                    DDS_StringSeq_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                    %%sequenceMaxLength%%,
                    %%stringMaxLength%% + 1,
                    RTI_CDR_CHAR_TYPE)){
                    return RTI_FALSE;
                }
            }
        }
    }
            </template>
            <template kind="arraySequence" typeKind="user" type="wstring">
    {
        int i;
        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); ++i) {
            if (DDS_WstringSeq_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]) != NULL) {
                if (!RTICdrStream_serializeStringSequence(
                    stream,
                    DDS_WstringSeq_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                    DDS_WstringSeq_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                    %%sequenceMaxLength%%,
                    %%stringMaxLength%% + 1,
                    RTI_CDR_WCHAR_TYPE)){
                    return RTI_FALSE;
                }
            } else {
                if (!RTICdrStream_serializeStringPointerSequence(
                    stream,
                    (const void **)DDS_WstringSeq_get_discontiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                    DDS_WstringSeq_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                    %%sequenceMaxLength%%,
                    %%stringMaxLength%% + 1,
                    RTI_CDR_WCHAR_TYPE)) {
                    return RTI_FALSE;
                }
            }
        }
    }
            </template>
            <template kind="arraySequence" typeKind="user">
    {
        int i;
        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); ++i) {
            if (%%nativeTypeSeq%%_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]) != NULL) {
                if (!%%sequenceSerializeMethod%%(
                    stream,
                    %%nativeTypeSeq%%_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                    %%nativeTypeSeq%%_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                    %%sequenceMaxLength%%,
                    sizeof(%%nativeType%%),
                    (RTICdrStreamSerializeFunction)%%elementSerializeMethod%%,
                    RTI_FALSE,encapsulation_id,RTI_TRUE,
                    endpoint_data,endpoint_plugin_qos)) {
                    return RTI_FALSE;
                }
            } else {
                if (!%%pointerSequenceSerializeMethod%%(
                    stream,
                    (const void **)%%nativeTypeSeq%%_get_discontiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                    %%nativeTypeSeq%%_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                    %%sequenceMaxLength%%,
                    (RTICdrStreamSerializeFunction)%%elementSerializeMethod%%,
                    RTI_FALSE,encapsulation_id,RTI_TRUE,
                    endpoint_data,endpoint_plugin_qos)) {
                    return RTI_FALSE;
                }
            }
        }
    }
            </template>
            <template kind="arraySequence" typeKind="builtin">
    {
        int i;
        for (i = 0; i&lt; (int)(%%multiDimensionalArraySize%%); ++i) {
            if (%%nativeTypeSeq%%_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]) != NULL) {
                if (!%%sequenceSerializeMethod%%(
                    stream,
                    %%nativeTypeSeq%%_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                    %%nativeTypeSeq%%_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                    %%sequenceMaxLength%%,
                    %%typeEnum%%)) {
                    return RTI_FALSE;
                }
            } else {
                if (!%%pointerSequenceSerializeMethod%%(
                    stream,
                    (const void **)%%nativeTypeSeq%%_get_discontiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                    %%nativeTypeSeq%%_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                    %%sequenceMaxLength%%,
                    %%typeEnum%%)) {
                    return RTI_FALSE;
                }
            }
        }
    }
            </template>
            <template kind="bitfield" bitKind="normal">
    bit_val = (RTICdrUnsignedLong) %%sampleAccess%%%%name%%;
    if (!RTICdrStream_serializeBits(stream, &amp;bit_val, %%bits%%)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="bitfield" bitKind="lastBitField">
    bit_val = (RTICdrUnsignedLong) %%sampleAccess%%%%name%%;
    if (!RTICdrStream_serializeBits(stream, &amp;bit_val, %%bits%%)) {
        return RTI_FALSE;
    }
    if (!RTICdrStream_flushBitsBuffer(stream)) {
        return RTI_FALSE;
    }
            </template>
        </method>

     <!-- =========================== Deserialize ========================= -->

        <method kind="deserialize">
            <template kind="scalar" typeKind="builtin" fastSerialization="yes">
    %%elementDeserializeMethod%%Fast(
        stream, %%sampleAccessPointer%%%%name%%);
            </template>
            <template kind="scalar" typeKind="builtin" fastSerialization="no">
    if (!%%elementDeserializeMethod%%(
        stream, %%sampleAccessPointer%%%%name%%)) {
        %%deserializationErrorHandling%%;
    }</template>
            <template kind="scalar" typeKind="user">
    if (!%%elementDeserializeMethod%%(
            endpoint_data,
            %%sampleAccessPointer%%%%name%%,
            stream, 
            RTI_FALSE, RTI_TRUE, 
            endpoint_plugin_qos)) {
        %%deserializationErrorHandling%%;
    }
            </template>           
            
            <template kind="string">
    if (!RTICdrStream_deserializeString(
        stream, %%sampleAccess%%%%name%%, %%stringMaxLength%% + 1)) {
        %%deserializationErrorHandling%%;
    }
            </template>
            <template kind="wstring">
    if (!RTICdrStream_deserializeWstring(
        stream, %%sampleAccess%%%%name%%,%%stringMaxLength%% + 1)) {
        %%deserializationErrorHandling%%;
    }
            </template>
            <template kind="array" typeKind="builtin" fastSerialization="no">
    if (!%%arrayDeserializeMethod%%(
        stream, (void*)%%sampleAccess%%%%name%%, %%multiDimensionalArraySize%%, %%typeEnum%%)) {
        %%deserializationErrorHandling%%;
    }
            </template>
            <template kind="array" typeKind="builtin" fastSerialization="yes">
    if (!%%arrayDeserializeMethod%%Fast(
        stream, (void**)%%sampleAccessPointer%%%%name%%, %%multiDimensionalArraySize%%, %%typeEnum%%)) {
        %%deserializationErrorHandling%%;
    }
            </template>            
            <template kind="array" typeKind="builtin" pointer="yes">
    if (!%%arrayDeserializeMethod%%(
        stream, (void**)%%sampleAccessPointer%%%%name%%, %%multiDimensionalArraySize%%, %%typeEnum%%)) {
        %%deserializationErrorHandling%%;
    }
            </template>            
            <template kind="array" typeKind="user" type="string">                
    if (!RTICdrStream_deserializeStringArray(
        stream, (void*)%%sampleAccess%%%%name%%,
        %%multiDimensionalArraySize%%, %%stringMaxLength%% + 1,
        RTI_CDR_CHAR_TYPE)){
        %%deserializationErrorHandling%%;
    }
            </template>
            <template kind="array" typeKind="user" type="string" pointer="yes">                
    if (!RTICdrStream_deserializeStringPointerArray(
        stream, (void**)%%sampleAccessPointer%%%%name%%,
        %%multiDimensionalArraySize%%, %%stringMaxLength%% + 1,
        RTI_CDR_CHAR_TYPE)){
        %%deserializationErrorHandling%%;
    }
            </template>            
            <template kind="array" typeKind="user" type="wstring">
    if (!RTICdrStream_deserializeStringArray(
        stream, (void*)%%sampleAccess%%%%name%%,
        %%multiDimensionalArraySize%%, %%stringMaxLength%% + 1,            
        RTI_CDR_WCHAR_TYPE)){
        %%deserializationErrorHandling%%;
    }                
            </template>            
            <template kind="array" typeKind="user" type="wstring" pointer="yes">                
    if (!RTICdrStream_deserializeStringPointerArray(
        stream, (void**)%%sampleAccessPointer%%%%name%%,
        %%multiDimensionalArraySize%%, %%stringMaxLength%% + 1,            
        RTI_CDR_WCHAR_TYPE)){
        %%deserializationErrorHandling%%;
    }                
            </template>                        
            <template kind="array" typeKind="user">
    if (!%%arrayDeserializeMethod%%(
        stream, (void*)%%sampleAccess%%%%name%%,
        %%multiDimensionalArraySize%%, sizeof(%%nativeType%%),
        (RTICdrStreamDeserializeFunction)%%elementDeserializeMethod%%,
        RTI_FALSE,RTI_TRUE,
        endpoint_data,endpoint_plugin_qos)) {
        %%deserializationErrorHandling%%;
    }
            </template>
            <template kind="array" typeKind="user" pointer="yes">
    if (!%%arrayDeserializeMethod%%(
        stream, (void**)%%sampleAccessPointer%%%%name%%,
        %%multiDimensionalArraySize%%, sizeof(%%nativeType%%),
        (RTICdrStreamDeserializeFunction)%%elementDeserializeMethod%%,
        RTI_FALSE,RTI_TRUE,
        endpoint_data,endpoint_plugin_qos)) {
        %%deserializationErrorHandling%%;
    }
            </template>            
            <template kind="sequence" typeKind="builtin" fastSerialization="no">
    {
        RTICdrUnsignedLong sequence_length;

        if (%%nativeTypeSeq%%_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%) != NULL) {
            if (!%%sequenceDeserializeMethod%%(
                stream,
                %%nativeTypeSeq%%_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%),
                &amp;sequence_length,
                %%nativeTypeSeq%%_get_maximum(%%sampleAccessPointer%%%%name%%),
                %%typeEnum%%)) {
                %%deserializationErrorHandling%%;
            }
        } else {
            if (!%%pointerSequenceDeserializeMethod%%(
                stream,
                (void **)%%nativeTypeSeq%%_get_discontiguous_bufferI(%%sampleAccessPointer%%%%name%%),
                &amp;sequence_length,
                %%nativeTypeSeq%%_get_maximum(%%sampleAccessPointer%%%%name%%),
                %%typeEnum%%)) {
                %%deserializationErrorHandling%%;
            }
        }
        if (!%%nativeTypeSeq%%_set_length(%%sampleAccessPointer%%%%name%%, sequence_length)) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="sequence" typeKind="builtin" fastSerialization="yes">
    {
        RTICdrUnsignedLong sequence_length;

        if (%%nativeTypeSeq%%_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%) != NULL) {
            if (!%%sequenceDeserializeMethod%%Fast(
                stream,
                %%nativeTypeSeq%%_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%),
                &amp;sequence_length,
                %%nativeTypeSeq%%_get_maximum(%%sampleAccessPointer%%%%name%%),
                %%typeEnum%%)) {
                %%deserializationErrorHandling%%;
            }
        } else {
            if (!%%pointerSequenceDeserializeMethod%%(
                stream,
                (void **)%%nativeTypeSeq%%_get_discontiguous_bufferI(%%sampleAccessPointer%%%%name%%),
                &amp;sequence_length,
                %%nativeTypeSeq%%_get_maximum(%%sampleAccessPointer%%%%name%%),
                %%typeEnum%%)) {
                %%deserializationErrorHandling%%;
            }
        }
        if (!%%nativeTypeSeq%%_set_length(%%sampleAccessPointer%%%%name%%, sequence_length)) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="sequence" typeKind="user" type="string">
    {
        RTICdrUnsignedLong sequence_length;

        if (DDS_StringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%) != NULL) {
            if (!RTICdrStream_deserializeStringSequence(
                stream,
                DDS_StringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%),
                &amp;sequence_length,
                DDS_StringSeq_get_maximum(%%sampleAccessPointer%%%%name%%),
                %%stringMaxLength%% + 1,            
                RTI_CDR_CHAR_TYPE)){
                %%deserializationErrorHandling%%;
            }
        } else {
            if (!RTICdrStream_deserializeStringPointerSequence(
                stream,
                (void **)DDS_StringSeq_get_discontiguous_bufferI(%%sampleAccessPointer%%%%name%%),
                &amp;sequence_length,
                DDS_StringSeq_get_maximum(%%sampleAccessPointer%%%%name%%),
                %%stringMaxLength%% + 1,            
                RTI_CDR_CHAR_TYPE)){
                %%deserializationErrorHandling%%;
            }
        }
        if (!DDS_StringSeq_set_length(%%sampleAccessPointer%%%%name%%, sequence_length)) {
            return RTI_FALSE;
        }                
    }
            </template>
            <template kind="sequence" typeKind="user" type="wstring">
    {
        RTICdrUnsignedLong sequence_length;

        if (DDS_WstringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%) != NULL) {
            if (!RTICdrStream_deserializeStringSequence(
                stream,
                DDS_WstringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%),
                &amp;sequence_length,
                DDS_WstringSeq_get_maximum(%%sampleAccessPointer%%%%name%%),
                %%stringMaxLength%% + 1,            
                RTI_CDR_WCHAR_TYPE)){
                %%deserializationErrorHandling%%;
            }
        } else {
            if (!RTICdrStream_deserializeStringPointerSequence(
                stream,
                (void **)DDS_WstringSeq_get_discontiguous_bufferI(%%sampleAccessPointer%%%%name%%),
                &amp;sequence_length,
                DDS_WstringSeq_get_maximum(%%sampleAccessPointer%%%%name%%),
                %%stringMaxLength%% + 1,            
                RTI_CDR_WCHAR_TYPE)){
                %%deserializationErrorHandling%%;
            }
        }
        if (!DDS_WstringSeq_set_length(%%sampleAccessPointer%%%%name%%, sequence_length)) {
            return RTI_FALSE;
        }                                
    }
            </template>            
            <template kind="sequence" typeKind="user">
    {
        RTICdrUnsignedLong sequence_length;

        if (%%nativeTypeSeq%%_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%) != NULL) {
            if (!%%sequenceDeserializeMethod%%(
                stream,
                %%nativeTypeSeq%%_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%),
                &amp;sequence_length,
                %%nativeTypeSeq%%_get_maximum(%%sampleAccessPointer%%%%name%%),
                sizeof(%%nativeType%%),
                (RTICdrStreamDeserializeFunction)%%elementDeserializeMethod%%,
                RTI_FALSE,RTI_TRUE,
                endpoint_data,endpoint_plugin_qos)) {
                %%deserializationErrorHandling%%;
            }
        } else {
            if (!%%pointerSequenceDeserializeMethod%%(
                stream,
                (void **)%%nativeTypeSeq%%_get_discontiguous_bufferI(%%sampleAccessPointer%%%%name%%),
                &amp;sequence_length,
                %%nativeTypeSeq%%_get_maximum(%%sampleAccessPointer%%%%name%%),
                (RTICdrStreamDeserializeFunction)%%elementDeserializeMethod%%,
                RTI_FALSE,RTI_TRUE,
                endpoint_data,endpoint_plugin_qos)) {
                %%deserializationErrorHandling%%;
            }
        }
        if (!%%nativeTypeSeq%%_set_length(
            %%sampleAccessPointer%%%%name%%, sequence_length)) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="arraySequence" typeKind="user" type="string">
    {
        int i;
        RTICdrUnsignedLong sequence_length;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); i++) {
            if (DDS_StringSeq_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]) != NULL) {
                if (!RTICdrStream_deserializeStringSequence(
                    stream,
                    DDS_StringSeq_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                    &amp;sequence_length,
                    DDS_StringSeq_get_maximum(&amp;%%sampleAccess%%%%name%%[i]),
                    %%stringMaxLength%% + 1,
                    RTI_CDR_CHAR_TYPE)){
                    %%deserializationErrorHandling%%;
                }
            } else {
                if (!RTICdrStream_deserializeStringPointerSequence(
                    stream,
                    (void **)DDS_StringSeq_get_discontiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                    &amp;sequence_length,
                    DDS_StringSeq_get_maximum(&amp;%%sampleAccess%%%%name%%[i]),
                    %%stringMaxLength%% + 1,
                    RTI_CDR_CHAR_TYPE)){
                    %%deserializationErrorHandling%%;
                }
            }
            if (!DDS_StringSeq_set_length(&amp;%%sampleAccess%%%%name%%[i], sequence_length)) {
                return RTI_FALSE;
            }
        }
    }
            </template>                
            <template kind="arraySequence" typeKind="user" type="wstring">
    {
        int i;
        RTICdrUnsignedLong sequence_length;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); i++) {
            if (DDS_WstringSeq_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]) != NULL) {
                if (!RTICdrStream_deserializeStringSequence(
                    stream,
                    DDS_WstringSeq_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                    &amp;sequence_length,
                    DDS_WstringSeq_get_maximum(&amp;%%sampleAccess%%%%name%%[i]),
                    %%stringMaxLength%% + 1,
                    RTI_CDR_WCHAR_TYPE)){
                    %%deserializationErrorHandling%%;
                }
            } else {
                if (!RTICdrStream_deserializeStringPointerSequence(
                    stream,
                    (void **)DDS_WstringSeq_get_discontiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                    &amp;sequence_length,
                    DDS_WstringSeq_get_maximum(&amp;%%sampleAccess%%%%name%%[i]),
                    %%stringMaxLength%% + 1,
                    RTI_CDR_WCHAR_TYPE)){
                    %%deserializationErrorHandling%%;
                }
            }
            if (!DDS_WstringSeq_set_length(&amp;%%sampleAccess%%%%name%%[i], sequence_length)) {
                return RTI_FALSE;
            }                                        
        }
    }
            </template>                
            <template kind="arraySequence" typeKind="user">
    {
        int i;
        RTICdrUnsignedLong sequence_length;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); i++) {
            if (%%nativeTypeSeq%%_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]) != NULL) {
                if (!%%sequenceDeserializeMethod%%(
                    stream,
                    %%nativeTypeSeq%%_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                    &amp;sequence_length,
                    %%nativeTypeSeq%%_get_maximum(&amp;%%sampleAccess%%%%name%%[i]),
                    sizeof(%%nativeType%%),
                    (RTICdrStreamDeserializeFunction)%%elementDeserializeMethod%%,
                    RTI_FALSE,RTI_TRUE,
                    endpoint_data,endpoint_plugin_qos)) {
                    %%deserializationErrorHandling%%;
                }
            } else {
                if (!%%pointerSequenceDeserializeMethod%%(
                    stream,
                    (void **)%%nativeTypeSeq%%_get_discontiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                    &amp;sequence_length,
                    %%nativeTypeSeq%%_get_maximum(&amp;%%sampleAccess%%%%name%%[i]),
                    (RTICdrStreamDeserializeFunction)%%elementDeserializeMethod%%,
                    RTI_FALSE,RTI_TRUE,
                    endpoint_data,endpoint_plugin_qos)) {
                    %%deserializationErrorHandling%%;
                }
            }
            if (!%%nativeTypeSeq%%_set_length(
                &amp;%%sampleAccess%%%%name%%[i],sequence_length)) {
                return RTI_FALSE;
            }        
        }
    }
            </template>                            
            <template kind="arraySequence" typeKind="builtin">
    {
        int i;
        RTICdrUnsignedLong sequence_length;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); i++) {
            if (%%nativeTypeSeq%%_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]) != NULL) {
                if (!%%sequenceDeserializeMethod%%(
                    stream,
                    %%nativeTypeSeq%%_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                    &amp;sequence_length,
                    %%nativeTypeSeq%%_get_maximum(&amp;%%sampleAccess%%%%name%%[i]),
                    %%typeEnum%%)) {
                    %%deserializationErrorHandling%%;
                }
             } else {
                if (!%%pointerSequenceDeserializeMethod%%(
                    stream,
                    (void **)%%nativeTypeSeq%%_get_discontiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                    &amp;sequence_length,
                    %%nativeTypeSeq%%_get_maximum(&amp;%%sampleAccess%%%%name%%[i]),
                    %%typeEnum%%)) {
                    %%deserializationErrorHandling%%;
                }
             }
             if (!%%nativeTypeSeq%%_set_length(&amp;%%sampleAccess%%%%name%%[i], sequence_length)) {
                return RTI_FALSE;
            }        
        }
    }
            </template>                                        
            <template kind="bitfield" bitKind="normal">
    if (!RTICdrStream_deserializeBits(stream, &amp;bit_val, %%bits%%)) {
        %%deserializationErrorHandling%%;
    }
    %%sampleAccess%%%%name%% = (%%nativeType%%)bit_val;
            </template>
            <template kind="bitfield" bitKind="lastBitField">
    if (!RTICdrStream_deserializeBits(stream, &amp;bit_val, %%bits%%)) {
        %%deserializationErrorHandling%%;
    }
    %%sampleAccess%%%%name%% = (%%nativeType%%)bit_val;
    if (!RTICdrStream_resetBitsBuffer(stream)){
        %%deserializationErrorHandling%%;
    }
            </template>
        </method>

    <!-- =========================== Skip ========================= -->

        <method kind="skip">
            <template kind="scalar" typeKind="builtin">
    if (!%%elementSkipMethod%%(stream)) {
        %%deserializationErrorHandling%%;
    }
            </template>
            <template kind="scalar" typeKind="user">
    if (!%%elementSkipMethod%%(
            endpoint_data,
            stream, 
            RTI_FALSE, RTI_TRUE, 
            endpoint_plugin_qos)) {
        %%deserializationErrorHandling%%;
    }
            </template>
            <template kind="string">
    if (!RTICdrStream_skipString(stream, %%stringMaxLength%% + 1)) {
        %%deserializationErrorHandling%%;
    }
            </template>
            <template kind="wstring">
    if (!RTICdrStream_skipWstring(stream, %%stringMaxLength%% + 1)) {
        %%deserializationErrorHandling%%;
    }
            </template>
            <template kind="array" typeKind="builtin">
    if (!%%arraySkipMethod%%(
        stream, %%multiDimensionalArraySize%%, %%typeEnum%%)) {
        %%deserializationErrorHandling%%;
    }
            </template>
            <template kind="array" typeKind="user" type="string">                
    if (!RTICdrStream_skipStringArray(
        stream, %%multiDimensionalArraySize%%, %%stringMaxLength%% + 1,
        RTI_CDR_CHAR_TYPE)){
        %%deserializationErrorHandling%%;
    }
            </template>  
            <template kind="array" typeKind="user" type="wstring">
    if (!RTICdrStream_skipStringArray(
        stream, %%multiDimensionalArraySize%%,%%stringMaxLength%% + 1,
         RTI_CDR_WCHAR_TYPE)){
        %%deserializationErrorHandling%%;
    }                
            </template>  
            <template kind="array" typeKind="user">
    if (!%%arraySkipMethod%%(
        stream, %%multiDimensionalArraySize%%, sizeof(%%nativeType%%),
        (RTICdrStreamSkipFunction)%%elementSkipMethod%%, 
        RTI_FALSE,RTI_TRUE,
        endpoint_data,endpoint_plugin_qos)) {
        %%deserializationErrorHandling%%;
    }
            </template>
            <template kind="sequence" typeKind="builtin">
    {
        RTICdrUnsignedLong sequence_length;

        if (!%%sequenceSkipMethod%%(
            stream,
            &amp;sequence_length,
            %%typeEnum%%)) {
            %%deserializationErrorHandling%%;
        }
    }
            </template>
            <template kind="sequence" typeKind="user" type="string">
    {
        RTICdrUnsignedLong sequence_length;

        if (!RTICdrStream_skipStringSequence(
            stream,
            &amp;sequence_length,
            %%stringMaxLength%% + 1,            
            RTI_CDR_CHAR_TYPE)){
            %%deserializationErrorHandling%%;
        }          
    }
            </template>
            <template kind="sequence" typeKind="user" type="wstring">
    {
        RTICdrUnsignedLong sequence_length;

        if (!RTICdrStream_skipStringSequence(
            stream,
            &amp;sequence_length,
            %%stringMaxLength%% + 1,            
            RTI_CDR_WCHAR_TYPE)){
            %%deserializationErrorHandling%%;
        }                         
    }
            </template>            
            <template kind="sequence" typeKind="user">
    {
        RTICdrUnsignedLong sequence_length;

        if (!%%sequenceSkipMethod%%(
            stream,
            &amp;sequence_length,
            sizeof(%%nativeType%%),
            (RTICdrStreamSkipFunction)%%elementSkipMethod%%,
            RTI_FALSE,RTI_TRUE,
            endpoint_data,endpoint_plugin_qos)) {
            %%deserializationErrorHandling%%;
        }
    }
            </template>
            <template kind="arraySequence" typeKind="user" type="string">
    {
        int i;
        RTICdrUnsignedLong sequence_length;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); ++i) {
            if (!RTICdrStream_skipStringSequence(
                stream,
                &amp;sequence_length,
                %%stringMaxLength%% + 1,
                RTI_CDR_CHAR_TYPE)){
                %%deserializationErrorHandling%%;
            }
        }
    }
            </template>                
            <template kind="arraySequence" typeKind="user" type="wstring">
    {
        int i;
        RTICdrUnsignedLong sequence_length;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); ++i) {
            if (!RTICdrStream_skipStringSequence(
                stream,
                &amp;sequence_length,
                %%stringMaxLength%% + 1,
                RTI_CDR_WCHAR_TYPE)){
                %%deserializationErrorHandling%%;
            }                                     
        }
    }
            </template>            
            <template kind="arraySequence" typeKind="user">
    {
        int i;
        RTICdrUnsignedLong sequence_length;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); ++i) {
            if (!%%sequenceSkipMethod%%(
                stream,
                &amp;sequence_length,
                sizeof(%%nativeType%%),
                (RTICdrStreamSkipFunction)%%elementSkipMethod%%,
                 RTI_FALSE,RTI_TRUE,
                endpoint_data,endpoint_plugin_qos)) {
                %%deserializationErrorHandling%%;
            }     
        }
    }
            </template>                            
            <template kind="arraySequence" typeKind="builtin">
    {
        int i;
        RTICdrUnsignedLong sequence_length;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); ++i) {
            if (!%%sequenceSkipMethod%%(
                stream,
                &amp;sequence_length,
                %%typeEnum%%)) {
                %%deserializationErrorHandling%%;
            }     
        }
    }
            </template>
            <template kind="bitfield" bitKind="normal">
    if (!RTICdrStream_skipBits(stream, %%bits%%)) {
        %%deserializationErrorHandling%%;
    }
            </template>
            <template kind="bitfield" bitKind="lastBitField">
    if (!RTICdrStream_skipBits(stream, %%bits%%)) {
        %%deserializationErrorHandling%%;
    }
    if (!RTICdrStream_resetBitsBuffer(stream)){
        %%deserializationErrorHandling%%;
    }
            </template>
        </method>

    <!-- ======================= get_serialized_sample_size ================== -->

        <method kind="get_serialized_sample_size">
            <template kind="scalar" typeKind="builtin">
    current_alignment += %%elementSizeMethod%%(
        %%currentAlignment%%);
            </template>
            <template kind="scalar" typeKind="user">
    current_alignment += %%elementSizeMethod%%(
        endpoint_data,RTI_FALSE, encapsulation_id, 
        %%currentAlignment%%, %%sampleAccessPointer%%%%name%%);
            </template>
            <template kind="string">
    current_alignment += RTICdrType_getStringSerializedSize(
        %%currentAlignment%%, %%sampleAccess%%%%name%%);
            </template>
            <template kind="wstring">
    current_alignment += RTICdrType_getWstringSerializedSize(
        %%currentAlignment%%, %%sampleAccess%%%%name%%);
            </template>
            <template kind="array" typeKind="builtin">
    current_alignment += %%arraySizeMethod%%(
        %%currentAlignment%%, %%multiDimensionalArraySize%%, %%typeEnum%%);
            </template>
            <template kind="array" typeKind="user" type="string">                
    current_alignment += RTICdrType_getStringArraySerializedSize(
        %%currentAlignment%%,%%multiDimensionalArraySize%%,(void *)%%sampleAccess%%%%name%%,RTI_CDR_CHAR_TYPE);
            </template>
            <template kind="array" typeKind="user" type="string" pointer="yes">                
    current_alignment += RTICdrType_getStringPointerArraySerializedSize(
        %%currentAlignment%%,%%multiDimensionalArraySize%%,(const void **)%%sampleAccessPointer%%%%name%%,RTI_CDR_CHAR_TYPE);
            </template>
            <template kind="array" typeKind="user" type="wstring">
    current_alignment += RTICdrType_getStringArraySerializedSize(
        %%currentAlignment%%,%%multiDimensionalArraySize%%,(void *)%%sampleAccess%%%%name%%,RTI_CDR_WCHAR_TYPE);
            </template>
            <template kind="array" typeKind="user" type="wstring" pointer="yes">
    current_alignment += RTICdrType_getStringPointerArraySerializedSize(
        %%currentAlignment%%,%%multiDimensionalArraySize%%,(const void **)%%sampleAccessPointer%%%%name%%,RTI_CDR_WCHAR_TYPE);
            </template>
            <template kind="array" typeKind="user">
    current_alignment += %%arraySizeMethod%%(
        %%currentAlignment%%, %%multiDimensionalArraySize%%, sizeof(%%nativeType%%),
        (RTICdrTypeGetSerializedSampleSizeFunction)%%elementSizeMethod%%,
        RTI_FALSE,encapsulation_id,
        (void *)%%sampleAccess%%%%name%%, endpoint_data);
            </template>
            <template kind="array" typeKind="user" pointer="yes">
    current_alignment += RTICdrStream_getNonPrimitivePointerArraySerializedSize(
        %%currentAlignment%%, %%multiDimensionalArraySize%%, sizeof(%%nativeType%%),
        (RTICdrTypeGetSerializedSampleSizeFunction)%%elementSizeMethod%%,
        RTI_FALSE,encapsulation_id,
        (const void**)%%sampleAccessPointer%%%%name%%, endpoint_data);
            </template>
            <template kind="sequence" typeKind="builtin">
    current_alignment += RTICdrType_getPrimitiveSequenceSerializedSize(
        %%currentAlignment%%, 
        %%nativeTypeSeq%%_get_length(%%sampleAccessPointer%%%%name%%),
        %%typeEnum%%);
            </template>
            <template kind="sequence" typeKind="user" type="string">
    if (DDS_StringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%) != NULL) {
         current_alignment += RTICdrStream_getStringSequenceSerializedSize(
            %%currentAlignment%%,
            DDS_StringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            DDS_StringSeq_get_length(%%sampleAccessPointer%%%%name%%),
            RTI_CDR_CHAR_TYPE);
    } else {
         current_alignment += RTICdrStream_getStringPointerSequenceSerializedSize(
            %%currentAlignment%%,
            (const void **)DDS_StringSeq_get_discontiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            DDS_StringSeq_get_length(%%sampleAccessPointer%%%%name%%),
            RTI_CDR_CHAR_TYPE);
    }
            </template>
            <template kind="sequence" typeKind="user" type="wstring">
    if (DDS_WstringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%) != NULL) {
         current_alignment += RTICdrStream_getStringSequenceSerializedSize(
            %%currentAlignment%%,
            DDS_WstringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            DDS_WstringSeq_get_length(%%sampleAccessPointer%%%%name%%),
            RTI_CDR_WCHAR_TYPE);
    } else {
         current_alignment += RTICdrStream_getStringPointerSequenceSerializedSize(
            %%currentAlignment%%,
            (const void **)DDS_WstringSeq_get_discontiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            DDS_WstringSeq_get_length(%%sampleAccessPointer%%%%name%%),
            RTI_CDR_WCHAR_TYPE);
    }
            </template>
            <template kind="sequence" typeKind="user">
    if (%%nativeTypeSeq%%_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%) != NULL) {
        current_alignment += RTICdrStream_getNonPrimitiveSequenceSerializedSize(
            %%currentAlignment%%, %%nativeTypeSeq%%_get_length(%%sampleAccessPointer%%%%name%%),
            sizeof(%%nativeType%%),
            (RTICdrTypeGetSerializedSampleSizeFunction)%%elementSizeMethod%%,
            RTI_FALSE,encapsulation_id,
            %%nativeTypeSeq%%_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            endpoint_data);
    } else {
        current_alignment += RTICdrStream_getNonPrimitivePointerSequenceSerializedSize(
            %%currentAlignment%%, %%nativeTypeSeq%%_get_length(%%sampleAccessPointer%%%%name%%),
            sizeof(%%nativeType%%),
            (RTICdrTypeGetSerializedSampleSizeFunction)%%elementSizeMethod%%,
            RTI_FALSE,encapsulation_id,
            (const void **)%%nativeTypeSeq%%_get_discontiguous_bufferI(%%sampleAccessPointer%%%%name%%),
            endpoint_data);
    }
            </template>
            <template kind="arraySequence" typeKind="user" type="string">
    {
        int i;
        unsigned int alignment = %%currentAlignment%%;
        
        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); ++i) {
            if (DDS_StringSeq_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]) != NULL) {
                 alignment += RTICdrStream_getStringSequenceSerializedSize(
                    alignment,
                    DDS_StringSeq_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                    DDS_StringSeq_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                    RTI_CDR_CHAR_TYPE);
            } else {
                 alignment += RTICdrStream_getStringPointerSequenceSerializedSize(
                    alignment,
                    (const void **)DDS_StringSeq_get_discontiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                    DDS_StringSeq_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                    RTI_CDR_CHAR_TYPE);
            }
        }
        
        current_alignment +=  alignment - %%currentAlignment%%;
    }
            </template>
            <template kind="arraySequence" typeKind="user" type="wstring">
    {
        int i;
        unsigned int alignment = %%currentAlignment%%;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); ++i) {
            if (DDS_WstringSeq_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]) != NULL) {
                 alignment += RTICdrStream_getStringSequenceSerializedSize(
                    alignment,
                    DDS_WstringSeq_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                    DDS_WstringSeq_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                    RTI_CDR_WCHAR_TYPE);
            } else {
                 alignment += RTICdrStream_getStringPointerSequenceSerializedSize(
                    alignment,
                    (const void **)DDS_WstringSeq_get_discontiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                    DDS_WstringSeq_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                    RTI_CDR_WCHAR_TYPE);
            }
        }
        
        current_alignment +=  alignment - %%currentAlignment%%;
    }
            </template>
            <template kind="arraySequence" typeKind="user">
    {
        int i;
        unsigned int alignment = %%currentAlignment%%;
        
        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); ++i) {
            if (%%nativeTypeSeq%%_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]) != NULL) {
                alignment += RTICdrStream_getNonPrimitiveSequenceSerializedSize(
                    alignment, %%nativeTypeSeq%%_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                    sizeof(%%nativeType%%),
                    (RTICdrTypeGetSerializedSampleSizeFunction)%%elementSizeMethod%%,
                    RTI_FALSE,encapsulation_id,
                    %%nativeTypeSeq%%_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                    endpoint_data);
            } else {
                alignment += RTICdrStream_getNonPrimitivePointerSequenceSerializedSize(
                    alignment, %%nativeTypeSeq%%_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                    sizeof(%%nativeType%%),
                    (RTICdrTypeGetSerializedSampleSizeFunction)%%elementSizeMethod%%,
                    RTI_FALSE,encapsulation_id,
                    (const void **)%%nativeTypeSeq%%_get_discontiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                    endpoint_data);
            }
        }
        
        current_alignment +=  alignment - %%currentAlignment%%;
    }
            </template>
            <template kind="arraySequence" typeKind="builtin">
    {
        int i;
        unsigned int alignment = %%currentAlignment%%;
        
        for (i = 0; i&lt; (int)(%%multiDimensionalArraySize%%); ++i) {
            alignment += RTICdrType_getPrimitiveSequenceSerializedSize(
                alignment, 
                %%nativeTypeSeq%%_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                %%typeEnum%%);
        }
        
        current_alignment +=  alignment - %%currentAlignment%%;
    }
            </template>
            <template kind="bitfield" bitKind="normal">
    current_alignment += RTICdrType_getBitsMaxSizeSerialized(
        %%currentAlignment%%, &amp;current_bits, %%bits%%);
            </template>
            <template kind="bitfield" bitKind="lastBitField">
    {
        unsigned int alignment = %%currentAlignment%%;
    
        alignment += RTICdrType_getBitsMaxSizeSerialized(
            alignment, &amp;current_bits, %%bits%%);
        alignment += RTICdrType_flushBitsMaxSizeSerialized(
            alignment, &amp;current_bits);
            
        current_alignment +=  alignment - %%currentAlignment%%;
    }
            </template>
        </method>

    <!-- ======================= get_min_size_serialized ================== -->

        <method kind="get_min_size_serialized">
            <template kind="scalar" typeKind="builtin">
    %%minSerializeLeading%% %%elementSizeMethod%%(
        %%currentAlignment%%)%%minSerializeTrailing%%;
            </template>
            <template kind="scalar" typeKind="user">
    %%minSerializeLeading%% %%elementSizeMethod%%(
        endpoint_data,RTI_FALSE,encapsulation_id,%%currentAlignment%%)%%minSerializeTrailing%%;
            </template>
            <template kind="string">
    %%minSerializeLeading%% RTICdrType_getStringMaxSizeSerialized(
        %%currentAlignment%%, 1)%%minSerializeTrailing%%;
            </template>
            <template kind="wstring">
    %%minSerializeLeading%% RTICdrType_getWstringMaxSizeSerialized(
        %%currentAlignment%%, 1)%%minSerializeTrailing%%;
            </template>
            <template kind="array" typeKind="builtin">
    %%minSerializeLeading%% %%arraySizeMethod%%(
        %%currentAlignment%%, %%multiDimensionalArraySize%%, %%typeEnum%%)%%minSerializeTrailing%%;
            </template>
            <template kind="array" typeKind="user" type="string">                
    %%minSerializeLeading%% RTICdrType_getStringArrayMaxSizeSerialized(
        %%currentAlignment%%,%%multiDimensionalArraySize%%,1,RTI_CDR_CHAR_TYPE)%%minSerializeTrailing%%;                                
            </template>
            <template kind="array" typeKind="user" type="wstring">                
    %%minSerializeLeading%% RTICdrType_getStringArrayMaxSizeSerialized(
        %%currentAlignment%%,%%multiDimensionalArraySize%%,1,RTI_CDR_WCHAR_TYPE)%%minSerializeTrailing%%;                                                
            </template>            
            <template kind="array" typeKind="user">
    %%minSerializeLeading%% %%arraySizeMethod%%(
        %%currentAlignment%%, %%multiDimensionalArraySize%%,
        %%elementSizeMethod%%,RTI_FALSE,encapsulation_id,endpoint_data)%%minSerializeTrailing%%;
            </template>
            <template kind="sequence" typeKind="builtin">
    %%minSerializeLeading%% %%sequenceSizeMethod%%(
        %%currentAlignment%%, 0, %%typeEnum%%)%%minSerializeTrailing%%;
            </template>
            <template kind="sequence" typeKind="user" type="string">
    %%minSerializeLeading%% RTICdrType_getStringSequenceMaxSizeSerialized(
        %%currentAlignment%%,0,1,RTI_CDR_CHAR_TYPE)%%minSerializeTrailing%%;                
            </template>
            <template kind="sequence" typeKind="user" type="wstring">
    %%minSerializeLeading%% RTICdrType_getStringSequenceMaxSizeSerialized(
        %%currentAlignment%%,0,1,RTI_CDR_WCHAR_TYPE)%%minSerializeTrailing%%;                                
            </template>                        
            <template kind="sequence" typeKind="user">
    %%minSerializeLeading%% %%sequenceSizeMethod%%(
        %%currentAlignment%%, 0,
        %%elementSizeMethod%%,RTI_FALSE,encapsulation_id,endpoint_data)%%minSerializeTrailing%%;
            </template>
            <template kind="arraySequence" typeKind="user" type="string">
    {
        int i;
        unsigned int minSize = %%currentAlignment%%;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); i++) {
            minSize += RTICdrType_getStringSequenceMaxSizeSerialized(
                minSize,0,1,RTI_CDR_CHAR_TYPE);
        }

        %%minSerializeLeading%% (minSize - %%currentAlignment%%) %%minSerializeTrailing%%;
    }
            </template>                
            <template kind="arraySequence" typeKind="user" type="wstring">
    {
        int i;
        unsigned int minSize = %%currentAlignment%%;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); i++) {
            minSize += RTICdrType_getStringSequenceMaxSizeSerialized(
                minSize,0,1,RTI_CDR_WCHAR_TYPE);
        }

        %%minSerializeLeading%% (minSize - %%currentAlignment%%) %%minSerializeTrailing%%;
    }
            </template>                
            <template kind="arraySequence" typeKind="user">
    {
        int i;
        unsigned int minSize = %%currentAlignment%%;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); i++) {
            minSize += %%sequenceSizeMethod%%(
                minSize, 0,
                %%elementSizeMethod%%,RTI_FALSE,encapsulation_id,endpoint_data);
        }

        %%minSerializeLeading%% (minSize - %%currentAlignment%%) %%minSerializeTrailing%%;
    }
            </template>                            
            <template kind="arraySequence" typeKind="builtin">
    {
        int i;
        unsigned int minSize = %%currentAlignment%%;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); i++) {
            minSize += %%sequenceSizeMethod%%(
                minSize, 0, %%typeEnum%%);
        }

        %%minSerializeLeading%% (minSize - %%currentAlignment%%) %%minSerializeTrailing%%;
    }
            </template>                                                    
            <template kind="bitfield" bitKind="normal">
    %%minSerializeLeading%% RTICdrType_getBitsMaxSizeSerialized(
        current_alignment, &amp;current_bits, %%bits%%);
            </template>
            <template kind="bitfield" bitKind="lastBitField">
    %%minSerializeLeading%% RTICdrType_getBitsMaxSizeSerialized(
        current_alignment, &amp;current_bits, %%bits%%);
    %%minSerializeLeading%% RTICdrType_flushBitsMaxSizeSerialized(
        current_alignment, &amp;current_bits);
            </template>
        </method>
        
    <!-- ======================= get_min_size_deserialized ================== -->

        <method kind="get_min_size_deserialized">
            <template kind="scalar" typeKind="builtin">
        %%minDeserializeLeading%% 0 %%minDeserializeTrailing%%;
            </template>
            <template kind="scalar" typeKind="builtin" pointer="yes">
        %%minDeserializeLeading%% 
                  ((unsigned int)
                      RTIOsapiAlignment_alignSizeUp(
                          %%currentAlignment%%,%%elementSize%%)) + 
                  %%elementSize%% - %%currentAlignment%% %%minDeserializeTrailing%%;
            </template>
            <template kind="scalar" typeKind="user">
        %%minDeserializeLeading%% 
            %%elementSizeMethod%%(endpoint_data,%%currentAlignment%%,RTI_TRUE)%%minDeserializeTrailing%%;
            </template>
            <template kind="scalar" typeKind="user" pointer="yes">
        {
            unsigned int tmpSize;

            tmpSize = ((unsigned int)
               RTIOsapiAlignment_alignSizeUp(
                   %%currentAlignment%%,8)) + 
               %%elementSize%%;
            tmpSize += %%elementSizeMethod%%(endpoint_data,tmpSize,RTI_TRUE);
            tmpSize -= %%currentAlignment%%;
            
            %%minDeserializeLeading%% tmpSize %%minDeserializeTrailing%%;
        }
            </template>
            <template kind="string">
        %%minDeserializeLeading%% 1 %%minDeserializeTrailing%%;
            </template>
            <template kind="string" pointer="yes">
        %%minDeserializeLeading%% ((unsigned int)
               RTIOsapiAlignment_alignSizeUp(
                   %%currentAlignment%%,sizeof(char *))) + 
               sizeof(char *) + 1 - %%currentAlignment%% %%minDeserializeTrailing%%;
            </template>
            <template kind="wstring">
        %%minDeserializeLeading%% 
            ((unsigned int)
               RTIOsapiAlignment_alignSizeUp(
                   %%currentAlignment%%,RTI_CDR_WCHAR_SIZE)) + 
                   RTI_CDR_WCHAR_SIZE - 
                   %%currentAlignment%% %%minDeserializeTrailing%%;
            </template>
            <template kind="wstring" pointer="yes">
       {
           unsigned int tmpSize;
           
           tmpSize = ((unsigned int)
           RTIOsapiAlignment_alignSizeUp(
               %%currentAlignment%%,sizeof(char *))) + 
               sizeof(char *);

           %%minDeserializeLeading%% 
                 (((unsigned int)
                      RTIOsapiAlignment_alignSizeUp(
                          tmpSize,RTI_CDR_WCHAR_SIZE)) + 
                      RTI_CDR_WCHAR_SIZE - 
                      %%currentAlignment%%) %%minDeserializeTrailing%%;
        }
            </template>
            <template kind="sequence" typeKind="builtin">
        %%minDeserializeLeading%% 0 %%minDeserializeTrailing%%;
            </template>
            <template kind="sequence" typeKind="user" type="string"/>
            <template kind="sequence" typeKind="user" type="wstring"/>
            <template kind="sequence" typeKind="user">
        %%minDeserializeLeading%% 0 %%minDeserializeTrailing%%;
            </template>
        </method>

    <!-- =========================== skip_and_get_deserialized_length =============== -->

        <method kind="skip_and_get_deserialized_length">
            <template kind="scalar" typeKind="builtin">
    if (!%%elementSkipMethod%%(stream)) {
        %%deserializationErrorHandling%%;
    }
            </template>
            <template kind="scalar" typeKind="builtin" pointer="yes">
    if (!%%elementSkipMethod%%(stream)) {
        %%deserializationErrorHandling%%;
    }
            </template>
            <template kind="scalar" typeKind="user">
    {
        unsigned int tmpSize;
        
        if (!%%elementGetDeserializedLengthMethod%%(
                endpoint_data,
                &amp;tmpSize, 
                RTI_FALSE, RTI_TRUE, 
                %%currentAlignment%%,RTI_TRUE,stream,
                endpoint_plugin_qos)) {
            %%deserializationErrorHandling%%;
        }
        
        %%currentAlignment%% += tmpSize;
    }
            </template>
            <template kind="scalar" typeKind="user" pointer="yes">
    {
        unsigned int tmpSize;
        
        if (!%%elementGetDeserializedLengthMethod%%(
                endpoint_data,
                &amp;tmpSize, 
                RTI_FALSE, RTI_TRUE, 
                %%currentAlignment%%,RTI_TRUE,stream,
                endpoint_plugin_qos)) {
            %%deserializationErrorHandling%%;
        }
        
        %%currentAlignment%% += tmpSize;
    }
            </template>
            <template kind="string">
    {
        unsigned int strSize;
        if (!RTICdrStream_skipStringAndGetLength(
               stream, %%stringMaxLength%% + 1, &amp;strSize)) {
            %%deserializationErrorHandling%%;
        }
        
        %%currentAlignment%% += (strSize);
    }
            </template>
            <template kind="string" pointer="yes">
    {
        unsigned int strSize;
        if (!RTICdrStream_skipStringAndGetLength(
               stream, %%stringMaxLength%% + 1, &amp;strSize)) {
            %%deserializationErrorHandling%%;
        }
        
        %%currentAlignment%% += strSize;
    }
            </template>
            <template kind="wstring">
    {
        unsigned int strSize;
        
        if (!RTICdrStream_skipWstringAndGetLength(
               stream, %%stringMaxLength%% + 1, &amp;strSize)) {
            %%deserializationErrorHandling%%;
        }
        
        %%currentAlignment%% = 
            ((unsigned int)
                RTIOsapiAlignment_alignSizeUp(
                    %%currentAlignment%%,RTI_CDR_WCHAR_SIZE)) + strSize;
    }
            </template>
            <template kind="wstring" pointer="yes">
    {
        unsigned int strSize;
        
        if (!RTICdrStream_skipWstringAndGetLength(
               stream, %%stringMaxLength%% + 1, &amp;strSize)) {
            %%deserializationErrorHandling%%;
        }
        
        %%currentAlignment%% = 
            ((unsigned int)
                RTIOsapiAlignment_alignSizeUp(
                    %%currentAlignment%%,RTI_CDR_WCHAR_SIZE)) + strSize;
    }
            </template>
            <template kind="sequence" typeKind="builtin">
    {
        RTICdrUnsignedLong sequence_length;

        if (!%%sequenceSkipMethod%%(
            stream,
            &amp;sequence_length,
            %%typeEnum%%)) {
            %%deserializationErrorHandling%%;
        }

        if (sequence_length != 0) {
            %%currentAlignment%% =
                ((unsigned int)
                    RTIOsapiAlignment_alignSizeUp(
                        %%currentAlignment%%,%%elementSize%%) + 
                    %%elementSize%% * sequence_length);
        }
    }
            </template>
            <template kind="sequence" typeKind="user" type="string"/>
            <template kind="sequence" typeKind="user" type="wstring"/>
            <template kind="sequence" typeKind="user">
    {
        unsigned int tmpSize;
        
        if (!RTICdrStream_getNonPrimitiveSequenceDeserializedSize(
                endpoint_data,
                &amp;tmpSize,
                (RTICdrTypeGetDeserializedSampleSizeFunction)
                %%elementGetDeserializedLengthMethod%%,
                %%elementSize%%,
                %%currentAlignment%%,
                stream,
                endpoint_plugin_qos)) {
            %%deserializationErrorHandling%%;
        }
        
        %%currentAlignment%% += tmpSize;
    }
            </template>
        </method>

    <!-- =========================== union_skip_and_get_deserialized_length =============== -->
    
        <method kind="union_skip_and_get_deserialized_length">
            <template kind="scalar" typeKind="builtin">
    if (!%%elementSkipMethod%%(stream)) {
        %%deserializationErrorHandling%%;
    }
            </template>
            <template kind="scalar" typeKind="builtin" pointer="yes">
    if (!%%elementSkipMethod%%(stream)) {
        %%deserializationErrorHandling%%;
    }
    
    %%currentAlignment%% =
        ((unsigned int)
            RTIOsapiAlignment_alignSizeUp(
                %%currentAlignment%%,%%elementSize%%)) + 
                %%elementSize%%;
            </template>
            <template kind="scalar" typeKind="user">
    {
        unsigned int tmpSize;
        
        if (!%%elementGetDeserializedLengthMethod%%(
                endpoint_data,
                &amp;tmpSize, 
                RTI_FALSE, RTI_TRUE, 
                %%currentAlignment%%,RTI_TRUE,stream,
                endpoint_plugin_qos)) {
            %%deserializationErrorHandling%%;
        }
        
        %%currentAlignment%% += tmpSize;
    }
            </template>
            <template kind="scalar" typeKind="user" pointer="yes">
    {
        unsigned int tmpSize;
        
        %%currentAlignment%%=
            ((unsigned int)
               RTIOsapiAlignment_alignSizeUp(
                   %%currentAlignment%%,8)) + 
               %%elementSize%%;
        
        if (!%%elementGetDeserializedLengthMethod%%(
                endpoint_data,
                &amp;tmpSize, 
                RTI_FALSE, RTI_TRUE, 
                %%currentAlignment%%,RTI_TRUE,stream,
                endpoint_plugin_qos)) {
            %%deserializationErrorHandling%%;
        }
        
        %%currentAlignment%% += tmpSize;
    }
            </template>
            <template kind="string">
    {
        unsigned int strSize;
        if (!RTICdrStream_skipStringAndGetLength(
               stream, %%stringMaxLength%% + 1, &amp;strSize)) {
            %%deserializationErrorHandling%%;
        }

        %%currentAlignment%% += (strSize);
    }
            </template>
            <template kind="string" pointer="yes">
    {
        unsigned int strSize;
        
        if (!RTICdrStream_skipStringAndGetLength(
               stream, %%stringMaxLength%% + 1, &amp;strSize)) {
            %%deserializationErrorHandling%%;
        }

        %%currentAlignment%%=((unsigned int)
               RTIOsapiAlignment_alignSizeUp(
                   %%currentAlignment%%,sizeof(char *))) + sizeof(char *);
        
        %%currentAlignment%% += strSize;
    }
            </template>
            <template kind="wstring">
    {
        unsigned int strSize;
        
        if (!RTICdrStream_skipWstringAndGetLength(
               stream, %%stringMaxLength%% + 1, &amp;strSize)) {
            %%deserializationErrorHandling%%;
        }
        
        %%currentAlignment%% = 
            ((unsigned int)
                RTIOsapiAlignment_alignSizeUp(
                    %%currentAlignment%%,RTI_CDR_WCHAR_SIZE)) + strSize;
    }
            </template>
            <template kind="wstring" pointer="yes">
    {
        unsigned int strSize;
        
        if (!RTICdrStream_skipWstringAndGetLength(
               stream, %%stringMaxLength%% + 1, &amp;strSize)) {
            %%deserializationErrorHandling%%;
        }
        
        %%currentAlignment%% = ((unsigned int)
               RTIOsapiAlignment_alignSizeUp(
                   %%currentAlignment%%,sizeof(char *))) + 
               sizeof(char *);
        
        %%currentAlignment%% = 
            ((unsigned int)
                RTIOsapiAlignment_alignSizeUp(
                    %%currentAlignment%%,RTI_CDR_WCHAR_SIZE)) + strSize;
    }
            </template>
            <template kind="sequence" typeKind="builtin">
    {
        RTICdrUnsignedLong sequence_length;

        if (!%%sequenceSkipMethod%%(
            stream,
            &amp;sequence_length,
            %%typeEnum%%)) {
            %%deserializationErrorHandling%%;
        }

        if (sequence_length != 0) {
            %%currentAlignment%% =
                ((unsigned int)
                    RTIOsapiAlignment_alignSizeUp(
                        %%currentAlignment%%,%%elementSize%%) + 
                    %%elementSize%% * sequence_length);
        }
    }
            </template>
            <template kind="sequence" typeKind="user" type="string"/>
            <template kind="sequence" typeKind="user" type="wstring"/>
            <template kind="sequence" typeKind="user">
    {
        unsigned int tmpSize;
        
        if (!RTICdrStream_getNonPrimitiveSequenceDeserializedSize(
                endpoint_data,
                &amp;tmpSize,
                (RTICdrTypeGetDeserializedSampleSizeFunction)
                %%elementGetDeserializedLengthMethod%%,
                %%elementSize%%,
                %%currentAlignment%%,
                stream,
                endpoint_plugin_qos)) {
            %%deserializationErrorHandling%%;
        }
        
        %%currentAlignment%% += tmpSize;
    }
            </template>
        </method>
        
    <!-- ======================= initialize_des_buffer ==================== -->

        <method kind="initialize_des_buffer">
            <template kind="scalar" typeKind="builtin"/>
            <template kind="scalar" typeKind="builtin" pointer="yes">
    if (%%sampleAccessPointer%%%%name%% == NULL) {
        %%sampleAccessPointer%%%%name%% = (%%nativeType%% *) REDABufferManager_getBuffer(
            buffer_manager, %%elementSize%%, %%elementSize%%);
        if (%%sampleAccessPointer%%%%name%% == NULL) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="scalar" typeKind="user">
    if (!%%elementInitDesBufferMethod%%(
            endpoint_data,
            (%%nativeType%% *) (%%sampleAccessPointer%%%%name%%), 
            buffer_manager,
            endpoint_plugin_qos)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="scalar" typeKind="user" pointer="yes">
    if (%%sampleAccessPointer%%%%name%% == NULL) {
        %%sampleAccessPointer%%%%name%% = (%%nativeType%% *) REDABufferManager_getBuffer(
            buffer_manager, %%elementSize%%, 8);
        if (%%sampleAccessPointer%%%%name%% == NULL) {
            return RTI_FALSE;
        }
        if (!%%elementInitDesBufferMethod%%(
                endpoint_data,
                (%%nativeType%% *) (%%sampleAccessPointer%%%%name%%), 
                buffer_manager,
                endpoint_plugin_qos)) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="string">
    if (%%sampleAccess%%%%name%% == NULL) {
        %%sampleAccess%%%%name%% = (char *) REDABufferManager_getBuffer(
            buffer_manager, 1, RTI_CDR_CHAR_SIZE);
        if (%%sampleAccess%%%%name%% == NULL) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="string" pointer="yes">
    if (%%sampleAccessPointer%%%%name%% == NULL) {
        %%sampleAccessPointer%%%%name%% = (char **) REDABufferManager_getBuffer(
            buffer_manager, sizeof(char *), sizeof(char *));
        if (%%sampleAccessPointer%%%%name%% == NULL) {
            return RTI_FALSE;
        }
    
        %%sampleAccess%%%%name%% = (char *) REDABufferManager_getBuffer(
            buffer_manager, 1, RTI_CDR_CHAR_SIZE);
        if (%%sampleAccess%%%%name%% == NULL) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="wstring">
    if (%%sampleAccess%%%%name%% == NULL) {
        %%sampleAccess%%%%name%% = (DDS_Wchar *) REDABufferManager_getBuffer(
            buffer_manager, RTI_CDR_CHAR_SIZE, RTI_CDR_WCHAR_SIZE);
        if (%%sampleAccess%%%%name%% == NULL) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="wstring" pointer="yes">
    if (%%sampleAccessPointer%%%%name%% == NULL) {
        %%sampleAccessPointer%%%%name%% = (DDS_Wchar **) REDABufferManager_getBuffer(
            buffer_manager, sizeof(DDS_Wchar **), sizeof(DDS_Wchar **));
        if (%%sampleAccessPointer%%%%name%% == NULL) {
            return RTI_FALSE;
        }
    
        %%sampleAccess%%%%name%% = (DDS_Wchar *) REDABufferManager_getBuffer(
            buffer_manager, RTI_CDR_WCHAR_SIZE, RTI_CDR_WCHAR_SIZE);
        if (%%sampleAccess%%%%name%% == NULL) {
            return RTI_FALSE;
        } 
    }
            </template>
            <template kind="sequence" typeKind="builtin"/>
            <template kind="sequence" typeKind="user" type="string"/>
            <template kind="sequence" typeKind="user" type="wstring"/>
            <template kind="sequence" typeKind="user"/>
        </method>

    <!-- ======================= initialize_des_buffer_from_stream ==================== -->

        <method kind="initialize_des_buffer_from_stream">
            <template kind="scalar" typeKind="builtin">
    if (!%%elementSkipMethod%%(stream)) {
        %%deserializationErrorHandling%%;
    }
            </template>
            <template kind="scalar" typeKind="builtin" pointer="yes">
    if (!%%elementSkipMethod%%(stream)) {
        %%deserializationErrorHandling%%;
    }
            </template>
            <template kind="scalar" typeKind="user">
    if (!%%elementInitDesBufferFromStreamMethod%%(
            endpoint_data,
            (%%nativeType%% *) (%%sampleAccessPointer%%%%name%%), 
            RTI_FALSE, RTI_TRUE, 
            buffer_manager, stream,
            endpoint_plugin_qos)) {
        %%deserializationErrorHandling%%;
    }
            </template>
            <template kind="scalar" typeKind="user" pointer="yes">
    if (!%%elementInitDesBufferFromStreamMethod%%(
            endpoint_data,
            (%%nativeType%% *) (%%sampleAccessPointer%%%%name%%), 
            RTI_FALSE, RTI_TRUE, 
            buffer_manager, stream,
            endpoint_plugin_qos)) {
        %%deserializationErrorHandling%%;
    }
            </template>
            <template kind="string">
    {
        unsigned int strSize;
        if (!RTICdrStream_skipStringAndGetLength(
               stream, %%stringMaxLength%% + 1, &amp;strSize)) {
            %%deserializationErrorHandling%%;
        }
        
        %%sampleAccess%%%%name%% = (char *) REDABufferManager_getBuffer(
            buffer_manager, strSize, RTI_CDR_CHAR_SIZE);
        if (%%sampleAccess%%%%name%% == NULL) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="string" pointer="yes">
    {
        unsigned int strSize;
        if (!RTICdrStream_skipStringAndGetLength(
               stream, %%stringMaxLength%% + 1, &amp;strSize)) {
            %%deserializationErrorHandling%%;
        }
    
        %%sampleAccess%%%%name%% = (char *) REDABufferManager_getBuffer(
            buffer_manager, strSize, RTI_CDR_CHAR_SIZE);
        if (%%sampleAccess%%%%name%% == NULL) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="wstring">
    {
        unsigned int strSize;
        
        if (!RTICdrStream_skipWstringAndGetLength(
               stream, %%stringMaxLength%% + 1, &amp;strSize)) {
            %%deserializationErrorHandling%%;
        }
        
        %%sampleAccess%%%%name%% = (DDS_Wchar *) REDABufferManager_getBuffer(
            buffer_manager, strSize, RTI_CDR_WCHAR_SIZE);
        if (%%sampleAccess%%%%name%% == NULL) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="wstring" pointer="yes">
    {
        unsigned int strSize;
        
        if (!RTICdrStream_skipWstringAndGetLength(
               stream, %%stringMaxLength%% + 1, &amp;strSize)) {
            %%deserializationErrorHandling%%;
        }
        
        %%sampleAccess%%%%name%% = (DDS_Wchar *) REDABufferManager_getBuffer(
            buffer_manager, strSize, RTI_CDR_WCHAR_SIZE);
        if (%%sampleAccess%%%%name%% == NULL) {
            return RTI_FALSE;
        } 
    }
            </template>
            <template kind="sequence" typeKind="builtin">
    {
        RTICdrUnsignedLong sequence_length;
        char * buffer;

        if (!%%sequenceSkipMethod%%(
            stream,
            &amp;sequence_length,
            %%typeEnum%%)) {
            %%deserializationErrorHandling%%;
        }

        if (sequence_length != 0) {
            buffer = REDABufferManager_getBuffer(
                buffer_manager, 
                sequence_length*%%elementSize%%, 
                %%elementSize%%); 
            if (buffer == NULL) {
                return RTI_FALSE;
            }  
            
            if (!%%nativeTypeSeq%%_loan_contiguous(
                    %%sampleAccessPointer%%%%name%%,
                    (%%nativeType%% *) buffer, sequence_length, sequence_length)) {
                return RTI_FALSE;
            }
        }
    }
            </template>
            <template kind="sequence" typeKind="user" type="string"/>
            <template kind="sequence" typeKind="user" type="wstring"/>
            <template kind="sequence" typeKind="user">
    {
        char * buffer;
        RTICdrUnsignedLong sequence_length;
        
        if (!RTICdrStream_initializeDesBufferPointersFromStreamInNonPrimitiveSeq(
                endpoint_data,
                (void **)&amp;buffer,
                &amp;sequence_length,
                (RTICdrTypeInitializeDeserializationBufferPointersFromStream)
                %%elementInitDesBufferFromStreamMethod%%,
                %%elementSize%%,
                buffer_manager,
                stream,
                endpoint_plugin_qos)) {
            %%deserializationErrorHandling%%;
        }
        
        if (!%%nativeTypeSeq%%_loan_contiguous(
            %%sampleAccessPointer%%%%name%%,
            (%%nativeType%% *) buffer, sequence_length, sequence_length)) {
            return RTI_FALSE;
        }
    }
            </template>
        </method>

    <!-- ======================= union_initialize_des_buffer_from_stream ==================== -->

        <method kind="union_initialize_des_buffer_from_stream">
            <template kind="scalar" typeKind="builtin">
    if (!%%elementSkipMethod%%(stream)) {
        %%deserializationErrorHandling%%;
    }
            </template>
            <template kind="scalar" typeKind="builtin" pointer="yes">
    if (!%%elementSkipMethod%%(stream)) {
        %%deserializationErrorHandling%%;
    }

    %%sampleAccessPointer%%%%name%% = (%%nativeType%% *) REDABufferManager_getBuffer(
        buffer_manager, %%elementSize%%, %%elementSize%%);
    if (%%sampleAccessPointer%%%%name%% == NULL) {
        return RTI_FALSE;
    }
            </template>
            <template kind="scalar" typeKind="user">
    if (!%%elementInitDesBufferFromStreamMethod%%(
            endpoint_data,
            (%%nativeType%% *) (%%sampleAccessPointer%%%%name%%), 
            RTI_FALSE, RTI_TRUE, 
            buffer_manager, stream,
            endpoint_plugin_qos)) {
        %%deserializationErrorHandling%%;
    }
            </template>
            <template kind="scalar" typeKind="user" pointer="yes">
    %%sampleAccessPointer%%%%name%% = (%%nativeType%% *) REDABufferManager_getBuffer(
        buffer_manager, %%elementSize%%, 8);
    if (%%sampleAccessPointer%%%%name%% == NULL) {
        return RTI_FALSE;
    }

    if (!%%elementInitDesBufferFromStreamMethod%%(
            endpoint_data,
            (%%nativeType%% *) (%%sampleAccessPointer%%%%name%%), 
            RTI_FALSE, RTI_TRUE, 
            buffer_manager, stream,
            endpoint_plugin_qos)) {
        %%deserializationErrorHandling%%;
    }
            </template>
            <template kind="string">
    {
        unsigned int strSize;
        if (!RTICdrStream_skipStringAndGetLength(
               stream, %%stringMaxLength%% + 1, &amp;strSize)) {
            %%deserializationErrorHandling%%;
        }
        
        %%sampleAccess%%%%name%% = (char *) REDABufferManager_getBuffer(
            buffer_manager, strSize, RTI_CDR_CHAR_SIZE);
        if (%%sampleAccess%%%%name%% == NULL) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="string" pointer="yes">
    {
        unsigned int strSize;
        if (!RTICdrStream_skipStringAndGetLength(
               stream, %%stringMaxLength%% + 1, &amp;strSize)) {
            %%deserializationErrorHandling%%;
        }
    
        %%sampleAccessPointer%%%%name%% = (char **) REDABufferManager_getBuffer(
            buffer_manager, sizeof(char *), sizeof(char *));
        if (%%sampleAccessPointer%%%%name%% == NULL) {
            return RTI_FALSE;
        }

        %%sampleAccess%%%%name%% = (char *) REDABufferManager_getBuffer(
            buffer_manager, strSize, RTI_CDR_CHAR_SIZE);
        if (%%sampleAccess%%%%name%% == NULL) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="wstring">
    {
        unsigned int strSize;
        
        if (!RTICdrStream_skipWstringAndGetLength(
               stream, %%stringMaxLength%% + 1, &amp;strSize)) {
            %%deserializationErrorHandling%%;
        }
        
        %%sampleAccess%%%%name%% = (DDS_Wchar *) REDABufferManager_getBuffer(
            buffer_manager, strSize, RTI_CDR_WCHAR_SIZE);
        if (%%sampleAccess%%%%name%% == NULL) {
            return RTI_FALSE;
        }
    }
            </template>
            <template kind="wstring" pointer="yes">
    {
        unsigned int strSize;
        
        if (!RTICdrStream_skipWstringAndGetLength(
               stream, %%stringMaxLength%% + 1, &amp;strSize)) {
            %%deserializationErrorHandling%%;
        }

        %%sampleAccessPointer%%%%name%% = (DDS_Wchar **) REDABufferManager_getBuffer(
            buffer_manager, sizeof(DDS_Wchar **), sizeof(DDS_Wchar **));
        if (%%sampleAccessPointer%%%%name%% == NULL) {
            return RTI_FALSE;
        }
        
        %%sampleAccess%%%%name%% = (DDS_Wchar *) REDABufferManager_getBuffer(
            buffer_manager, strSize, RTI_CDR_WCHAR_SIZE);
        if (%%sampleAccess%%%%name%% == NULL) {
            return RTI_FALSE;
        } 
    }
            </template>
            <template kind="sequence" typeKind="builtin">
    {
        RTICdrUnsignedLong sequence_length;
        char * buffer;

        if (!%%sequenceSkipMethod%%(
            stream,
            &amp;sequence_length,
            %%typeEnum%%)) {
            %%deserializationErrorHandling%%;
        }

        if (sequence_length != 0) {
            buffer = REDABufferManager_getBuffer(
                buffer_manager, 
                sequence_length*%%elementSize%%, 
                %%elementSize%%); 
            if (buffer == NULL) {
                return RTI_FALSE;
            }  
            
            if (!%%nativeTypeSeq%%_loan_contiguous(
                    %%sampleAccessPointer%%%%name%%,
                    (%%nativeType%% *) buffer, sequence_length, sequence_length)) {
                return RTI_FALSE;
            }
        }
    }
            </template>
            <template kind="sequence" typeKind="user" type="string"/>
            <template kind="sequence" typeKind="user" type="wstring"/>
            <template kind="sequence" typeKind="user">
    {
        char * buffer;
        RTICdrUnsignedLong sequence_length;
        
        if (!RTICdrStream_initializeDesBufferPointersFromStreamInNonPrimitiveSeq(
                endpoint_data,
                (void **)&amp;buffer,
                &amp;sequence_length,
                (RTICdrTypeInitializeDeserializationBufferPointersFromStream)
                %%elementInitDesBufferFromStreamMethod%%,
                %%elementSize%%,
                buffer_manager,
                stream,
                endpoint_plugin_qos)) {
            %%deserializationErrorHandling%%;
        }
        
        if (!%%nativeTypeSeq%%_loan_contiguous(
            %%sampleAccessPointer%%%%name%%,
            (%%nativeType%% *) buffer, sequence_length, sequence_length)) {
            return RTI_FALSE;
        }
    }
            </template>
        </method>

    <!-- ======================= initialize_des_buffer_from_sample ==================== -->

        <method kind="initialize_des_buffer_from_sample">
            <template kind="scalar" typeKind="builtin"/>
            <template kind="scalar" typeKind="builtin" pointer="yes">
    %%dstAccessPointer%%%%name%% = (%%nativeType%% *) REDABufferManager_getBuffer(
        buffer_manager, %%elementSize%%, %%elementSize%%);
    if (%%dstAccessPointer%%%%name%% == NULL) {
        return RTI_FALSE;
    }
            </template>
            <template kind="scalar" typeKind="user">
    if (!%%elementInitDesBufferFromSampleMethod%%(
            endpoint_data,
            %%dstAccessPointer%%%%name%%, 
            buffer_manager,
            %%srcAccessPointer%%%%name%%)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="scalar" typeKind="user" pointer="yes">
    %%dstAccessPointer%%%%name%% = (%%nativeType%% *) REDABufferManager_getBuffer(
        buffer_manager, %%elementSize%%, 8);
    if (%%dstAccessPointer%%%%name%% == NULL) {
        return RTI_FALSE;
    }

    if (!%%elementInitDesBufferFromSampleMethod%%(
            endpoint_data,
            %%dstAccessPointer%%%%name%%, 
            buffer_manager,
            %%srcAccessPointer%%%%name%%)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="string">
    %%dstAccess%%%%name%% = (char *) REDABufferManager_getBuffer(
        buffer_manager, strlen(%%srcAccess%%%%name%%) + 1, RTI_CDR_CHAR_SIZE);
    if (%%dstAccess%%%%name%% == NULL) {
        return RTI_FALSE;
    }
            </template> 
            <template kind="string" pointer="yes">
    %%dstAccessPointer%%%%name%% = (char **) REDABufferManager_getBuffer(
        buffer_manager, sizeof(char *), sizeof(char *));
    if (%%dstAccessPointer%%%%name%% == NULL) {
        return RTI_FALSE;
    }
    
    %%dstAccess%%%%name%% = (char *) REDABufferManager_getBuffer(
        buffer_manager, strlen(%%srcAccess%%%%name%%) + 1, RTI_CDR_CHAR_SIZE);
    if (%%dstAccess%%%%name%% == NULL) {
        return RTI_FALSE;
    }
            </template> 
            <template kind="wstring">
    %%dstAccess%%%%name%% = (DDS_Wchar *) REDABufferManager_getBuffer(
        buffer_manager, 
        (RTICdrType_getWstringLength((const RTICdrWchar *)%%srcAccess%%%%name%%) + 1)*RTI_CDR_WCHAR_SIZE, 
        RTI_CDR_WCHAR_SIZE);
    if (%%dstAccess%%%%name%% == NULL) {
        return RTI_FALSE;
    }
            </template>
            <template kind="wstring" pointer="yes">
    %%dstAccessPointer%%%%name%% = (DDS_Wchar **) REDABufferManager_getBuffer(
        buffer_manager, sizeof(DDS_Wchar *), sizeof(DDS_Wchar *));
    if (%%dstAccessPointer%%%%name%% == NULL) {
        return RTI_FALSE;
    }
        
    %%dstAccess%%%%name%% = (DDS_Wchar *) REDABufferManager_getBuffer(
        buffer_manager, 
        (RTICdrType_getWstringLength((const RTICdrWchar *)%%srcAccess%%%%name%%) + 1)*RTI_CDR_WCHAR_SIZE, 
        RTI_CDR_WCHAR_SIZE);
    if (%%dstAccess%%%%name%% == NULL) {
        return RTI_FALSE;
    }
            </template>
            <template kind="sequence" typeKind="builtin">
    {
        char * buffer;
        RTICdrUnsignedLong sequence_length;
        
        sequence_length = %%nativeTypeSeq%%_get_length(%%srcAccessPointer%%%%name%%);

        if (sequence_length != 0) {
            buffer = REDABufferManager_getBuffer(
                buffer_manager, 
                sequence_length*%%elementSize%%, 
                %%elementSize%%); 
            if (buffer == NULL) {
                return RTI_FALSE;
            }  

            if (!%%nativeTypeSeq%%_loan_contiguous(
                    %%dstAccessPointer%%%%name%%,
                    (%%nativeType%% *) buffer, 
                    sequence_length, sequence_length)) {
                return RTI_FALSE;
            }
        }
    }
            </template>
            <template kind="sequence" typeKind="user" type="string"/>
            <template kind="sequence" typeKind="user" type="wstring"/>
            <template kind="sequence" typeKind="user">
    {
        char * buffer;
        RTICdrUnsignedLong sequence_length;

        sequence_length = %%nativeTypeSeq%%_get_length(%%srcAccessPointer%%%%name%%);
        
        if (!RTICdrStream_initializeDesBufferPointersFromSampleInNonPrimitiveSeq(
                endpoint_data,
                (void **)&amp;buffer,
                %%nativeTypeSeq%%_get_contiguous_bufferI(%%srcAccessPointer%%%%name%%),
                sequence_length,
                (RTICdrTypeInitializeDeserializationBufferPointersFromSample)
                %%elementInitDesBufferFromSampleMethod%%,
                %%elementSize%%,
                buffer_manager)) {
            return RTI_FALSE;
        }
        
        if (!%%nativeTypeSeq%%_loan_contiguous(
            %%dstAccessPointer%%%%name%%,
            (%%nativeType%% *) buffer, sequence_length, sequence_length)) {
            return RTI_FALSE;
        }
    }
            </template>
        </method>

    <!-- ======================= get_max_size_serialized ================== -->

        <method kind="get_max_size_serialized">
            <template kind="scalar" typeKind="builtin">
    %%maxSerializeLeading%% %%elementSizeMethod%%(
        %%currentAlignment%%)%%maxSerializeTrailing%%;
            </template>
            <template kind="scalar" typeKind="user">
    %%maxSerializeLeading%% %%elementSizeMethod%%(
        endpoint_data,RTI_FALSE,encapsulation_id,%%currentAlignment%%)%%maxSerializeTrailing%%;
            </template>
            <template kind="string">
    %%maxSerializeLeading%% RTICdrType_getStringMaxSizeSerialized(
        %%currentAlignment%%, %%stringMaxLength%% + 1)%%maxSerializeTrailing%%;
            </template>
            <template kind="wstring">
    %%maxSerializeLeading%% RTICdrType_getWstringMaxSizeSerialized(
        %%currentAlignment%%, %%stringMaxLength%% + 1)%%maxSerializeTrailing%%;
            </template>
            <template kind="array" typeKind="builtin">
    %%maxSerializeLeading%% %%arraySizeMethod%%(
        %%currentAlignment%%, %%multiDimensionalArraySize%%, %%typeEnum%%)%%maxSerializeTrailing%%;
            </template>
            <template kind="array" typeKind="user" type="string">                
    %%maxSerializeLeading%% RTICdrType_getStringArrayMaxSizeSerialized(
        %%currentAlignment%%,%%multiDimensionalArraySize%%,%%stringMaxLength%% + 1,RTI_CDR_CHAR_TYPE)%%maxSerializeTrailing%%;                                
            </template>
            <template kind="array" typeKind="user" type="wstring">                
    %%maxSerializeLeading%% RTICdrType_getStringArrayMaxSizeSerialized(
        %%currentAlignment%%,%%multiDimensionalArraySize%%,%%stringMaxLength%% + 1,RTI_CDR_WCHAR_TYPE)%%maxSerializeTrailing%%;                                                
            </template>            
            <template kind="array" typeKind="user">
    %%maxSerializeLeading%% %%arraySizeMethod%%(
        %%currentAlignment%%, %%multiDimensionalArraySize%%,
        %%elementSizeMethod%%,RTI_FALSE,encapsulation_id,endpoint_data)%%maxSerializeTrailing%%;
            </template>
            <template kind="sequence" typeKind="builtin">
    %%maxSerializeLeading%% %%sequenceSizeMethod%%(
        %%currentAlignment%%, %%sequenceMaxLength%%, %%typeEnum%%)%%maxSerializeTrailing%%;
            </template>
            <template kind="sequence" typeKind="user" type="string">
    %%maxSerializeLeading%% RTICdrType_getStringSequenceMaxSizeSerialized(
        %%currentAlignment%%,%%sequenceMaxLength%%,%%stringMaxLength%% + 1,RTI_CDR_CHAR_TYPE)%%maxSerializeTrailing%%;                
            </template>
            <template kind="sequence" typeKind="user" type="wstring">
    %%maxSerializeLeading%% RTICdrType_getStringSequenceMaxSizeSerialized(
        %%currentAlignment%%,%%sequenceMaxLength%%,%%stringMaxLength%% + 1,RTI_CDR_WCHAR_TYPE)%%maxSerializeTrailing%%;                                
            </template>                        
            <template kind="sequence" typeKind="user">
    %%maxSerializeLeading%% %%sequenceSizeMethod%%(
        %%currentAlignment%%, %%sequenceMaxLength%%,
        %%elementSizeMethod%%,RTI_FALSE,encapsulation_id,endpoint_data)%%maxSerializeTrailing%%;
            </template>
            <template kind="arraySequence" typeKind="user" type="string">
    {
        int i;
        unsigned int maxSize = %%currentAlignment%%;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); i++) {
            maxSize += RTICdrType_getStringSequenceMaxSizeSerialized(
                maxSize,%%sequenceMaxLength%%,%%stringMaxLength%% + 1,RTI_CDR_CHAR_TYPE);
        }

        %%maxSerializeLeading%% (maxSize - %%currentAlignment%%) %%maxSerializeTrailing%%;
    }
            </template>                
            <template kind="arraySequence" typeKind="user" type="wstring">
    {
        int i;
        unsigned int maxSize = %%currentAlignment%%;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); i++) {
            maxSize += RTICdrType_getStringSequenceMaxSizeSerialized(
                maxSize,%%sequenceMaxLength%%,%%stringMaxLength%% + 1,RTI_CDR_WCHAR_TYPE);
        }

        %%maxSerializeLeading%% (maxSize - %%currentAlignment%%) %%maxSerializeTrailing%%;
    }
            </template>                
            <template kind="arraySequence" typeKind="user">
    {
        int i;
        unsigned int maxSize = %%currentAlignment%%;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); i++) {
            maxSize += %%sequenceSizeMethod%%(
                maxSize, %%sequenceMaxLength%%,
                %%elementSizeMethod%%,RTI_FALSE,encapsulation_id,endpoint_data);
        }

        %%maxSerializeLeading%% (maxSize - %%currentAlignment%%) %%maxSerializeTrailing%%;
    }
            </template>                            
            <template kind="arraySequence" typeKind="builtin">
    {
        int i;
        unsigned int maxSize = %%currentAlignment%%;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); i++) {
            maxSize += %%sequenceSizeMethod%%(
                maxSize, %%sequenceMaxLength%%, %%typeEnum%%);
        }

        %%maxSerializeLeading%% (maxSize - %%currentAlignment%%) %%maxSerializeTrailing%%;
    }
            </template>                                                    
            <template kind="bitfield" bitKind="normal">
    %%maxSerializeLeading%% RTICdrType_getBitsMaxSizeSerialized(
        current_alignment, &amp;current_bits, %%bits%%);
            </template>
            <template kind="bitfield" bitKind="lastBitField">
    %%maxSerializeLeading%% RTICdrType_getBitsMaxSizeSerialized(
        current_alignment, &amp;current_bits, %%bits%%);
    %%maxSerializeLeading%% RTICdrType_flushBitsMaxSizeSerialized(
        current_alignment, &amp;current_bits);
            </template>
        </method>

    <!-- ============================== Print ========================= -->    

        <method kind="print">
            <template kind="scalar">
    %%elementPrintMethod%%(
        %%sampleAccessPointer%%%%name%%, "%%name%%", indent_level + 1);
            </template>
            <template kind="string">
    if (%%sampleAccessPointer%%%%name%%==NULL) {
        RTICdrType_printString(
            NULL, "%%name%%", indent_level + 1);                
    } else {
        RTICdrType_printString(
            %%sampleAccess%%%%name%%, "%%name%%", indent_level + 1);                
    }
            </template>
            <template kind="wstring">
    if (%%sampleAccessPointer%%%%name%%==NULL) {
        RTICdrType_printWstring(
            NULL,"%%name%%", indent_level + 1);
    } else {
        RTICdrType_printWstring(
            %%sampleAccess%%%%name%%,"%%name%%", indent_level + 1);    
    }
            </template>
            <template kind="array" typeKind="builtin">
    RTICdrType_printArray(
        %%sampleAccess%%%%name%%, %%multiDimensionalArraySize%%, %%elementSize%%,
        (RTICdrTypePrintFunction)%%elementPrintMethod%%,
        "%%name%%", indent_level + 1);
            </template>
            <template kind="array" typeKind="builtin" pointer="yes">
    RTICdrType_printPointerArray(
        %%sampleAccessPointer%%%%name%%, %%multiDimensionalArraySize%%,
        (RTICdrTypePrintFunction)%%elementPrintMethod%%,
        "%%name%%", indent_level + 1);                
            </template>            
            <template kind="array" typeKind="user" type="string">
    RTICdrType_printStringArray(
        %%sampleAccess%%%%name%%,
        %%multiDimensionalArraySize%%,
        "%%name%%", indent_level + 1,
        RTI_CDR_CHAR_TYPE);
            </template>
            <template kind="array" typeKind="user" type="string" pointer="yes">                
    RTICdrType_printStringPointerArray(
        %%sampleAccessPointer%%%%name%%,
        %%multiDimensionalArraySize%%,
        "%%name%%", indent_level + 1,
        RTI_CDR_CHAR_TYPE);
            </template>            
            <template kind="array" typeKind="user" type="wstring">
    RTICdrType_printStringArray(
        %%sampleAccess%%%%name%%,
        %%multiDimensionalArraySize%%,
        "%%name%%", indent_level + 1,
        RTI_CDR_WCHAR_TYPE);
            </template>
            <template kind="array" typeKind="user" type="wstring" pointer="yes">
    RTICdrType_printStringPointerArray(
        %%sampleAccessPointer%%%%name%%,
        %%multiDimensionalArraySize%%,
        "%%name%%", indent_level + 1,
        RTI_CDR_WCHAR_TYPE);
            </template>            
            <template kind="array" typeKind="user">
    RTICdrType_printArray(
        %%sampleAccess%%%%name%%, %%multiDimensionalArraySize%%, sizeof(%%nativeType%%),
        (RTICdrTypePrintFunction)%%elementPrintMethod%%,
        "%%name%%", indent_level + 1);
            </template>
            <template kind="array" typeKind="user" pointer="yes">
    RTICdrType_printPointerArray(%%sampleAccessPointer%%%%name%%,
        %%multiDimensionalArraySize%%,
        (RTICdrTypePrintFunction)%%elementPrintMethod%%,
        "%%name%%", indent_level + 1);
            </template>            
            <template kind="sequence" typeKind="builtin">
    if (%%sampleAccessPointer%%%%name%% == NULL) {
        RTICdrType_printIndent(indent_level+1);
        RTILog_debug("%%name%%: NULL\n");    
    } else {
    
        if (%%nativeTypeSeq%%_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%) != NULL) {
            RTICdrType_printArray(
                %%nativeTypeSeq%%_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%),
                %%nativeTypeSeq%%_get_length(%%sampleAccessPointer%%%%name%%),
                %%elementSize%%,
                (RTICdrTypePrintFunction)%%elementPrintMethod%%,
                "%%name%%", indent_level + 1);
        } else {
            RTICdrType_printPointerArray(
                %%nativeTypeSeq%%_get_discontiguous_bufferI(%%sampleAccessPointer%%%%name%%),
                %%nativeTypeSeq%%_get_length(%%sampleAccessPointer%%%%name%%),
               (RTICdrTypePrintFunction)%%elementPrintMethod%%,
               "%%name%%", indent_level + 1);
        }
    
    }
            </template>
            <template kind="sequence" typeKind="user" type="string">
    if (%%sampleAccessPointer%%%%name%% == NULL) {
        RTICdrType_printIndent(indent_level+1);
        RTILog_debug("%%name%%: NULL\n");    
    } else {
                
        if (DDS_StringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%) != NULL) {
            RTICdrType_printStringArray(
                DDS_StringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%),
                DDS_StringSeq_get_length(%%sampleAccessPointer%%%%name%%),
                "%%name%%", indent_level + 1,
                RTI_CDR_CHAR_TYPE);
        } else {
            RTICdrType_printStringPointerArray(
                DDS_StringSeq_get_discontiguous_bufferI(%%sampleAccessPointer%%%%name%%),
                DDS_StringSeq_get_length(%%sampleAccessPointer%%%%name%%),
                "%%name%%", indent_level + 1,
                RTI_CDR_CHAR_TYPE);
        }
    
    }
            </template>
            <template kind="sequence" typeKind="user" type="wstring">
    if (%%sampleAccessPointer%%%%name%% == NULL) {
        RTICdrType_printIndent(indent_level+1);
        RTILog_debug("%%name%%: NULL\n");    
    } else {
                
        if (DDS_WstringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%) != NULL) {
            RTICdrType_printStringArray(
                DDS_WstringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%),
                DDS_WstringSeq_get_length(%%sampleAccessPointer%%%%name%%),
                "%%name%%", indent_level + 1,
                RTI_CDR_WCHAR_TYPE);
        } else {
            RTICdrType_printStringPointerArray(
                DDS_WstringSeq_get_discontiguous_bufferI(%%sampleAccessPointer%%%%name%%),
                DDS_WstringSeq_get_length(%%sampleAccessPointer%%%%name%%),
                "%%name%%", indent_level + 1,
                RTI_CDR_WCHAR_TYPE);
        }
    
    }
            </template>                        
            <template kind="sequence" typeKind="user">
    if (%%sampleAccessPointer%%%%name%% == NULL) {
        RTICdrType_printIndent(indent_level+1);
        RTILog_debug("%%name%%: NULL\n");    
    } else {
                
        if (%%nativeTypeSeq%%_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%) != NULL) {
            RTICdrType_printArray(
                %%nativeTypeSeq%%_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%), 
                %%nativeTypeSeq%%_get_length(%%sampleAccessPointer%%%%name%%),
                sizeof(%%nativeType%%),
                (RTICdrTypePrintFunction)%%elementPrintMethod%%,
                "%%name%%", indent_level + 1);
        } else {
            RTICdrType_printPointerArray(
                %%nativeTypeSeq%%_get_discontiguous_bufferI(%%sampleAccessPointer%%%%name%%), 
                %%nativeTypeSeq%%_get_length(%%sampleAccessPointer%%%%name%%),
                (RTICdrTypePrintFunction)%%elementPrintMethod%%,
                "%%name%%", indent_level + 1);
        }
    
    }
            </template>
            <template kind="arraySequence" typeKind="user" type="string">
    {
        int i;

        RTICdrType_printIndent(indent_level+1);
        RTILog_debug("%%name%%:\n");
        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); i++) {
            if (%%sampleAccessPointer%%%%name%%[i] == NULL) {
                RTICdrType_printIndent(indent_level+2);
                RTILog_debug("%s[%d]: NULL\n","%%name%%",i);    
            } else {
    
                if (DDS_StringSeq_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]) != NULL) {
                    RTICdrType_printStringArray(
                        DDS_StringSeq_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                        DDS_StringSeq_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                        "", indent_level + 2,
                        RTI_CDR_CHAR_TYPE);
                } else {
                    RTICdrType_printStringPointerArray(
                        DDS_StringSeq_get_discontiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                        DDS_StringSeq_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                        "", indent_level + 2,
                        RTI_CDR_CHAR_TYPE);
                }
            
            }
        }    
    }
            </template>
            <template kind="arraySequence" typeKind="user" type="wstring">
    {
        int i;

        RTICdrType_printIndent(indent_level+1);
        RTILog_debug("%%name%%:\n");
        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); i++) {
            if (%%sampleAccessPointer%%%%name%%[i] == NULL) {
                RTICdrType_printIndent(indent_level+2);        
                RTILog_debug("%s[%d]: NULL\n","%%name%%",i);
            } else {
    
                if (DDS_WstringSeq_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]) != NULL) {
                    RTICdrType_printStringArray(
                        DDS_WstringSeq_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                        DDS_WstringSeq_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                        "", indent_level + 2,
                        RTI_CDR_WCHAR_TYPE);
                } else {
                    RTICdrType_printStringPointerArray(
                        DDS_WstringSeq_get_discontiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                        DDS_WstringSeq_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                        "", indent_level + 2,
                        RTI_CDR_WCHAR_TYPE);
                }
            
            }
        }
    }
            </template>
            <template kind="arraySequence" typeKind="user">
    {
        int i;

        RTICdrType_printIndent(indent_level+1);
        RTILog_debug("%%name%%:\n");
        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); i++) {
            if (%%sampleAccessPointer%%%%name%%[i] == NULL) {
                RTICdrType_printIndent(indent_level+2);
                RTILog_debug("%s[%d]: NULL\n","%%name%%",i);
            } else {
    
                if (%%nativeTypeSeq%%_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]) != NULL) {
                    RTICdrType_printArray(
                        %%nativeTypeSeq%%_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]), 
                        %%nativeTypeSeq%%_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                        sizeof(%%nativeType%%),
                        (RTICdrTypePrintFunction)%%elementPrintMethod%%,
                        "", indent_level + 2);
                } else {
                    RTICdrType_printPointerArray(
                        %%nativeTypeSeq%%_get_discontiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]), 
                        %%nativeTypeSeq%%_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                        (RTICdrTypePrintFunction)%%elementPrintMethod%%,
                        "", indent_level + 2);
                }
            
            }        
        }
    }
            </template>
            <template kind="arraySequence" typeKind="builtin">
    {
        int i;

        RTICdrType_printIndent(indent_level+1);
        RTILog_debug("%%name%%:\n");
        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); i++) {
            if (%%sampleAccessPointer%%%%name%%[i] == NULL) {
                RTICdrType_printIndent(indent_level+2);
                RTILog_debug("%s[%d]: NULL\n","%%name%%",i);
            } else {
    
                if (%%nativeTypeSeq%%_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]) != NULL) {
                    RTICdrType_printArray(
                        %%nativeTypeSeq%%_get_contiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                        %%nativeTypeSeq%%_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                        %%elementSize%%,
                        (RTICdrTypePrintFunction)%%elementPrintMethod%%,
                        "", indent_level + 2);
                } else {
                    RTICdrType_printPointerArray(
                        %%nativeTypeSeq%%_get_discontiguous_bufferI(&amp;%%sampleAccess%%%%name%%[i]),
                        %%nativeTypeSeq%%_get_length(&amp;%%sampleAccess%%%%name%%[i]),
                        (RTICdrTypePrintFunction)%%elementPrintMethod%%,
                        "", indent_level + 2);
                }
            
            }
        }
    }
            </template>
            <template kind="bitfield" bitKind="normal">
    bit_val = %%sampleAccess%%%%name%%;
    %%elementPrintBitsMethod%%(&amp;bit_val, "%%name%%", indent_level + 1, %%bits%%);
            </template>
            <template kind="bitfield" bitKind="lastBitField">
    bit_val = %%sampleAccess%%%%name%%;
    %%elementPrintBitsMethod%%(&amp;bit_val, "%%name%%", indent_level + 1, %%bits%%);
            </template>
        </method>

    <!-- ============================== Copy ========================= -->

        <method kind="copy">
            <template kind="scalar">
    if (!%%elementCopyMethod%%(
        %%dstAccessPointer%%%%name%%, %%srcAccessPointer%%%%name%%)) {
        return RTI_FALSE;
    }
            </template>
                                    
            <template kind="string">
    if (!RTICdrType_copyString(
        %%dstAccess%%%%name%%, %%srcAccess%%%%name%%, %%stringMaxLength%% + 1)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="wstring">
    if (!RTICdrType_copyWstring(
        %%dstAccess%%%%name%%, %%srcAccess%%%%name%%, %%stringMaxLength%% + 1)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="builtin">
    if (!RTICdrType_copyArray(
        %%dstAccess%%%%name%%, %%srcAccess%%%%name%%, %%multiDimensionalArraySize%%, %%elementSize%%)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="builtin" pointer="yes">
    {
        int i = 0;
        %%nativeType%%** elemOut = (%%nativeType%%**) %%dstAccessPointer%%%%name%%;
        %%nativeType%%** elemIn = (%%nativeType%%**) %%srcAccessPointer%%%%name%%;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%);
             ++i, ++elemOut, ++elemIn) {
            if (!%%elementCopyMethod%%(*elemOut,*elemIn)) {
                return RTI_FALSE;
            }
        }
    }                
            </template>            
            <template kind="array" typeKind="user" type="string">               
    if (!RTICdrType_copyStringArray(
        %%dstAccess%%%%name%%, %%srcAccess%%%%name%%,
        %%multiDimensionalArraySize%%, %%stringMaxLength%% + 1,
        RTI_CDR_CHAR_TYPE)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="user" type="string" pointer="yes">               
    {
        int i = 0;
        DDS_Char *** elemOut = (DDS_Char***) %%dstAccessPointer%%%%name%%;
        DDS_Char *** elemIn =  (DDS_Char***) %%srcAccessPointer%%%%name%%;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%);
             ++i, ++elemOut, ++elemIn) {
            if (*elemIn==NULL || *elemOut==NULL) {
                return RTI_FALSE;
            }
            if (!RTICdrType_copyString(**elemOut,**elemIn,
                %%stringMaxLength%% + 1)){
                return RTI_FALSE;
            }
        }
    }                
            </template>            
            <template kind="array" typeKind="user" type="wstring">
    if (!RTICdrType_copyStringArray(
        %%dstAccess%%%%name%%, %%srcAccess%%%%name%%,
        %%multiDimensionalArraySize%%, %%stringMaxLength%% + 1,
        RTI_CDR_WCHAR_TYPE)) {
        return RTI_FALSE;
    }
            </template>                        
            <template kind="array" typeKind="user" type="wstring" pointer="yes">
    {
        int i = 0;
        DDS_Wchar *** elemOut = (DDS_Wchar***) %%dstAccessPointer%%%%name%%;
        DDS_Wchar *** elemIn =  (DDS_Wchar***) %%srcAccessPointer%%%%name%%;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%);
             ++i, ++elemOut, ++elemIn) {
            if (*elemIn==NULL || *elemOut==NULL) {
                return RTI_FALSE;
            }
            if (!RTICdrType_copyWstring(**elemOut,**elemIn,
                %%stringMaxLength%% + 1)){
                return RTI_FALSE;
            }
        }
    }                                
            </template>                                    
            <template kind="array" typeKind="user">
    <!-- The seemingly useless type casts in the declarations of the pointer
         fields below are necessary in the case where the field is a multi-
         dimensional array. They let us treat it as if it were a single-
         dimensional array, which simplifies the code quite a bit. -->
    {
        int i = 0;
        %%nativeType%%* elemOut = (%%nativeType%%*) &amp;%%dstAccess%%%%name%%[0];
        const %%nativeType%%* elemIn = (const %%nativeType%%*) &amp;%%srcAccess%%%%name%%[0];

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%);
             ++i, ++elemOut, ++elemIn) {
            if (!%%elementCopyMethod%%(elemOut,(const %%nativeType%%*)elemIn)) {
                return RTI_FALSE;
            }
        }
    }
            </template>
            <template kind="array" typeKind="user" pointer="yes">
    {
        int i = 0;
        %%nativeType%%** elemOut = (%%nativeType%%**) %%dstAccessPointer%%%%name%%;
        %%nativeType%%** elemIn = (%%nativeType%%**) %%srcAccessPointer%%%%name%%;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%);
             ++i, ++elemOut, ++elemIn) {
            if (*elemIn==NULL || *elemOut==NULL) {
                return RTI_FALSE;
            }            
            if (!%%elementCopyMethod%%(*elemOut,*elemIn)) {
                return RTI_FALSE;
            }
        }
    }
            </template>            
            <template kind="sequence" typeKind="builtin">
    if (!%%nativeTypeSeq%%_copy(%%dstAccessPointer%%%%name%%,
                                          %%srcAccessPointer%%%%name%%)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="sequence" typeKind="user" type="string">
    if (!DDS_StringSeq_copy(%%dstAccessPointer%%%%name%%,
                                      %%srcAccessPointer%%%%name%%)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="sequence" typeKind="user" type="wstring">
    if (!DDS_WstringSeq_copy(%%dstAccessPointer%%%%name%%,
                                       %%srcAccessPointer%%%%name%%)) {
        return RTI_FALSE;
    }
            </template>                        
            <template kind="sequence" typeKind="user">
    if (!%%nativeTypeSeq%%_copy(%%dstAccessPointer%%%%name%%,
                                          %%srcAccessPointer%%%%name%%)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="arraySequence" typeKind="user" type="string">
    {
        int i;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); i++) {
            if (!DDS_StringSeq_copy(&amp;%%dstAccess%%%%name%%[i],
                                              &amp;%%srcAccess%%%%name%%[i])) {
                return RTI_FALSE;
            }
        }
    }
            </template>                
            <template kind="arraySequence" typeKind="user" type="wstring">
    {
        int i;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); i++) {
            if (!DDS_WstringSeq_copy(&amp;%%dstAccess%%%%name%%[i],
                                               &amp;%%srcAccess%%%%name%%[i])) {
                return RTI_FALSE;
            }
        }
    }
            </template>                
            <template kind="arraySequence" typeKind="user">
    {
        int i;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); i++) {
            if (!%%nativeTypeSeq%%_copy(&amp;%%dstAccess%%%%name%%[i],
                                                  &amp;%%srcAccess%%%%name%%[i])) {
                return RTI_FALSE;
            }
        }
    }
            </template>                            
            <template kind="arraySequence" typeKind="builtin">
    {
        int i;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); i++) {
            if (!%%nativeTypeSeq%%_copy(&amp;%%dstAccess%%%%name%%[i],
                                                  &amp;%%srcAccess%%%%name%%[i])) {
                return RTI_FALSE;
            }
        }
    }
            </template>                                                    
            <template kind="bitfield" bitKind="normal">
    %%dstAccess%%%%name%% = %%srcAccess%%%%name%%;
            </template>
            <template kind="bitfield" bitKind="lastBitField">
    %%dstAccess%%%%name%% = %%srcAccess%%%%name%%;
            </template>
        </method>

    <!-- ============================== initialize======================== -->

        <method kind="initialize">
            <template kind="scalar" typeKind="builtin">
    if (!%%elementInitMethod%%(%%sampleAccessPointer%%%%name%%)) {
        return RTI_FALSE;
    }                
            </template>
            <template kind="scalar" typeKind="builtin" pointer="yes">
    if (allocParams->allocate_memory) {
        if (%%allocatePointers%%) {
            RTIOsapiHeap_allocateStructure(&amp;(%%sampleAccessPointer%%%%name%%),%%nativeType%%);        
            if (%%sampleAccessPointer%%%%name%%==NULL) {
                return RTI_FALSE;
            }                                                                                       
            if (!%%elementInitMethod%%(%%sampleAccessPointer%%%%name%%)) {
                return RTI_FALSE;
            }                        
        } else {
            %%sampleAccessPointer%%%%name%% = NULL;
        }
    } else {
        if (%%sampleAccessPointer%%%%name%% != NULL) {
            if (!%%elementInitMethod%%(%%sampleAccessPointer%%%%name%%)) {
                return RTI_FALSE;
            }
        }
    }
            </template>            
            <template kind="scalar">
    if (!%%elementInitMethod%%(%%sampleAccessPointer%%%%name%%,allocParams)) {
        return RTI_FALSE;
    }
            </template>
            
            <template kind="scalar" pointer="yes">
    if (allocParams->allocate_memory) {
        if (%%allocatePointers%%) {
            RTIOsapiHeap_allocateStructure(&amp;(%%sampleAccessPointer%%%%name%%),%%nativeType%%);        
            if (%%sampleAccessPointer%%%%name%%==NULL) {
                return RTI_FALSE;
            }                                                                                       
            if (!%%elementInitMethod%%(%%sampleAccessPointer%%%%name%%,allocParams)) {
                return RTI_FALSE;
            }                        
        } else {
            %%sampleAccessPointer%%%%name%% = NULL;
        }
    } else {
        if (%%sampleAccessPointer%%%%name%%!=NULL) {
            if (!%%elementInitMethod%%(%%sampleAccessPointer%%%%name%%,allocParams)) {
                    return RTI_FALSE;
            }
        }
    }
            </template>
            
            <template kind="string">
    if (allocParams->allocate_memory) {
        %%sampleAccess%%%%name%% = DDS_String_alloc(%%stringMaxLength%%);
        if (%%sampleAccess%%%%name%% == NULL) {
            return RTI_FALSE;
        }
    } else {
        if (%%sampleAccess%%%%name%% != NULL) { 
            %%sampleAccess%%%%name%%[0] = '\0';
        }
    }
            </template>
            <template kind="string" pointer="yes">
    if (allocParams->allocate_memory) {
        if (%%allocatePointers%%) {
            RTIOsapiHeap_allocateStructure(&amp;(%%sampleAccessPointer%%%%name%%),char*);        
            if (%%sampleAccessPointer%%%%name%%==NULL) {
                return RTI_FALSE;
            }                                                                                           
            %%sampleAccess%%%%name%% = DDS_String_alloc(%%stringMaxLength%%);
            if (%%sampleAccess%%%%name%% == NULL) {
                return RTI_FALSE;
            }        
        } else {
            %%sampleAccessPointer%%%%name%% = NULL;
        }
    } else {
        if (%%sampleAccessPointer%%%%name%% != NULL &amp;&amp; 
           %%sampleAccess%%%%name%% != NULL )   {
            %%sampleAccess%%%%name%%[0] = '\0';
        }
    }
            </template>
                   
            <template kind="wstring">
    if (allocParams->allocate_memory) {
        %%sampleAccess%%%%name%% = DDS_Wstring_alloc(%%stringMaxLength%%);
        if (%%sampleAccess%%%%name%% == NULL) {
            return RTI_FALSE;
        }
    } else {
        if (%%sampleAccess%%%%name%% != NULL) {
            %%sampleAccess%%%%name%%[0] = '\0';
        }
    }
            </template>
            <template kind="wstring" pointer="yes">
    if (allocParams->allocate_memory) {
        if (%%allocatePointers%%) {
            RTIOsapiHeap_allocateStructure(&amp;(%%sampleAccessPointer%%%%name%%),DDS_Wchar*);        
            if (%%sampleAccessPointer%%%%name%%==NULL) {
                return RTI_FALSE;
            }                                                                                           
            %%sampleAccess%%%%name%% = DDS_Wstring_alloc(%%stringMaxLength%%);
            if (%%sampleAccess%%%%name%% == NULL) {
                return RTI_FALSE;
            }
        } else {
            %%sampleAccessPointer%%%%name%% = NULL;
        }
    } else {
        if (%%sampleAccessPointer%%%%name%% != NULL &amp;&amp; 
           %%sampleAccess%%%%name%% != NULL )   {
            %%sampleAccess%%%%name%%[0] = '\0';
        }
    }
            </template>            
                        
            <template kind="array" typeKind="builtin">    
    if (!RTICdrType_initArray(
        %%sampleAccess%%%%name%%, %%multiDimensionalArraySize%%, %%elementSize%%)) {
        return RTI_FALSE;
    }
            </template>
            <template kind="array" typeKind="builtin" pointer="yes">    
    {
        int i;    
        %%nativeType%%** elem =
            (%%nativeType%%**) %%sampleAccessPointer%%%%name%%;        
        if (allocParams->allocate_memory) {
            if (%%allocatePointers%%) {
                for (i=0;i &lt; (int)(%%multiDimensionalArraySize%%);i++,++elem) {
                    RTIOsapiHeap_allocateStructure(elem,%%nativeType%%);        
                    if (*elem == NULL) {
                        return RTI_FALSE;
                    }
                    memset((void *)*elem,0,sizeof(%%nativeType%%));                
                }        
            } else {
                for (i=0;i &lt; (int)(%%multiDimensionalArraySize%%);i++,++elem) {
                    *elem = NULL;
                }
            }
        } else {
            for (i=0;i &lt; (int)(%%multiDimensionalArraySize%%);i++,++elem) {
                if (*elem != NULL) {
                    memset((void *)*elem,0,sizeof(%%nativeType%%));
                }
            }
        }
    }
            </template>            
            <template kind="array" typeKind="user" type="string">
    if (allocParams->allocate_memory) {
        if (!RTICdrType_initStringArray(%%sampleAccess%%%%name%%,%%multiDimensionalArraySize%%,%%stringMaxLength%%+1,
            RTI_CDR_CHAR_TYPE)) {
            return RTI_FALSE;
        }
    } else {
        int i;    
        DDS_Char** elem =
            (DDS_Char**) %%sampleAccessPointer%%%%name%%;
         for (i=0;i &lt; (int)(%%multiDimensionalArraySize%%);i++,++elem) {
            if (*elem != NULL) {
                *elem[0]   = '\0';
            }
         }
    }
            </template>
            <template kind="array" typeKind="user" type="string" pointer="yes">
    {
        int i;    
        DDS_Char*** elem =
            (DDS_Char***) %%sampleAccessPointer%%%%name%%;        
        if (allocParams->allocate_memory) {
            if (%%allocatePointers%%) {
                for (i=0;i &lt; (int)(%%multiDimensionalArraySize%%);i++,++elem) {
                    RTIOsapiHeap_allocateStructure(elem,DDS_Char*);        
                    if (*elem == NULL) {
                        return RTI_FALSE;
                    }
                    **elem = DDS_String_alloc(%%stringMaxLength%%);
                   if (**elem == NULL) {
                        return RTI_FALSE;
                    }                
                }        
            } else {
                for (i=0;i &lt; (int)(%%multiDimensionalArraySize%%);i++,++elem) {
                    *elem = NULL;
                }
            }
        } else {
            if (*elem != NULL &amp;&amp; **elem != NULL) {
                **elem[0] = '\0';
            }
        }
    }                
            </template>            
            <template kind="array" typeKind="user" type="wstring">
    if (allocParams->allocate_memory) {
        if (!RTICdrType_initStringArray(%%sampleAccess%%%%name%%,%%multiDimensionalArraySize%%,%%stringMaxLength%%+1,
            RTI_CDR_WCHAR_TYPE)) {
            return RTI_FALSE;
        }
    } else {
        int i;    
        DDS_Wchar** elem =
            (DDS_Wchar**) %%sampleAccessPointer%%%%name%%;
         for (i=0;i &lt; (int)(%%multiDimensionalArraySize%%);i++,++elem) {
            if (*elem != NULL) {
                *elem[0]   = '\0';
            }
         }
    }
            </template>
            <template kind="array" typeKind="user" type="wstring" pointer="yes">
    {
        int i;    
        DDS_Wchar*** elem =
            (DDS_Wchar***) %%sampleAccessPointer%%%%name%%;        
        if (allocParams->allocate_memory) {
            if (%%allocatePointers%%) {
                for (i=0;i &lt; (int)(%%multiDimensionalArraySize%%);i++,++elem) {
                    RTIOsapiHeap_allocateStructure(elem,DDS_Wchar*);        
                    if (*elem == NULL) {
                        return RTI_FALSE;
                    }
                    **elem = DDS_Wstring_alloc(%%stringMaxLength%%);
                    if (**elem == NULL) {
                        return RTI_FALSE;
                    }                
                }        
            } else {
                for (i=0;i &lt; (int)(%%multiDimensionalArraySize%%);i++,++elem) {
                    *elem = NULL;
                }
            }
        } else {
            if (*elem != NULL &amp;&amp; **elem != NULL) {
                **elem[0] = '\0';
            }
        }
    }                
            </template>                        
            <template kind="array" typeKind="user">
    <!-- The seemingly useless type cast in the declarations of the pointer
         fields below is necessary in the case where the field is a multi-
         dimensional array. It lets us treat it as if it were a single-
         dimensional array, which simplifies the code quite a bit. -->
    {
        int i = 0;
        %%nativeType%%* elem =
            (%%nativeType%%*) &amp;%%sampleAccess%%%%name%%[0];

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); ++i, ++elem) {
            if (!%%elementInitMethod%%(elem,allocParams)) {
                return RTI_FALSE;
            }
        }
    }
            </template>
            <template kind="array" typeKind="user" pointer="yes">
    {
        int i = 0;
        %%nativeType%%** elem =
            (%%nativeType%%**) %%sampleAccessPointer%%%%name%%;

        if (allocParams->allocate_memory) {
            if (%%allocatePointers%%) {
                for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); ++i, ++elem) {
                    RTIOsapiHeap_allocateStructure(elem,%%nativeType%%);        
                    if (*elem == NULL) {
                        return RTI_FALSE;
                    }
                    if (!%%elementInitMethod%%(*elem,allocParams)) {
                        return RTI_FALSE;
                    }
                }
            } else {
                for (i=0;i &lt; (int)(%%multiDimensionalArraySize%%);i++,++elem) {
                    *elem = NULL;
                }        
            }
        } else {
            for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); ++i, ++elem) {
                if (*elem != NULL) {
                    if (!%%elementInitMethod%%(*elem,allocParams)) {
                        return RTI_FALSE;
                    }
                }
            }
        }
    }
            </template>            
            <template kind="sequence" typeKind="builtin">
    if (allocParams->allocate_memory) {
        %%nativeTypeSeq%%_initialize(%%sampleAccessPointer%%%%name%%);
        if (!%%nativeTypeSeq%%_set_maximum(%%sampleAccessPointer%%%%name%%,
                %%sequenceMaxLength%%)) {
            return RTI_FALSE;
        }
    } else {
        %%nativeTypeSeq%%_set_length(%%sampleAccessPointer%%%%name%%, 0); 
    }
            </template>
            <template kind="sequence" typeKind="builtin" pointer="yes">
    if (allocParams->allocate_memory) {
        if (%%allocatePointers%%) {
            RTIOsapiHeap_allocateStructure(&amp;(%%sampleAccessPointer%%%%name%%),struct %%nativeTypeSeq%%);        
            if (%%sampleAccessPointer%%%%name%%==NULL) {
                return RTI_FALSE;
            }                                                                                           
            %%nativeTypeSeq%%_initialize(%%sampleAccessPointer%%%%name%%);
            if (!%%nativeTypeSeq%%_set_maximum(%%sampleAccessPointer%%%%name%%,
                %%sequenceMaxLength%%)) {
                return RTI_FALSE;
            }
        } else {
            %%sampleAccessPointer%%%%name%% = NULL;
        }
    } else {
        if (%%sampleAccessPointer%%%%name%% != NULL) {
            %%nativeTypeSeq%%_set_length(%%sampleAccessPointer%%%%name%%, 0); 
        }
    }
            </template>            
            <template kind="sequence" typeKind="user" type="string">
    if (allocParams->allocate_memory) {    
        DDS_StringSeq_initialize(%%sampleAccessPointer%%%%name%%);
        if (!DDS_StringSeq_set_maximum(%%sampleAccessPointer%%%%name%%,
                                       %%sequenceMaxLength%%)) {
            return RTI_FALSE;
        }
        buffer = DDS_StringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%);
        if (buffer == NULL) {
            return RTI_FALSE;
        }
        if (!RTICdrType_initStringArray(buffer, %%sequenceMaxLength%%,%%stringMaxLength%%+1,
            RTI_CDR_CHAR_TYPE)) {
            return RTI_FALSE;
        }
    } else {
        DDS_StringSeq_set_length(%%sampleAccessPointer%%%%name%%, 0);
    }
            </template>            
            <template kind="sequence" typeKind="user" type="string" pointer="yes">
    if (allocParams->allocate_memory) {
        if (%%allocatePointers%%) {
            RTIOsapiHeap_allocateStructure(&amp;(%%sampleAccessPointer%%%%name%%),struct DDS_StringSeq);        
            if (%%sampleAccessPointer%%%%name%%==NULL) {
                return RTI_FALSE;
            }
                                                                                                                   
            DDS_StringSeq_initialize(%%sampleAccessPointer%%%%name%%);
            if (!DDS_StringSeq_set_maximum(%%sampleAccessPointer%%%%name%%,
                                           %%sequenceMaxLength%%)) {
                 return RTI_FALSE;
            } 
            buffer = DDS_StringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%);
            if (buffer == NULL) {
                return RTI_FALSE;
            }
            if (!RTICdrType_initStringArray(buffer, %%sequenceMaxLength%%,%%stringMaxLength%%+1,
                RTI_CDR_CHAR_TYPE)) {
                return RTI_FALSE;
            }        
        } else {
            %%sampleAccessPointer%%%%name%% = NULL;
        }
    } else {
        if (%%sampleAccessPointer%%%%name%% != NULL) {
            DDS_StringSeq_set_length(%%sampleAccessPointer%%%%name%%, 0);
        }
    }
            </template>            
            <template kind="sequence" typeKind="user" type="wstring">
    if (allocParams->allocate_memory) {
        DDS_WstringSeq_initialize(%%sampleAccessPointer%%%%name%%);
        if (!DDS_WstringSeq_set_maximum(%%sampleAccessPointer%%%%name%%,
                                        %%sequenceMaxLength%%)) {
            return RTI_FALSE;
        }
        buffer = DDS_WstringSeq_get_contiguous_bufferI(
            %%sampleAccessPointer%%%%name%%);
        if (buffer == NULL) {
            return RTI_FALSE;
        }
        if (!RTICdrType_initStringArray(buffer, %%sequenceMaxLength%%,%%stringMaxLength%%+1,
            RTI_CDR_WCHAR_TYPE)) {
            return RTI_FALSE;
        }
    } else {
        DDS_WstringSeq_set_length(%%sampleAccessPointer%%%%name%%, 0);
    }
            </template>                        
            <template kind="sequence" typeKind="user" type="wstring" pointer="yes">
    if (allocParams->allocate_memory) {
        if (%%allocatePointers%%) {                
            RTIOsapiHeap_allocateStructure(&amp;(%%sampleAccessPointer%%%%name%%),struct DDS_WstringSeq);        
            if (%%sampleAccessPointer%%%%name%%==NULL) {
                return RTI_FALSE;
            }
            DDS_WstringSeq_initialize(%%sampleAccessPointer%%%%name%%);
            if (!DDS_WstringSeq_set_maximum(%%sampleAccessPointer%%%%name%%,
                                            %%sequenceMaxLength%%)) {
                return RTI_FALSE;
            }
            buffer = DDS_WstringSeq_get_contiguous_bufferI(
            %%sampleAccessPointer%%%%name%%);
            if (buffer == NULL) {
                return RTI_FALSE;
            }
            if (!RTICdrType_initStringArray(buffer, %%sequenceMaxLength%%,%%stringMaxLength%%+1,
                RTI_CDR_WCHAR_TYPE)) {
                return RTI_FALSE;
            }        
        } else {
            %%sampleAccessPointer%%%%name%% = NULL;        
        }
    } else {
        if (%%sampleAccessPointer%%%%name%% != NULL) {
            DDS_WstringSeq_set_length(%%sampleAccessPointer%%%%name%%, 0);
        }
    }
            </template>                                    
            <template kind="sequence" typeKind="user">
    if (allocParams->allocate_memory) {
        %%nativeTypeSeq%%_initialize(%%sampleAccessPointer%%%%name%%);
        %%nativeTypeSeq%%_set_element_allocation_params(%%sampleAccessPointer%%%%name%%,allocParams);
        if (!%%nativeTypeSeq%%_set_maximum(%%sampleAccessPointer%%%%name%%,
                                           %%sequenceMaxLength%%)) {
            return RTI_FALSE;
        }
    } else {
        %%nativeTypeSeq%%_set_length(%%sampleAccessPointer%%%%name%%,0);
    }
            </template>     
            <template kind="sequence" typeKind="user" pointer="yes">
    if (allocParams->allocate_memory) {
        if (%%allocatePointers%%) {                
            RTIOsapiHeap_allocateStructure(&amp;(%%sampleAccessPointer%%%%name%%),struct %%nativeTypeSeq%%);        
            if (%%sampleAccessPointer%%%%name%%==NULL) {
                return RTI_FALSE;
            }
            %%nativeTypeSeq%%_initialize(%%sampleAccessPointer%%%%name%%);
            %%nativeTypeSeq%%_set_element_allocation_params(%%sampleAccessPointer%%%%name%%,allocParams);
            
            if (!%%nativeTypeSeq%%_set_maximum(%%sampleAccessPointer%%%%name%%,
                                               %%sequenceMaxLength%%)) {
                return RTI_FALSE;
            }
        } else {
            %%sampleAccessPointer%%%%name%% = NULL;
        }
    } else {
        if (%%sampleAccessPointer%%%%name%% != NULL) {
            %%nativeTypeSeq%%_set_length(%%sampleAccessPointer%%%%name%%,0);
        }
    }
            </template>            
            <template kind="arraySequence" typeKind="user" type="string">
    {
        int i;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); i++) {
            if (allocParams->allocate_memory) {
                DDS_StringSeq_initialize(&amp;%%sampleAccess%%%%name%%[i]);
                if (!DDS_StringSeq_set_maximum(&amp;%%sampleAccess%%%%name%%[i],
                                               %%sequenceMaxLength%%)) {
                    return RTI_FALSE;
                }
                buffer = DDS_StringSeq_get_contiguous_bufferI(
                    &amp;%%sampleAccess%%%%name%%[i]);
                if (buffer == NULL) {
                    return RTI_FALSE;
                }
                if (!RTICdrType_initStringArray(buffer, %%sequenceMaxLength%%,%%stringMaxLength%%+1,
                    RTI_CDR_CHAR_TYPE)) {
                    return RTI_FALSE;
                }
            } else {
                DDS_StringSeq_set_length(&amp;%%sampleAccess%%%%name%%[i],0);
            }
        }
    }
            </template>
            <template kind="arraySequence" typeKind="user" type="string" pointer="yes">
    {
        int i;
        %%cStruct%% DDS_StringSeq** elem =
            (%%cStruct%% DDS_StringSeq**) %%sampleAccessPointer%%%%name%%;

        if (allocParams->allocate_memory) {
            if (%%allocatePointers%%) {
                for (i=0;i &lt; (int)(%%multiDimensionalArraySize%%);i++,++elem) {
                    RTIOsapiHeap_allocateStructure(elem,%%cStruct%% DDS_StringSeq);        
                    if (*elem == NULL) {
                        return RTI_FALSE;
                    }
                    DDS_StringSeq_initialize(*elem);
                    if (!DDS_StringSeq_set_maximum(*elem,
                                                   %%sequenceMaxLength%%)) {
                        return RTI_FALSE;
                    }
                    buffer = DDS_StringSeq_get_contiguous_bufferI(*elem);                
                    if (buffer == NULL) {
                        return RTI_FALSE;
                    }                         
                    if (!RTICdrType_initStringArray(buffer,%%sequenceMaxLength%%,%%stringMaxLength%%+1,
                                                    RTI_CDR_CHAR_TYPE)) {
                        return RTI_FALSE;
                    }                
                }
            } else {
                for (i=0;i &lt; (int)(%%multiDimensionalArraySize%%);i++,++elem) {
                    *elem=NULL;
                }
            }
        } else {
            if (*elem != NULL) {
                DDS_StringSeq_set_length(*elem, 0);
            }
        }
    }                
            </template>            
            <template kind="arraySequence" typeKind="user" type="wstring">
    {
        int i;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); i++) {
            if (allocParams->allocate_memory) {
                DDS_WstringSeq_initialize(&amp;%%sampleAccess%%%%name%%[i]);
                if (!DDS_WstringSeq_set_maximum(&amp;%%sampleAccess%%%%name%%[i],
                                                %%sequenceMaxLength%%)) {
                    return RTI_FALSE;
                }
                buffer = DDS_WstringSeq_get_contiguous_bufferI(
                    &amp;%%sampleAccess%%%%name%%[i]);
                if (buffer == NULL) {
                    return RTI_FALSE;
                }
                if (!RTICdrType_initStringArray(buffer, %%sequenceMaxLength%%,%%stringMaxLength%%+1,
                    RTI_CDR_WCHAR_TYPE)) {
                    return RTI_FALSE;
                }
            } else {
                DDS_WstringSeq_set_length(&amp;%%sampleAccess%%%%name%%[i],0);
            }
        }
    }
            </template>
            <template kind="arraySequence" typeKind="user" type="wstring" pointer="yes">
    {
        int i;
        %%cStruct%% DDS_WstringSeq** elem =
            (%%cStruct%% DDS_WstringSeq**) %%sampleAccessPointer%%%%name%%;
        if (allocParams->allocate_memory) {
            if (%%allocatePointers%%) {
                for (i=0;i &lt; (int)(%%multiDimensionalArraySize%%);i++,++elem) {
                    RTIOsapiHeap_allocateStructure(elem,%%cStruct%% DDS_WstringSeq);        
                    if (*elem == NULL) {
                        return RTI_FALSE;
                    }
                    DDS_WstringSeq_initialize(*elem);
                    if (!DDS_WstringSeq_set_maximum(*elem,
                                                   %%sequenceMaxLength%%)) {
                        return RTI_FALSE;
                    }                
                    buffer = DDS_WstringSeq_get_contiguous_bufferI(*elem);                
                    if (buffer == NULL) {
                        return RTI_FALSE;
                    }                         
                    if (!RTICdrType_initStringArray(buffer,%%sequenceMaxLength%%,%%stringMaxLength%%+1,
                                                    RTI_CDR_WCHAR_TYPE)) {
                        return RTI_FALSE;
                    }
                }     
            } else {
                for (i=0;i &lt; (int)(%%multiDimensionalArraySize%%);i++,++elem) {
                    *elem=NULL;
                }
            }
        } else {
            if (*elem != NULL) {
                DDS_WstringSeq_set_length(*elem,0);
            }
        }
    }                
            </template>                        
            <template kind="arraySequence" typeKind="user">
    {
        int i;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); i++) {
            if (allocParams->allocate_memory) {
                %%nativeTypeSeq%%_initialize(&amp;%%sampleAccess%%%%name%%[i]);
                %%nativeTypeSeq%%_set_element_allocation_params(&amp;%%sampleAccess%%%%name%%[i],allocParams);

                if (!%%nativeTypeSeq%%_set_maximum(&amp;%%sampleAccess%%%%name%%[i],
                                                   %%sequenceMaxLength%%)) {
                    return RTI_FALSE;
                }
            } else {
                %%nativeTypeSeq%%_set_length(&amp;%%sampleAccess%%%%name%%[i],0);
            }
        }
    }
            </template>            
            <template kind="arraySequence" typeKind="user" pointer="yes">
    {
        int i;
        %%cStruct%% %%nativeTypeSeq%%** elem =
            (%%cStruct%% %%nativeTypeSeq%%**) %%sampleAccessPointer%%%%name%%;

        if (allocParams->allocate_memory) {
            if (%%allocatePointers%%) {
                for (i=0;i &lt; (int)(%%multiDimensionalArraySize%%);i++,++elem) {
                    RTIOsapiHeap_allocateStructure(elem,%%cStruct%% %%nativeTypeSeq%%);        
                    if (*elem == NULL) {
                        return RTI_FALSE;
                    }
                    %%nativeTypeSeq%%_initialize(*elem);                
                    %%nativeTypeSeq%%_set_element_allocation_params(*elem,allocParams);
                    
                    if (!%%nativeTypeSeq%%_set_maximum(*elem,
                                                       %%sequenceMaxLength%%)) {
                        return RTI_FALSE;
                    }                
                }
            } else {
               for (i=0;i &lt; (int)(%%multiDimensionalArraySize%%);i++,++elem) {
                   *elem=NULL;
               }
            }
        } else { 
            if (*elem != 0) {
                %%nativeTypeSeq%%_set_length(*elem,0);
            }
        }
    }
            </template>                        
            <template kind="arraySequence" typeKind="builtin">
    {
        int i;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); i++) {
            if (allocParams->allocate_memory) {
                %%nativeTypeSeq%%_initialize(&amp;%%sampleAccess%%%%name%%[i]);
                if (!%%nativeTypeSeq%%_set_maximum(&amp;%%sampleAccess%%%%name%%[i],
                                                   %%sequenceMaxLength%%)) {
                    return RTI_FALSE;
                }
            } else {
                %%nativeTypeSeq%%_set_length(&amp;%%sampleAccess%%%%name%%[i],0);
            }
        }
    }
            </template>
            <template kind="arraySequence" typeKind="builtin" pointer="yes">
    {
        int i;
        %%cStruct%% %%nativeTypeSeq%%** elem =
            (%%cStruct%% %%nativeTypeSeq%%**) %%sampleAccessPointer%%%%name%%;

        if (allocParams->allocate_memory) {
            if (%%allocatePointers%%) {
                for (i=0;i &lt; (int)(%%multiDimensionalArraySize%%);i++,++elem) {
                    RTIOsapiHeap_allocateStructure(elem,%%cStruct%% %%nativeTypeSeq%%);        
                    if (*elem == NULL) {
                        return RTI_FALSE;
                    }
                    %%nativeTypeSeq%%_initialize(*elem);
                    if (!%%nativeTypeSeq%%_set_maximum(*elem,
                                                       %%sequenceMaxLength%%)) {
                        return RTI_FALSE;
                    }              
                }    
           } else {
               for (i=0;i &lt; (int)(%%multiDimensionalArraySize%%);i++,++elem) {
                   *elem=NULL;
               }
            }
        } else {
            if (*elem != NULL) {
                %%nativeTypeSeq%%_set_length(*elem,0);
            }
        }
    }
            </template>            
            <template kind="bitfield" bitKind="normal">
    %%sampleAccess%%%%name%% = 0;
            </template>
            <template kind="bitfield" bitKind="lastBitField">
    %%sampleAccess%%%%name%% = 0;
            </template>
        </method>

    <!-- ============================== finalize ========================= -->

        <method kind="finalize">
            <template kind="scalar" typeKind="builtin"></template>
            <template kind="scalar" typeKind="builtin" pointer="yes">
    if (%%elementDeletePointersCondition%%%%sampleAccessPointer%%%%name%% != NULL) {
        RTIOsapiHeap_freeStructure(%%sampleAccessPointer%%%%name%%);
        %%sampleAccessPointer%%%%name%%=NULL;
    }                
            </template>
            <template kind="scalar" typeKind="user">
    %%elementFinalizeMethod%%(%%sampleAccessPointer%%%%name%%%%elementDeletePointersArgument%%);
            </template>            
            <template kind="scalar" typeKind="user" pointer="yes">
    if (%%elementDeletePointersCondition%%%%sampleAccessPointer%%%%name%% != NULL) {
        %%elementFinalizeMethod%%(%%sampleAccessPointer%%%%name%%%%elementDeletePointersArgument%%);    
        RTIOsapiHeap_freeStructure(%%sampleAccessPointer%%%%name%%);
        %%sampleAccessPointer%%%%name%%=NULL;
    }                    
            </template>
            
            <template kind="string">
    if (%%sampleAccess%%%%name%% != NULL) {    
        DDS_String_free(%%sampleAccess%%%%name%%);
        %%sampleAccess%%%%name%% = NULL;
    }
            </template>
            <template kind="string" pointer="yes">
    if (%%elementDeletePointersCondition%%%%sampleAccessPointer%%%%name%% != NULL) {
        DDS_String_free(%%sampleAccess%%%%name%%);    
        RTIOsapiHeap_freeStructure(%%sampleAccessPointer%%%%name%%);    
        %%sampleAccessPointer%%%%name%%=NULL;
    }    
            </template>            
            <template kind="wstring">
    if (%%sampleAccess%%%%name%% != NULL) {    
        DDS_Wstring_free(%%sampleAccess%%%%name%%);
        %%sampleAccess%%%%name%% = NULL;
    }            
            </template>
            <template kind="wstring" pointer="yes">
    if (%%elementDeletePointersCondition%%%%sampleAccessPointer%%%%name%% != NULL) {
        DDS_Wstring_free(%%sampleAccess%%%%name%%);
        RTIOsapiHeap_freeStructure(%%sampleAccessPointer%%%%name%%);    
        %%sampleAccessPointer%%%%name%%=NULL;
    }        
            </template>            
            <template kind="array" typeKind="builtin"></template>
            <template kind="array" typeKind="builtin" pointer="yes">
    {
        int i;    
        %%nativeType%%** elem =
            (%%nativeType%%**) %%sampleAccessPointer%%%%name%%;        

        if (deallocParams-&gt;delete_pointers) {
            for (i=0;i &lt; (int)(%%multiDimensionalArraySize%%);i++,++elem) {
                if (*elem != NULL) {
                    RTIOsapiHeap_freeStructure(*elem);    
                    *elem=NULL;
                }
            }     
        }   
    }                
            </template>            
            <template kind="array" typeKind="user" type="string">
    RTICdrType_finalizeStringArray(%%sampleAccess%%%%name%%,%%multiDimensionalArraySize%%,RTI_CDR_CHAR_TYPE);
            </template>
            <template kind="array" typeKind="user" type="string" pointer="yes">
    {
        int i;    
        DDS_Char*** elem =
            (DDS_Char***) %%sampleAccessPointer%%%%name%%;        

        if (deallocParams-&gt;delete_pointers) {
            for (i=0;i &lt; (int)(%%multiDimensionalArraySize%%);i++,++elem) {
                if (*elem != NULL) {
                    DDS_String_free(**elem);                
                    RTIOsapiHeap_freeStructure(*elem);
                    *elem = NULL;
                }    
            }     
        }   
    }                                
            </template>            
            <template kind="array" typeKind="user" type="wstring">
    RTICdrType_finalizeStringArray(%%sampleAccess%%%%name%%,%%multiDimensionalArraySize%%,RTI_CDR_WCHAR_TYPE);
            </template>
            <template kind="array" typeKind="user" type="wstring" pointer="yes">
    {
        int i;    
        DDS_Wchar*** elem =
            (DDS_Wchar***) %%sampleAccessPointer%%%%name%%;        

        if (deallocParams-&gt;delete_pointers) {
            for (i=0;i &lt; (int)(%%multiDimensionalArraySize%%);i++,++elem) {
                if (*elem != NULL) {
                    DDS_Wstring_free(**elem);                
                    RTIOsapiHeap_freeStructure(*elem);    
                    *elem=NULL;
                }
            }     
        }   
    }                                
            </template>                        
            <template kind="array" typeKind="user">
    <!-- The seemingly useless type cast in the declarations of the pointer
         fields below is necessary in the case where the field is a multi-
         dimensional array. It lets us treat it as if it were a single-
         dimensional array, which simplifies the code quite a bit. -->
    {
        int i = 0;
        %%nativeType%%* elem =
            (%%nativeType%%*) &amp;%%sampleAccess%%%%name%%[0];

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); ++i, ++elem) {
            %%elementFinalizeMethod%%(elem%%elementDeletePointersArgument%%);
        }
    }
            </template>
            <template kind="array" typeKind="user" pointer="yes">
    {
        int i = 0;
        %%nativeType%%** elem =
            (%%nativeType%%**) %%sampleAccessPointer%%%%name%%;

        if (deallocParams-&gt;delete_pointers) {
            for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); ++i, ++elem) {
                if (*elem != NULL) {
                    %%elementFinalizeMethod%%(*elem%%elementDeletePointersArgument%%);
                    RTIOsapiHeap_freeStructure(*elem);    
                    *elem=NULL;
                }                
            }
        }
    }
            </template>            
            <template kind="sequence" typeKind="builtin">
    %%nativeTypeSeq%%_finalize(%%sampleAccessPointer%%%%name%%);
            </template>
            <template kind="sequence" typeKind="builtin" pointer="yes">
    if (%%elementDeletePointersCondition%%%%sampleAccessPointer%%%%name%% != NULL) {
        %%nativeTypeSeq%%_finalize(%%sampleAccessPointer%%%%name%%);    
        RTIOsapiHeap_freeStructure(%%sampleAccessPointer%%%%name%%);    
        %%sampleAccessPointer%%%%name%%=NULL;
    }            
            </template>            
            <template kind="sequence" typeKind="user" type="string">
    DDS_StringSeq_finalize(%%sampleAccessPointer%%%%name%%);
            </template>
            <template kind="sequence" typeKind="user" type="string" pointer="yes">
    if (%%elementDeletePointersCondition%%%%sampleAccessPointer%%%%name%% != NULL) {
        DDS_StringSeq_finalize(%%sampleAccessPointer%%%%name%%);        
        RTIOsapiHeap_freeStructure(%%sampleAccessPointer%%%%name%%);    
        %%sampleAccessPointer%%%%name%%=NULL;
    }                
            </template>            
            <template kind="sequence" typeKind="user" type="wstring">
    DDS_WstringSeq_finalize(%%sampleAccessPointer%%%%name%%);
            </template>
            <template kind="sequence" typeKind="user" type="wstring" pointer="yes">
    if (%%elementDeletePointersCondition%%%%sampleAccessPointer%%%%name%% != NULL) {
        DDS_WstringSeq_finalize(%%sampleAccessPointer%%%%name%%);        
        RTIOsapiHeap_freeStructure(%%sampleAccessPointer%%%%name%%);    
        %%sampleAccessPointer%%%%name%%=NULL;
    }
            </template>                                    
            <template kind="sequence" typeKind="user">
    %%nativeTypeSeq%%_set_element_deallocation_params(%%sampleAccessPointer%%%%name%%,deallocParams);
    %%nativeTypeSeq%%_finalize(%%sampleAccessPointer%%%%name%%);
            </template>
            <template kind="sequence" typeKind="user" pointer="yes">
    if (%%elementDeletePointersCondition%%%%sampleAccessPointer%%%%name%% != NULL) {
        %%nativeTypeSeq%%_set_element_deallocation_params(%%sampleAccessPointer%%%%name%%,deallocParams);
        %%nativeTypeSeq%%_finalize(%%sampleAccessPointer%%%%name%%);        
        RTIOsapiHeap_freeStructure(%%sampleAccessPointer%%%%name%%);    
        %%sampleAccessPointer%%%%name%%=NULL;
    }                    
            </template>            
            <template kind="arraySequence" typeKind="user" type="string">
    {
        int i;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); i++) {
            DDS_StringSeq_finalize(&amp;%%sampleAccess%%%%name%%[i]);
        }
    }
            </template>
            <template kind="arraySequence" typeKind="user" type="string" pointer="yes">
    {
        int i;

        %%cStruct%% DDS_StringSeq** elem =
            (%%cStruct%% DDS_StringSeq**) %%sampleAccessPointer%%%%name%%;

        if (deallocParams-&gt;delete_pointers) {
            for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); ++i, ++elem) {
                if (*elem != NULL) {
                    DDS_StringSeq_finalize(*elem);
                    RTIOsapiHeap_freeStructure(*elem);    
                    *elem=NULL;         
                }       
            }
        }
    }                
            </template>                        
            <template kind="arraySequence" typeKind="user" type="wstring">
    {
        int i;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%);i++) {
            DDS_WstringSeq_finalize(&amp;%%sampleAccess%%%%name%%[i]);
        }
    }
            </template>
            <template kind="arraySequence" typeKind="user" type="wstring" pointer="yes">
    {
        int i;

        %%cStruct%% DDS_WstringSeq** elem =
            (%%cStruct%% DDS_WstringSeq**) %%sampleAccessPointer%%%%name%%;

        if (deallocParams-&gt;delete_pointers) {
            for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); ++i, ++elem) {
                if (*elem != NULL) {
                    DDS_WstringSeq_finalize(*elem);
                    RTIOsapiHeap_freeStructure(*elem);    
                    *elem=NULL;   
                }             
            }
        }
    }                
            </template>                                    
            <template kind="arraySequence" typeKind="user">
    {
        int i;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); i++) {
            %%nativeTypeSeq%%_set_element_deallocation_params(
                &amp;%%sampleAccess%%%%name%%[i],deallocParams);
            %%nativeTypeSeq%%_finalize(&amp;%%sampleAccess%%%%name%%[i]);
        }
    }
            </template>
            <template kind="arraySequence" typeKind="user" pointer="yes">
    {
        int i;
        %%cStruct%% %%nativeTypeSeq%%** elem =
            (%%cStruct%% %%nativeTypeSeq%%**) %%sampleAccessPointer%%%%name%%;

        if (deallocParams-&gt;delete_pointers) {
            for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); ++i, ++elem) {
                if (*elem != NULL) {
                    %%nativeTypeSeq%%_set_element_deallocation_params(
                        *elem,deallocParams);
                    %%nativeTypeSeq%%_finalize(*elem);
                    RTIOsapiHeap_freeStructure(*elem);    
                    *elem=NULL;         
                }       
            }
        }
    }                
            </template>                                                
            <template kind="arraySequence" typeKind="builtin">
    {
        int i;
        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); i++) {
            %%nativeTypeSeq%%_finalize(&amp;%%sampleAccess%%%%name%%[i]);
        }
    }
            </template>
            <template kind="arraySequence" typeKind="builtin" pointer="yes">
    {
        int i;
        %%cStruct%% %%nativeTypeSeq%%** elem =
            (%%cStruct%% %%nativeTypeSeq%%**) %%sampleAccessPointer%%%%name%%;

        if (deallocParams-&gt;delete_pointers) {
            for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); ++i, ++elem) {
                if (*elem != NULL) {
                    %%nativeTypeSeq%%_finalize(*elem);
                    RTIOsapiHeap_freeStructure(*elem);    
                    *elem=NULL;         
                }       
            }
        }
    }                
            </template>                                    
        </method>
        

    <!-- ============================== finalize_optional ========================= -->

        <method kind="finalize_optional">
            <template kind="scalar" typeKind="builtin"/>
            <template kind="scalar" typeKind="builtin" pointer="yes"/>
            <template kind="scalar" typeKind="user">
    %%elementFinalizeMethod%%(%%sampleAccessPointer%%%%name%%%%elementDeletePointersArgument%%);
            </template>            
            <template kind="scalar" typeKind="user" pointer="yes">
    %%elementFinalizeMethod%%(%%sampleAccessPointer%%%%name%%%%elementDeletePointersArgument%%);
            </template>            
            <template kind="string"/>
            <template kind="string" pointer="yes"/>
            <template kind="wstring"/>
            <template kind="wstring" pointer="yes"/>
            <template kind="array" typeKind="builtin"/>
            <template kind="array" typeKind="builtin" pointer="yes"/>
            <template kind="array" typeKind="user" type="string"/>
            <template kind="array" typeKind="user" type="string" pointer="yes"/>
            <template kind="array" typeKind="user" type="wstring"/>
            <template kind="array" typeKind="user" type="wstring" pointer="yes"/>
            <template kind="array" typeKind="user">
    {
        int i = 0;
        %%nativeType%%* elem =
            (%%nativeType%%*) &amp;%%sampleAccess%%%%name%%[0];

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); ++i, ++elem) {
            %%elementFinalizeMethod%%(elem%%elementDeletePointersArgument%%);
        }
    }
            </template>
            <template kind="array" typeKind="user" pointer="yes">
    {
        int i = 0;
        %%nativeType%%** elem =
            (%%nativeType%%**) %%sampleAccessPointer%%%%name%%;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); ++i, ++elem) {
            if (*elem != NULL) {
                %%elementFinalizeMethod%%(*elem%%elementDeletePointersArgument%%);
            }                
        }
    }
            </template>            
            <template kind="sequence" typeKind="builtin"/>
            <template kind="sequence" typeKind="builtin" pointer="yes"/>
            <template kind="sequence" typeKind="user" type="string"/>
            <template kind="sequence" typeKind="user" type="string" pointer="yes"/>            
            <template kind="sequence" typeKind="user" type="wstring"/>
            <template kind="sequence" typeKind="user" type="wstring" pointer="yes"/>            
            <template kind="sequence" typeKind="user">
    {
        DDS_UnsignedLong i, length;
        length = %%nativeTypeSeq%%_get_length(
            %%sampleAccessPointer%%%%name%%);

        for (i = 0; i &lt; length; i++) {
            %%elementFinalizeMethod%%(
                %%nativeTypeSeq%%_get_reference(
                    %%sampleAccessPointer%%%%name%%, i)%%elementDeletePointersArgument%%);
        }
    }         
            </template>
            <template kind="sequence" typeKind="user" pointer="yes">
    {
        DDS_UnsignedLong i, length;
        length = %%nativeTypeSeq%%_get_length(
            %%sampleAccessPointer%%%%name%%);

        for (i = 0; i &lt; length; i++) {
            %%elementFinalizeMethod%%(
                %%nativeTypeSeq%%_get_reference(
                    %%sampleAccessPointer%%%%name%%, i)%%elementDeletePointersArgument%%);
        }
    }         
            </template>
            <template kind="arraySequence" typeKind="builtin"/>
            <template kind="arraySequence" typeKind="builtin" pointer="yes"/>
            <template kind="arraySequence" typeKind="user" type="string"/>
            <template kind="arraySequence" typeKind="user" type="string" pointer="yes"/>            
            <template kind="arraySequence" typeKind="user" type="wstring"/>
            <template kind="arraySequence" typeKind="user" type="wstring" pointer="yes"/>            
            <template kind="arraySequence" typeKind="user">
    {
        int i;
        DDS_UnsignedLong j, length;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); i++) {
            length = %%nativeTypeSeq%%_get_length(
                &amp;%%sampleAccess%%%%name%%[i]);
    
            for (j = 0; j &lt; length; j++) {
                %%elementFinalizeMethod%%(
                    %%nativeTypeSeq%%_get_reference(
                        &amp;%%sampleAccess%%%%name%%[i], j)%%elementDeletePointersArgument%%);
            }
        }
    }
            </template>
            <template kind="arraySequence" typeKind="user" pointer="yes">
    {
        int i;
        DDS_UnsignedLong j, length;
        
        %%cStruct%% %%nativeTypeSeq%%** elem =
            (%%cStruct%% %%nativeTypeSeq%%**) %%sampleAccessPointer%%%%name%%;

        for (i = 0; i &lt; (int)(%%multiDimensionalArraySize%%); ++i, ++elem) {
            if (*elem != NULL) {
                length = %%nativeTypeSeq%%_get_length(
                    *elem);
        
                for (j = 0; j &lt; length; j++) {
                    %%elementFinalizeMethod%%(
                        %%nativeTypeSeq%%_get_reference(
                            *elem, j)%%elementDeletePointersArgument%%);
                }
            }       
        }
    }                
            </template>                                                
        </method>

        <!-- ====================== allocate member ======================== -->
        
        <method kind="allocate">
              <template kind="scalar" typeKind="builtin">
        RTIOsapiHeap_allocateStructure(&amp;(%%sampleAccessPointer%%%%name%%),%%nativeType%%);
        if (%%sampleAccessPointer%%%%name%%==NULL) {
            return RTI_FALSE;
        }                                                                                       
        if (!%%elementInitMethod%%(%%sampleAccessPointer%%%%name%%)) {
            return RTI_FALSE;
        }</template>
  
              <template kind="scalar" typeKind="user">
        RTIOsapiHeap_allocateStructure(&amp;(%%sampleAccessPointer%%%%name%%),%%nativeType%%);
        if (%%sampleAccessPointer%%%%name%%==NULL) {
            return RTI_FALSE;
        }                                                                                       
        if (!%%elementInitMethod%%(%%sampleAccessPointer%%%%name%%, RTI_TRUE, RTI_TRUE)) {
            return RTI_FALSE;
        }</template>
      
              <template kind="string">
        %%sampleAccess%%%%name%% = DDS_String_alloc(%%stringMaxLength%%);
        if (%%sampleAccess%%%%name%% == NULL) {
            return RTI_FALSE;
        }</template>   
                        
              <template kind="wstring">
        %%sampleAccess%%%%name%% = DDS_Wstring_alloc(%%stringMaxLength%%);
        if (%%sampleAccess%%%%name%% == NULL) {
            return RTI_FALSE;
        }</template>
        
              <template kind="string" pointer="yes">
        RTIOsapiHeap_allocateStructure(&amp;(%%sampleAccessPointer%%%%name%%),char*);        
        if (%%sampleAccessPointer%%%%name%%==NULL) {
            return RTI_FALSE;
        }                                                                                           
        %%sampleAccess%%%%name%% = DDS_String_alloc(%%stringMaxLength%%);
        if (%%sampleAccess%%%%name%% == NULL) {
            return RTI_FALSE;
        }</template>
        
              <template kind="wstring" pointer="yes">
        RTIOsapiHeap_allocateStructure(&amp;(%%sampleAccessPointer%%%%name%%),DDS_Wchar*);        
        if (%%sampleAccessPointer%%%%name%%==NULL) {
            return RTI_FALSE;
        }                                                                                           
        %%sampleAccess%%%%name%% = DDS_Wstring_alloc(%%stringMaxLength%%);
        if (%%sampleAccess%%%%name%% == NULL) {
            return RTI_FALSE;
        }</template>
               
              <template kind="sequence" typeKind="builtin">
        RTIOsapiHeap_allocateStructure(&amp;(%%sampleAccessPointer%%%%name%%),struct %%nativeTypeSeq%%);        
        if (%%sampleAccessPointer%%%%name%%==NULL) {
            return RTI_FALSE;
        }                                                                                           
        %%nativeTypeSeq%%_initialize(%%sampleAccessPointer%%%%name%%);
        if (!%%nativeTypeSeq%%_set_maximum(%%sampleAccessPointer%%%%name%%,
            %%sequenceMaxLength%%)) {
            return RTI_FALSE;
        }
           </template>            
            <template kind="sequence" typeKind="user" type="string">
        {
            void * buffer;      
            RTIOsapiHeap_allocateStructure(&amp;(%%sampleAccessPointer%%%%name%%),struct DDS_StringSeq);        
            if (%%sampleAccessPointer%%%%name%%==NULL) {
                return RTI_FALSE;
            }
                                                                                                                   
            DDS_StringSeq_initialize(%%sampleAccessPointer%%%%name%%);
            if (!DDS_StringSeq_set_maximum(%%sampleAccessPointer%%%%name%%,
                                           %%sequenceMaxLength%%)) {
                 return RTI_FALSE;
            } 
            buffer = DDS_StringSeq_get_contiguous_bufferI(%%sampleAccessPointer%%%%name%%);
            if (buffer == NULL) {
                return RTI_FALSE;
            }
            if (!RTICdrType_initStringArray(buffer, %%sequenceMaxLength%%,%%stringMaxLength%%+1,
                RTI_CDR_CHAR_TYPE)) {
                return RTI_FALSE;
            }
        }
            </template>                        
            <template kind="sequence" typeKind="user" type="wstring">
        {
            void * buffer;
            RTIOsapiHeap_allocateStructure(&amp;(%%sampleAccessPointer%%%%name%%),struct DDS_WstringSeq);        
            if (%%sampleAccessPointer%%%%name%%==NULL) {
                return RTI_FALSE;
            }
            DDS_WstringSeq_initialize(%%sampleAccessPointer%%%%name%%);
            if (!DDS_WstringSeq_set_maximum(%%sampleAccessPointer%%%%name%%,
                                            %%sequenceMaxLength%%)) {
                return RTI_FALSE;
            }
            buffer = DDS_WstringSeq_get_contiguous_bufferI(
            %%sampleAccessPointer%%%%name%%);
            if (buffer == NULL) {
                return RTI_FALSE;
            }
            if (!RTICdrType_initStringArray(buffer, %%sequenceMaxLength%%,%%stringMaxLength%%+1,
                RTI_CDR_WCHAR_TYPE)) {
                return RTI_FALSE;
            }
        }</template>     
            <template kind="sequence" typeKind="user">           
        RTIOsapiHeap_allocateStructure(&amp;(%%sampleAccessPointer%%%%name%%),struct %%nativeTypeSeq%%);        
        if (%%sampleAccessPointer%%%%name%%==NULL) {
            return RTI_FALSE;
        }
        %%nativeTypeSeq%%_initialize(%%sampleAccessPointer%%%%name%%);
        %%nativeTypeSeq%%_set_element_pointers_allocation(%%sampleAccessPointer%%%%name%%,RTI_TRUE);
        if (!%%nativeTypeSeq%%_set_maximum(%%sampleAccessPointer%%%%name%%,
                                           %%sequenceMaxLength%%)) {
            return RTI_FALSE;
        }</template>
              <template kind="arraySequence" typeKind="user" type="string">
        {
            int i;
            %%cStruct%% DDS_StringSeq** elem =
                (%%cStruct%% DDS_StringSeq**) %%sampleAccessPointer%%%%name%%;
    
            for (i=0;i &lt; (int)(%%multiDimensionalArraySize%%);i++,++elem) {
                RTIOsapiHeap_allocateStructure(elem,%%cStruct%% DDS_StringSeq);        
                if (*elem == NULL) {
                    return RTI_FALSE;
                }
                DDS_StringSeq_initialize(*elem);
                if (!DDS_StringSeq_set_maximum(*elem,
                                               %%sequenceMaxLength%%)) {
                    return RTI_FALSE;
                }
                buffer = DDS_StringSeq_get_contiguous_bufferI(*elem);                
                if (buffer == NULL) {
                    return RTI_FALSE;
                }                         
                if (!RTICdrType_initStringArray(buffer,%%sequenceMaxLength%%,%%stringMaxLength%%+1,
                                                RTI_CDR_CHAR_TYPE)) {
                    return RTI_FALSE;
                }                
            }
        }</template>
                <template kind="arraySequence" typeKind="user" type="wstring">
        {
            int i;
            %%cStruct%% DDS_WstringSeq** elem =
                (%%cStruct%% DDS_WstringSeq**) %%sampleAccessPointer%%%%name%%;
            for (i=0;i &lt; (int)(%%multiDimensionalArraySize%%);i++,++elem) {
                RTIOsapiHeap_allocateStructure(elem,%%cStruct%% DDS_WstringSeq);        
                if (*elem == NULL) {
                    return RTI_FALSE;
                }
                DDS_WstringSeq_initialize(*elem);
                if (!DDS_WstringSeq_set_maximum(*elem,
                                               %%sequenceMaxLength%%)) {
                    return RTI_FALSE;
                }                
                buffer = DDS_WstringSeq_get_contiguous_bufferI(*elem);                
                if (buffer == NULL) {
                    return RTI_FALSE;
                }                         
                if (!RTICdrType_initStringArray(buffer,%%sequenceMaxLength%%,%%stringMaxLength%%+1,
                                                RTI_CDR_WCHAR_TYPE)) {
                    return RTI_FALSE;
                }
            }
        }</template>            
                <template kind="arraySequence" typeKind="user">
        {
            int i;
            %%cStruct%% %%nativeTypeSeq%%** elem =
                (%%cStruct%% %%nativeTypeSeq%%**) %%sampleAccessPointer%%%%name%%;
    
                for (i=0;i &lt; (int)(%%multiDimensionalArraySize%%);i++,++elem) {
                    RTIOsapiHeap_allocateStructure(elem,%%cStruct%% %%nativeTypeSeq%%);        
                    if (*elem == NULL) {
                        return RTI_FALSE;
                    }
                    %%nativeTypeSeq%%_initialize(*elem);
                    %%nativeTypeSeq%%_set_element_pointers_allocation*elem,RTI_TRUE);
                    if (!%%nativeTypeSeq%%_set_maximum(*elem,
                                                       %%sequenceMaxLength%%)) {
                        return RTI_FALSE;
                    }                
                }
        }</template>
                <template kind="arraySequence" typeKind="builtin">
        {
            int i;
            %%cStruct%% %%nativeTypeSeq%%** elem =
                (%%cStruct%% %%nativeTypeSeq%%**) %%sampleAccessPointer%%%%name%%;
    
            for (i=0;i &lt; (int)(%%multiDimensionalArraySize%%);i++,++elem) {
                RTIOsapiHeap_allocateStructure(elem,%%cStruct%% %%nativeTypeSeq%%);        
                if (*elem == NULL) {
                    return RTI_FALSE;
                }
                %%nativeTypeSeq%%_initialize(*elem);
                if (!%%nativeTypeSeq%%_set_maximum(*elem,
                                                   %%sequenceMaxLength%%)) {
                    return RTI_FALSE;
                }              
            }    
        }</template>            
                
    
        </method>        

    </methodInfoMap>
    
    <!-- ================================================================== -->
    <!-- ================================================================== -->
    
<sourcePreamble kind="type-plugin-source">
<![CDATA[
#include <string.h>

#ifdef __cplusplus
#ifndef ndds_cpp_h
  #include "ndds/ndds_cpp.h"
#endif
#else
#ifndef ndds_c_h
  #include "ndds/ndds_c.h"
#endif
#endif

#ifndef osapi_type_h
  #include "osapi/osapi_type.h"
#endif
#ifndef osapi_heap_h
  #include "osapi/osapi_heap.h"
#endif

#ifndef osapi_utility_h
  #include "osapi/osapi_utility.h"
#endif

#ifndef cdr_type_h
  #include "cdr/cdr_type.h"
#endif

#ifndef cdr_type_object_h
  #include "cdr/cdr_typeObject.h"
#endif

#ifndef cdr_encapsulation_h
  #include "cdr/cdr_encapsulation.h"
#endif

#ifndef cdr_stream_h
  #include "cdr/cdr_stream.h"
#endif

#ifndef pres_typePlugin_h
  #include "pres/pres_typePlugin.h"
#endif

]]>
</sourcePreamble>
    
<sourcePreamble kind="type-plugin-header">
</sourcePreamble>
    
<sourcePreamble kind="type-header">
<![CDATA[
#ifndef NDDS_STANDALONE_TYPE
    #ifdef __cplusplus
        #ifndef ndds_cpp_h
            #include "ndds/ndds_cpp.h"
        #endif
    #else
        #ifndef ndds_c_h
            #include "ndds/ndds_c.h"
        #endif
    #endif
#else
    #include "ndds_standalone_type.h"
#endif
]]>
</sourcePreamble>    

<sourcePreamble kind="type-source">
<![CDATA[
#ifndef NDDS_STANDALONE_TYPE
    #ifdef __cplusplus
        #ifndef ndds_cpp_h
            #include "ndds/ndds_cpp.h"
        #endif
        #ifndef dds_c_log_impl_h              
            #include "dds_c/dds_c_log_impl.h"                                
        #endif        
    #else
        #ifndef ndds_c_h
            #include "ndds/ndds_c.h"
        #endif
    #endif
    
    #ifndef cdr_type_h
        #include "cdr/cdr_type.h"
    #endif    

    #ifndef osapi_heap_h
        #include "osapi/osapi_heap.h" 
    #endif
#else
    #include "ndds_standalone_type.h"
#endif
]]>
</sourcePreamble>

<sourcePreamble kind="support-source">
<![CDATA[
#ifdef __cplusplus  
    #ifndef dds_c_log_impl_h              
         #include "dds_c/dds_c_log_impl.h"                                
    #endif        
#endif        
]]>
</sourcePreamble>    

<sourcePreamble kind="support-header">
<![CDATA[
#ifdef __cplusplus
#ifndef ndds_cpp_h
  #include "ndds/ndds_cpp.h"
#endif
#else
#ifndef ndds_c_h
  #include "ndds/ndds_c.h"
#endif
#endif
]]>
</sourcePreamble>
    
</generationInfo>    
