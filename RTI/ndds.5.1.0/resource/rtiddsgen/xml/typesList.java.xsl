<?xml version="1.0"?>

<!-- 
/* $Id: typesList.java.xsl,v 1.5 2013/11/02 15:21:21 fernando Exp $
 
   (c) Copyright, Real-Time Innovations, Inc. 2001.  All rights reserved.
   No duplications, whole or partial, manual or electronic, may be made
   without prior written permission.  Any such copies, or
   revisions thereof, must display this notice unaltered.
   This code contains trade secrets of Real-Time Innovations, Inc.
 
Modification history:
- - - - - - - - - - -
5.0.0.18,17sep13,rk  Fixed CODEGEN-591
10ae,26feb10,fcs DataWriter/DataReader suffix support
10ae,26feb10,fcs Sequence suffix support
1.0i,16jul08,tk  Removed utils.xsl
1.0i,14feb07,fcs Updated file generation to work with the -makefile option
1.0i,20jan07,fcs Created
-->

<!--
    This XSL document is used to generate a file with a list of the Java source 
    code files generated by RTIDDSGEN.

    That list will be used to generate the Java example makefile when the 
    -example flag is used
-->

<!DOCTYPE xsl:stylesheet [
<!ENTITY nl "&#xa;">                <!--   new line  -->
<!ENTITY indent "    ">             <!-- indentation -->
]>

<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
                xmlns:xalan="http://xml.apache.org/xalan" version="1.0">
    <xsl:param name="typecode"/>
    <xsl:param name="corbaHeader"/>

    <xsl:include href="typeCommon.java.xsl"/>

    <xsl:output method="text"/>

    <xsl:template match="/">
        <xsl:apply-templates/>
    </xsl:template>

    <!-- Struct -->
    <xsl:template match="struct">
        <xsl:param name="containerNamespace"/>
        <xsl:variable name="sourceDir">
            <xsl:call-template name="obtainSourceDir">
                <xsl:with-param name="containerNamespace" select="$containerNamespace"/>
            </xsl:call-template>
        </xsl:variable>

        <xsl:variable name="topLevel">
            <xsl:call-template name="isTopLevelType">
                <xsl:with-param name="typeNode" select="."/>
            </xsl:call-template>
        </xsl:variable>

        <xsl:variable name="lastTopLevel">
            <xsl:call-template name="isLastLessDeepTopLevelType">
                <xsl:with-param name="typeNode" select="."/>
            </xsl:call-template>        
        </xsl:variable>

        <xsl:value-of select="concat('./',$sourceDir,@name,'.java')"/>
        <xsl:text>&nl;</xsl:text>
        <xsl:value-of select="concat('./',$sourceDir,@name,$typeSeqSuffix,'.java')"/>
        <xsl:text>&nl;</xsl:text>
        <xsl:value-of select="concat('./',$sourceDir,@name,'TypeSupport.java')"/>
        <xsl:text>&nl;</xsl:text>

        <xsl:if test="$typecode='yes'">
            <xsl:value-of select="concat('./',$sourceDir,@name,'TypeCode.java')"/>
            <xsl:text>&nl;</xsl:text>
        </xsl:if>

        <xsl:if test="$topLevel = 'yes'">
            <xsl:value-of select="concat('./',$sourceDir,@name,$dataReaderSuffix,'.java')"/>        
            <xsl:text>&nl;</xsl:text>
            <xsl:value-of select="concat('./',$sourceDir,@name,$dataWriterSuffix,'.java')"/>
            <xsl:text>&nl;</xsl:text>
        </xsl:if>

        <xsl:if test="$lastTopLevel = 'yes'">
            <xsl:value-of select="concat('./',$sourceDir,@name,'Subscriber.java')"/>
            <xsl:text>&nl;</xsl:text>
            <xsl:value-of select="concat('./',$sourceDir,@name,'Publisher.java')"/>
            <xsl:text>&nl;</xsl:text>
        </xsl:if>

        <xsl:if test="$corbaHeader!='none'">
            <xsl:value-of select="concat('./',$sourceDir,@name,'Helper.java')"/>
            <xsl:text>&nl;</xsl:text>
            <xsl:value-of select="concat('./',$sourceDir,@name,'Holder.java')"/>
            <xsl:text>&nl;</xsl:text>
        </xsl:if>
    </xsl:template>

    <!-- Typedef -->
    <xsl:template match="typedef">
        <xsl:param name="containerNamespace"/>

        <xsl:variable name="sourceDir">
            <xsl:call-template name="obtainSourceDir">
                <xsl:with-param name="containerNamespace" select="$containerNamespace"/>
            </xsl:call-template>
        </xsl:variable>

        <xsl:variable name="baseMemberKind">
            <xsl:call-template name="obtainBaseMemberKind">
                <xsl:with-param name="member" select="./member"/>
            </xsl:call-template>
        </xsl:variable>

        <xsl:if test="($baseMemberKind='sequence' or 
                      $baseMemberKind='array' or
                      $baseMemberKind='arraySequence')">

            <xsl:if test="$corbaHeader!='none'">
                <xsl:value-of select="concat('./',$sourceDir,@name,'Holder.java')"/>
                <xsl:text>&nl;</xsl:text>
            </xsl:if>

            <xsl:if test="$corbaHeader='none'">
                <xsl:value-of select="concat('./',$sourceDir,@name,'.java')"/>
                <xsl:text>&nl;</xsl:text>
                <xsl:value-of select="concat('./',$sourceDir,@name,$typeSeqSuffix,'.java')"/>
                <xsl:text>&nl;</xsl:text>
                <xsl:value-of select="concat('./',$sourceDir,@name,'TypeSupport.java')"/>
                <xsl:text>&nl;</xsl:text>
            </xsl:if>

        </xsl:if>

        <xsl:if test="$typecode='yes'">
            <xsl:value-of select="concat('./',$sourceDir,@name,'TypeCode.java')"/>
            <xsl:text>&nl;</xsl:text>
        </xsl:if>

        <xsl:if test="$corbaHeader!='none'">
            <xsl:value-of select="concat('./',$sourceDir,@name,'Helper.java')"/>
            <xsl:text>&nl;</xsl:text>
        </xsl:if>
    </xsl:template>

    <!-- Enum -->
    <xsl:template match="enum">
        <xsl:param name="containerNamespace"/>

        <xsl:variable name="sourceDir">
            <xsl:call-template name="obtainSourceDir">
                <xsl:with-param name="containerNamespace" select="$containerNamespace"/>
            </xsl:call-template>
        </xsl:variable>

        <xsl:value-of select="concat('./',$sourceDir,@name,'.java')"/>
        <xsl:text>&nl;</xsl:text>
        <xsl:value-of select="concat('./',$sourceDir,@name,$typeSeqSuffix,'.java')"/>
        <xsl:text>&nl;</xsl:text>
        <xsl:value-of select="concat('./',$sourceDir,@name,'TypeSupport.java')"/>
        <xsl:text>&nl;</xsl:text>

        <xsl:if test="$corbaHeader!='none'">
            <xsl:value-of select="concat('./',$sourceDir,@name,'Helper.java')"/>
            <xsl:text>&nl;</xsl:text>
            <xsl:value-of select="concat('./',$sourceDir,@name,'Holder.java')"/>
            <xsl:text>&nl;</xsl:text>
        </xsl:if>

        <xsl:if test="$typecode='yes'">
            <xsl:value-of select="concat('./',$sourceDir,@name,'TypeCode.java')"/>
            <xsl:text>&nl;</xsl:text>
        </xsl:if>
    </xsl:template>

    <!-- Const -->
    <xsl:template match="const">
        <xsl:param name="containerNamespace"/>

        <xsl:variable name="sourceDir">
            <xsl:call-template name="obtainSourceDir">
                <xsl:with-param name="containerNamespace" select="$containerNamespace"/>
            </xsl:call-template>
        </xsl:variable>

        <xsl:value-of select="concat('./',$sourceDir,@name,'.java')"/>
        <xsl:text>&nl;</xsl:text>
    </xsl:template>

    <!-- Helper templates -->
    <xsl:template name="obtainSourceDir">
        <xsl:param name="containerNamespace"/>
    
        <xsl:variable name="packageDir" select="translate($containerNamespace, '.', '/')"/>
        
        <xsl:variable name="dir">
            <xsl:choose>
                <xsl:when test="$packagePrefix">
                    <xsl:variable name="packagePrefixDir" select="translate($packagePrefix, '.', '/')"/>
                    <xsl:value-of select="concat($packagePrefixDir, '/', $packageDir)"/>            
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$packageDir"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        
        <xsl:value-of select="$dir"/>
    </xsl:template>

    <xsl:template match="directive[@kind = 'copy' or @kind = 'copy-java']"/>

</xsl:stylesheet>

