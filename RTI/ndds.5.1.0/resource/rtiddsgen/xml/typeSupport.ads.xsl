<?xml version="1.0"?>
<!--
   $Id: typeSupport.ads.xsl,v 1.4 2012/04/23 16:44:18 fernando Exp $

   (c) Copyright 2007, Real-Time Innovations, Inc.  All rights reserved.
   No duplications, whole or partial, manual or electronic, may be made
   without prior written permission.  Any such copies, or
   revisions thereof, must display this notice unaltered.
   This code contains trade secrets of Real-Time Innovations, Inc.

Modification history
 - - - - - - - - - -
10o,24aug10,fcs begin directive support
10o,17jun08,fcs Group types into modules
10o,16jun08,fcs 06/16/08 Merge changes
10o,29nov07,fcs 11/29/07 Merge changes
10o,09nov07,fcs Mark changes 11/02/07
10o,14aug07,fcs Fixed write and print functions
10o,09jul07,fcs Second review changes
10o,07jul07,fcs Fixed DataWriter/DataReader
10o,07jul07,fcs TypeSupport changes
10o,06jul07,fcs Fixed package name for writer and reader
10o,06jul07,fcs Filled in DataWriter
10o,06jul07,fcs Filled in DataReader and Support for ADA
10o,03jul07,fcs Fixed obtainSourceFileName calls
10o,03jul07,rbw Generate code into multiple files
10o,03jul07,rbw Created based on C version
-->

<!DOCTYPE xsl:stylesheet [
<!ENTITY nl "&#xa;">                <!-- new line -->
<!ENTITY indent "  ">             <!-- indentation -->
<!ENTITY namespaceSeperator "_">    <!-- namespace separator -->
]>

<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">

<xsl:include href="typeCommon.ada.xsl"/>

<xsl:output method="xml"/>

<xsl:variable name="sourcePreamble" select="$generationInfo/sourcePreamble[@kind = 'support-header']"/>

<xsl:template match="struct">
    <xsl:param name="containerNamespace"/>

    <xsl:variable name="topLevel">
        <xsl:call-template name="isTopLevelType">
            <xsl:with-param name="typeNode" select="."/>
        </xsl:call-template>
    </xsl:variable>

    <xsl:if test="$topLevel='yes'">
        <xsl:apply-templates mode="error-checking"/>

        <xsl:variable name="newContainerNamespace">
            <xsl:if test="name(..) = 'specification'">
                <xsl:value-of select="concat($idlFileBaseName,'_IDL_File')"/>
            </xsl:if>
            <xsl:if test="name(..) = 'module'">
                <xsl:value-of select="$containerNamespace"/>
            </xsl:if>
        </xsl:variable>

        <xsl:variable name="sourceFile">
            <xsl:call-template name="obtainSourceFileName">
                <xsl:with-param name="containerNamespace"
                                select="$newContainerNamespace"/>
                <xsl:with-param name="typeName"
                                select="concat(@name, '_typesupport')"/>
                <xsl:with-param name="fileExt" select="'ads'"/>
            </xsl:call-template>
        </xsl:variable>

        <xsl:variable name="typePackageName">
            <xsl:value-of select="$newContainerNamespace"/>
        </xsl:variable>

        <xsl:variable name="fullQualifiedAdaStructName" select="concat($typePackageName,'.',@name)"/>

        <!-- =================================================== -->
        <!--                                                     -->
        <!--                TypeSupport                          -->
        <!--                                                     -->
        <!-- =================================================== -->
        <file name="{$sourceFile}">
            <xsl:call-template name="printAutoGeneratedWarning"/>

            <xsl:text>with DDS;&nl;</xsl:text>
            <xsl:text>with DDS.DomainParticipant;&nl;</xsl:text>
            <xsl:text>with DDS.TypeSupport;&nl;</xsl:text>
            <xsl:text>with DDS.DataReader;&nl;</xsl:text>
            <xsl:text>with DDS.DataWriter;&nl;&nl;</xsl:text>

            <xsl:text>with </xsl:text>
            <xsl:value-of select="$typePackageName"/>
            <xsl:text>; use </xsl:text>
            <xsl:value-of select="$typePackageName"/>
            <xsl:text>;&nl;&nl;</xsl:text>

            <xsl:apply-templates select="/specification/directive[@kind = 'copy-ada-begin']|
                                         /specification/directive[@kind = 'copy-ada-declaration-begin']"/>

            <xsl:variable name="packageName">
                <xsl:value-of select="concat($newContainerNamespace,'.',@name,'_TypeSupport')"/>
            </xsl:variable>

            <xsl:value-of select="concat('package ',$packageName,' is')"/>
            <xsl:text>&nl;&nl;</xsl:text>

            <xsl:text>   type Ref is new Standard.DDS.TypeSupport.Ref with null record;&nl;</xsl:text>
            <xsl:text>   type Ref_Access is access all Ref'Class;&nl;&nl;</xsl:text>

            <xsl:text>   function Create_TypedDataReaderI&nl;</xsl:text>
            <xsl:text>     (Self : access Ref) return Standard.DDS.DataReader.Ref_Access;&nl;&nl;</xsl:text>
            <xsl:text>   procedure Destroy_TypedDataReaderI&nl;</xsl:text>
            <xsl:text>     (Self   : access Ref;&nl;</xsl:text>
            <xsl:text>      Reader : in out Standard.DDS.DataReader.Ref_Access);&nl;&nl;</xsl:text>
            <xsl:text>   function Create_TypedDataWriterI&nl;</xsl:text>
            <xsl:text>     (Self : access Ref) return Standard.DDS.DataWriter.Ref_Access;&nl;&nl;</xsl:text>
            <xsl:text>   procedure Destroy_TypedDataWriterI&nl;</xsl:text>
            <xsl:text>     (Self   : access Ref;&nl;</xsl:text>
            <xsl:text>      Writer : in out Standard.DDS.DataWriter.Ref_Access);&nl;&nl;</xsl:text>

            <xsl:text>   --  static methods&nl;&nl;</xsl:text>          

            <!-- Register_Type -->
            <xsl:text>   procedure Register_Type&nl;</xsl:text>
            <xsl:text>     (Participant :  not null access Standard.DDS.DomainParticipant.Ref'Class;&nl;</xsl:text>
            <xsl:text>      Type_Name   : in Standard.DDS.String);&nl;&nl;</xsl:text>

            <!-- Get_Type_Name -->
            <xsl:text>   function Get_Type_Name return Standard.DDS.String;&nl;&nl;</xsl:text>

            <!-- Create_Data -->
            <xsl:text>   function Create_Data (AllocatePointers : in Boolean := True)&nl;</xsl:text>
            <xsl:text>     return not null </xsl:text>
            <xsl:value-of select="concat(@name,'_Access')"/>
            <xsl:text>;&nl;&nl;</xsl:text>

            <!-- Delete Data Ex -->
            <xsl:text>   procedure Delete_Data&nl;</xsl:text>
            <xsl:text>     (A_Data : in out </xsl:text>
            <xsl:value-of select="concat(@name,'_Access')"/>
            <xsl:text>; DeletePointers : in Boolean := True);&nl;&nl;</xsl:text>

            <!-- Print Data -->
            <xsl:text>   procedure Print_Data (A_Data : not null access constant </xsl:text>
            <xsl:value-of select="@name"/>
            <xsl:text>);&nl;&nl;</xsl:text>

            <!-- Copy Data -->

            <xsl:text>   procedure Copy_Data&nl;</xsl:text>
            <xsl:text>     (Dest   : not null access </xsl:text>
            <xsl:value-of select="@name"/>
            <xsl:text>;&nl;</xsl:text>
            <xsl:text>      Source : not null access constant </xsl:text>
            <xsl:value-of select="@name"/>
            <xsl:text>);&nl;&nl;</xsl:text>

            <!-- Initialize_Data -->
            <xsl:text>   procedure Initialize_Data&nl;</xsl:text>
            <xsl:text>     (Dest             : not null access </xsl:text>
            <xsl:value-of select="@name"/>
            <xsl:text>;&nl;</xsl:text>
            <xsl:text>      AllocatePointers : in Boolean := True);&nl;&nl;</xsl:text>

            <!-- Finalize_Data -->
            <xsl:text>   procedure Finalize_Data&nl;</xsl:text>
            <xsl:text>     (Dest           : not null access </xsl:text>
            <xsl:value-of select="@name"/>
            <xsl:text>;&nl;</xsl:text>
            <xsl:text>      DeletePointers : in Boolean := True);&nl;&nl;</xsl:text>

            <!-- Finalize -->
            <xsl:text>   procedure Finalize;&nl;&nl;</xsl:text>

            <xsl:value-of select="concat('end ',$packageName,';')"/>
            <xsl:text>&nl;</xsl:text>
        </file>

        <!-- =================================================== -->
        <!--                                                     -->
        <!--                DataWriter                           -->
        <!--                                                     -->
        <!-- =================================================== -->

        <xsl:variable name="sourceFile">
            <xsl:call-template name="obtainSourceFileName">
                <xsl:with-param name="containerNamespace"
                                select="$newContainerNamespace"/>
                <xsl:with-param name="typeName"
                                select="concat(@name, '_datawriter')"/>
                <xsl:with-param name="fileExt" select="'ads'"/>
            </xsl:call-template>
        </xsl:variable>

        <file name="{$sourceFile}">
            <xsl:call-template name="printAutoGeneratedWarning"/>
            <xsl:text>pragma Warnings (Off); --  Since this is autogenerated code.&nl;</xsl:text>
            <xsl:text>with DDS.DataWriter;&nl;</xsl:text>
            <xsl:text>with DDS.DataWriter_Impl;&nl;</xsl:text>
            <xsl:text>with </xsl:text>
            <xsl:value-of select="$typePackageName"/>
            <xsl:text>; use </xsl:text>
            <xsl:value-of select="$typePackageName"/>
            <xsl:text>;&nl;</xsl:text>

            <xsl:apply-templates select="/specification/directive[@kind = 'copy-ada-begin']|
                                         /specification/directive[@kind = 'copy-ada-declaration-begin']"/>

            <xsl:text>pragma Warnings (On);&nl;</xsl:text>

            <xsl:variable name="packageName">
                <xsl:value-of select="concat($newContainerNamespace,'.',@name,'_DataWriter')"/>
            </xsl:variable>

            <xsl:value-of select="concat('package ',$packageName,' is')"/>
            <xsl:text>&nl;&nl;</xsl:text>

            <xsl:text>   type Ref is new Standard.DDS.DataWriter_Impl.Ref with null record;&nl;</xsl:text>
            <xsl:text>   type Ref_Access is access all Ref'Class;&nl;&nl;</xsl:text>

            <!-- Register_Instance -->
            <xsl:text>   function Register_Instance&nl;</xsl:text>
            <xsl:text>     (This          : not null access Ref;</xsl:text>
            <xsl:text>      Instance_Data : not null </xsl:text>
            <xsl:value-of select="@name"/><xsl:text>_Access)&nl;</xsl:text>
            <xsl:text>      return Standard.DDS.InstanceHandle_T;&nl;&nl;</xsl:text>

            <!-- Register_Instance_W_Timestamp -->
            <xsl:text>   function Register_Instance_W_Timestamp&nl;</xsl:text>
            <xsl:text>     (This             : not null access Ref;</xsl:text>
            <xsl:text>      Instance_Data    : not null </xsl:text>
            <xsl:value-of select="@name"/><xsl:text>_Access;&nl;</xsl:text>
            <xsl:text>      Source_Timestamp : in Standard.DDS.Time_T)&nl;</xsl:text>
            <xsl:text>      return Standard.DDS.InstanceHandle_T;&nl;&nl;</xsl:text>

            <!-- Unregister_Instance -->
            <xsl:text>   procedure Unregister_Instance&nl;</xsl:text>
            <xsl:text>     (This          : not null access Ref;</xsl:text>
            <xsl:text>      Instance_Data : not null </xsl:text>
            <xsl:value-of select="@name"/><xsl:text>_Access;&nl;</xsl:text>
            <xsl:text>      Handle        : in Standard.DDS.InstanceHandle_T);&nl;&nl;</xsl:text>

            <!-- Unregister_Instance_W_Timestamp -->
            <xsl:text>   procedure Unregister_Instance_W_Timestamp&nl;</xsl:text>
            <xsl:text>     (This             : not null access Ref;</xsl:text>
            <xsl:text>      Instance_Data    : not null </xsl:text>
            <xsl:value-of select="@name"/><xsl:text>_Access;&nl;</xsl:text>
            <xsl:text>      Handle           : in Standard.DDS.InstanceHandle_T;&nl;</xsl:text>
            <xsl:text>      Source_Timestamp : in Standard.DDS.Time_T);&nl;&nl;</xsl:text>

            <!-- Write -->
            <xsl:text>   procedure Write&nl;</xsl:text>
            <xsl:text>     (This          : not null access Ref;</xsl:text>
            <xsl:text>      Instance_Data : not null </xsl:text>
            <xsl:value-of select="@name"/><xsl:text>_Access;&nl;</xsl:text>
            <xsl:text>      Handle        : in Standard.DDS.InstanceHandle_T_Access);&nl;&nl;</xsl:text>

            <!-- Write_W_Timestamp -->
            <xsl:text>   procedure Write_W_Timestamp&nl;</xsl:text>
            <xsl:text>     (This          : not null access Ref;</xsl:text>
            <xsl:text>      Instance_Data    : not null </xsl:text>
            <xsl:value-of select="@name"/><xsl:text>_Access;&nl;</xsl:text>
            <xsl:text>      Handle           : in Standard.DDS.InstanceHandle_T_Access;&nl;</xsl:text>
            <xsl:text>      Source_Timestamp : in Standard.DDS.Time_T);&nl;&nl;</xsl:text>

            <!-- Dispose -->
            <xsl:text>   procedure Dispose&nl;</xsl:text>
            <xsl:text>     (This            : not null access Ref;</xsl:text>
            <xsl:text>      Instance_Data   : not null </xsl:text>
            <xsl:value-of select="@name"/><xsl:text>_Access;&nl;</xsl:text>
            <xsl:text>      Instance_Handle : in Standard.DDS.InstanceHandle_T);&nl;&nl;</xsl:text>

            <!-- Dispose_W_Timestamp -->
            <xsl:text>   procedure Dispose_W_Timestamp&nl;</xsl:text>
            <xsl:text>     (This             : not null access Ref;</xsl:text>
            <xsl:text>      Instance_Data    : not null </xsl:text>
            <xsl:value-of select="@name"/><xsl:text>_Access;&nl;</xsl:text>
            <xsl:text>      Instance_Handle  : in Standard.DDS.InstanceHandle_T;&nl;</xsl:text>
            <xsl:text>      Source_Timestamp : in Standard.DDS.Time_T);&nl;&nl;</xsl:text>

            <!-- Get_Key_Value -->
            <xsl:text>   procedure Get_Key_Value&nl;</xsl:text>
            <xsl:text>     (This       : not null access Ref;</xsl:text>
            <xsl:text>      Key_Holder : not null </xsl:text>
            <xsl:value-of select="@name"/><xsl:text>_Access;&nl;</xsl:text>
            <xsl:text>      Handle     : in Standard.DDS.InstanceHandle_T);&nl;&nl;</xsl:text>

            <!-- Lookup_Instance -->
            <xsl:text>   function Lookup_Instance&nl;</xsl:text>
            <xsl:text>     (This       : not null access Ref;</xsl:text>
            <xsl:text>      Key_Holder : not null </xsl:text>
            <xsl:value-of select="@name"/><xsl:text>_Access) return Standard.DDS.InstanceHandle_T;&nl;&nl;</xsl:text>

            <!-- Internal -->
            <xsl:text>   function CreateTypedI return Standard.DDS.DataWriter.Ref_Access;&nl;&nl;</xsl:text>  

            <xsl:text>   procedure DestroyTypedI&nl;</xsl:text> 
            <xsl:text>     (Writer : in out Standard.DDS.DataWriter.Ref_Access);&nl;&nl;</xsl:text> 

            <xsl:value-of select="concat('end ',$packageName,';')"/>
            <xsl:text>&nl;</xsl:text>
        </file>

        <!-- =================================================== -->
        <!--                                                     -->
        <!--                DataReader                           -->
        <!--                                                     -->
        <!-- =================================================== -->

        <xsl:variable name="sourceFile">
            <xsl:call-template name="obtainSourceFileName">
                <xsl:with-param name="containerNamespace"
                                select="$newContainerNamespace"/>
                <xsl:with-param name="typeName"
                                select="concat(@name, '_datareader')"/>
                <xsl:with-param name="fileExt" select="'ads'"/>
            </xsl:call-template>
        </xsl:variable>

        <file name="{$sourceFile}">
            <xsl:call-template name="printAutoGeneratedWarning"/>
            <xsl:text>pragma Warnings (Off); --  Since this is autogenerated code.&nl;&nl;</xsl:text>

            <xsl:text>with DDS.DataReader;&nl;</xsl:text>
            <xsl:text>with DDS.DataReader_Impl;&nl;</xsl:text>
            <xsl:text>with DDS.ReadCondition;&nl;&nl;</xsl:text>

            <xsl:text>with </xsl:text>
            <xsl:value-of select="$typePackageName"/>
            <xsl:text>; use </xsl:text>
            <xsl:value-of select="$typePackageName"/>
            <xsl:text>;&nl;</xsl:text>

            <xsl:apply-templates select="/specification/directive[@kind = 'copy-ada-begin']|
                                         /specification/directive[@kind = 'copy-ada-declaration-begin']"/>

            <xsl:text>pragma Warnings (On);&nl;</xsl:text>

            <xsl:variable name="packageName">
                <xsl:value-of select="concat($newContainerNamespace,'.',@name,'_DataReader')"/>
            </xsl:variable>

            <xsl:value-of select="concat('package ',$packageName,' is')"/>
            <xsl:text>&nl;&nl;</xsl:text>

            <xsl:text>   type Ref is new Standard.DDS.DataReader_Impl.Ref with null record;&nl;</xsl:text>
            <xsl:text>   type Ref_Access is access all Ref'Class;&nl;&nl;</xsl:text>

            <!-- Read -->
            <xsl:text>   procedure Read&nl;</xsl:text>
            <xsl:text>     (This            : not null access Ref;&nl;</xsl:text>
            <xsl:text>      Received_Data   : not null access </xsl:text>
            <xsl:value-of select="@name"/><xsl:text>_Seq.Sequence;&nl;</xsl:text>
            <xsl:text>      Info_Seq        : not null access Standard.DDS.SampleInfo_Seq.Sequence;&nl;</xsl:text>
            <xsl:text>      Max_Samples     : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;&nl;</xsl:text>
            <xsl:text>      Sample_States   : in Standard.DDS.SampleStateMask := Standard.DDS.ANY_SAMPLE_STATE;&nl;</xsl:text>
            <xsl:text>      View_States     : in Standard.DDS.ViewStateMask := Standard.DDS.ANY_VIEW_STATE;&nl;</xsl:text>
            <xsl:text>      Instance_States : in Standard.DDS.InstanceStateMask := Standard.DDS.ANY_INSTANCE_STATE);&nl;&nl;</xsl:text>

            <!-- Take -->
            <xsl:text>   procedure Take&nl;</xsl:text>
            <xsl:text>     (This            : not null access Ref;&nl;</xsl:text>
            <xsl:text>      Received_Data   : not null access </xsl:text>
            <xsl:value-of select="@name"/><xsl:text>_Seq.Sequence;&nl;</xsl:text>
            <xsl:text>      Info_Seq        : not null access Standard.DDS.SampleInfo_Seq.Sequence;&nl;</xsl:text>
            <xsl:text>      Max_Samples     : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;&nl;</xsl:text>
            <xsl:text>      Sample_States   : in Standard.DDS.SampleStateMask := Standard.DDS.ANY_SAMPLE_STATE;&nl;</xsl:text>
            <xsl:text>      View_States     : in Standard.DDS.ViewStateMask := Standard.DDS.ANY_VIEW_STATE;&nl;</xsl:text>
            <xsl:text>      Instance_States : in Standard.DDS.InstanceStateMask := Standard.DDS.ANY_INSTANCE_STATE);&nl;&nl;</xsl:text>

            <!-- Read_W_Condition -->
            <xsl:text>   procedure Read_W_Condition&nl;</xsl:text>
            <xsl:text>     (This          : not null access Ref;&nl;</xsl:text>
            <xsl:text>      Received_Data : not null access </xsl:text>
            <xsl:value-of select="@name"/><xsl:text>_Seq.Sequence;&nl;</xsl:text>
            <xsl:text>      Info_Seq      : not null access Standard.DDS.SampleInfo_Seq.Sequence;&nl;</xsl:text>
            <xsl:text>      Max_Samples   : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;&nl;</xsl:text>
            <xsl:text>      Condition     : access Standard.DDS.ReadCondition.Ref'Class);&nl;&nl;</xsl:text>

            <!-- Take_W_Condition -->
            <xsl:text>   procedure Take_W_Condition&nl;</xsl:text>
            <xsl:text>     (This          : not null access Ref;&nl;</xsl:text>
            <xsl:text>      Received_Data : not null access </xsl:text>
            <xsl:value-of select="@name"/><xsl:text>_Seq.Sequence;&nl;</xsl:text>
            <xsl:text>      Info_Seq      : not null access Standard.DDS.SampleInfo_Seq.Sequence;&nl;</xsl:text>
            <xsl:text>      Max_Samples   : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;&nl;</xsl:text>
            <xsl:text>      Condition     : access Standard.DDS.ReadCondition.Ref'Class);&nl;&nl;</xsl:text>

            <!-- Read_Next_Sample -->
            <xsl:text>   procedure Read_Next_Sample&nl;</xsl:text>
            <xsl:text>     (This          : not null access Ref;&nl;</xsl:text>
            <xsl:text>      Received_Data : not null </xsl:text>
            <xsl:value-of select="@name"/><xsl:text>_Access;&nl;</xsl:text>
            <xsl:text>      Sample_Info   : not null access Standard.DDS.SampleInfo);&nl;&nl;</xsl:text>

            <!-- Take_Next_Sample -->
            <xsl:text>   procedure Take_Next_Sample&nl;</xsl:text>
            <xsl:text>     (This          : not null access Ref;&nl;</xsl:text>
            <xsl:text>      Received_Data : not null </xsl:text>
            <xsl:value-of select="@name"/><xsl:text>_Access;&nl;</xsl:text>
            <xsl:text>      Sample_Info   : not null access Standard.DDS.SampleInfo);&nl;&nl;</xsl:text>

            <!-- Read_Instance -->
            <xsl:text>   procedure Read_Instance&nl;</xsl:text>
            <xsl:text>     (This            : not null access Ref;&nl;</xsl:text>
            <xsl:text>      Received_Data   : not null access </xsl:text>
            <xsl:value-of select="@name"/><xsl:text>_Seq.Sequence;&nl;</xsl:text>
            <xsl:text>      Info_Seq        : not null access Standard.DDS.SampleInfo_Seq.Sequence;&nl;</xsl:text>
            <xsl:text>      Max_Samples     : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;&nl;</xsl:text>
            <xsl:text>      A_Handle        : access constant Standard.DDS.InstanceHandle_T;&nl;</xsl:text>
            <xsl:text>      Sample_States   : in Standard.DDS.SampleStateMask := Standard.DDS.ANY_SAMPLE_STATE;&nl;</xsl:text>
            <xsl:text>      View_States     : in Standard.DDS.ViewStateMask := Standard.DDS.ANY_VIEW_STATE;&nl;</xsl:text>
            <xsl:text>      Instance_States : in Standard.DDS.InstanceStateMask := Standard.DDS.ANY_INSTANCE_STATE);&nl;&nl;</xsl:text>

            <!-- Take_Instance -->
            <xsl:text>   procedure Take_Instance&nl;</xsl:text>
            <xsl:text>     (This            : not null access Ref;&nl;</xsl:text>
            <xsl:text>      Received_Data   : not null access </xsl:text>
            <xsl:value-of select="@name"/><xsl:text>_Seq.Sequence;&nl;</xsl:text>
            <xsl:text>      Info_Seq        : not null access Standard.DDS.SampleInfo_Seq.Sequence;&nl;</xsl:text>
            <xsl:text>      Max_Samples     : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;&nl;</xsl:text>
            <xsl:text>      A_Handle        : access constant Standard.DDS.InstanceHandle_T;&nl;</xsl:text>
            <xsl:text>      Sample_States   : in Standard.DDS.SampleStateMask := Standard.DDS.ANY_SAMPLE_STATE;&nl;</xsl:text>
            <xsl:text>      View_States     : in Standard.DDS.ViewStateMask := Standard.DDS.ANY_VIEW_STATE;&nl;</xsl:text>
            <xsl:text>      Instance_States : in Standard.DDS.InstanceStateMask := Standard.DDS.ANY_INSTANCE_STATE);&nl;&nl;</xsl:text>

            <!-- Read_Instance_W_Condition -->
            <xsl:text>   procedure Read_Instance_W_Condition&nl;</xsl:text>
            <xsl:text>     (This            : not null access Ref;&nl;</xsl:text>
            <xsl:text>      Received_Data   : not null access </xsl:text>
            <xsl:value-of select="@name"/><xsl:text>_Seq.Sequence;&nl;</xsl:text>
            <xsl:text>      Info_Seq        : not null access Standard.DDS.SampleInfo_Seq.Sequence;&nl;</xsl:text>
            <xsl:text>      Max_Samples     : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;&nl;</xsl:text>
            <xsl:text>      Previous_Handle : access constant Standard.DDS.InstanceHandle_T;&nl;</xsl:text>
            <xsl:text>      Condition       : Standard.DDS.ReadCondition.Ref_Access);&nl;</xsl:text>

            <!-- Take_Instance_W_Condition -->
            <xsl:text>   procedure Take_Instance_W_Condition&nl;</xsl:text>
            <xsl:text>     (This            : not null access Ref;&nl;</xsl:text>
            <xsl:text>      Received_Data   : not null access </xsl:text>
            <xsl:value-of select="@name"/><xsl:text>_Seq.Sequence;&nl;</xsl:text>
            <xsl:text>      Info_Seq        : not null access Standard.DDS.SampleInfo_Seq.Sequence;&nl;</xsl:text>
            <xsl:text>      Max_Samples     : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;&nl;</xsl:text>
            <xsl:text>      Previous_Handle : access constant Standard.DDS.InstanceHandle_T;&nl;</xsl:text>
            <xsl:text>      Condition       : Standard.DDS.ReadCondition.Ref_Access);&nl;</xsl:text>



            <!-- Read_Next_Instance -->
            <xsl:text>   procedure Read_Next_Instance&nl;</xsl:text>
            <xsl:text>     (This            : not null access Ref;&nl;</xsl:text>
            <xsl:text>      Received_Data   : not null access </xsl:text>
            <xsl:value-of select="@name"/><xsl:text>_Seq.Sequence;&nl;</xsl:text>
            <xsl:text>      Info_Seq        : not null access Standard.DDS.SampleInfo_Seq.Sequence;&nl;</xsl:text>
            <xsl:text>      Max_Samples     : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;&nl;</xsl:text>
            <xsl:text>      Previous_Handle : access constant Standard.DDS.InstanceHandle_T;&nl;</xsl:text>
            <xsl:text>      Sample_States   : in Standard.DDS.SampleStateMask := Standard.DDS.ANY_SAMPLE_STATE;&nl;</xsl:text>
            <xsl:text>      View_States     : in Standard.DDS.ViewStateMask := Standard.DDS.ANY_VIEW_STATE;&nl;</xsl:text>
            <xsl:text>      Instance_States : in Standard.DDS.InstanceStateMask := Standard.DDS.ANY_INSTANCE_STATE);&nl;&nl;</xsl:text>

            <!-- Take_Next_Instance -->
            <xsl:text>   procedure Take_Next_Instance&nl;</xsl:text>
            <xsl:text>     (This            : not null access Ref;&nl;</xsl:text>
            <xsl:text>      Received_Data   : not null access </xsl:text>
            <xsl:value-of select="@name"/><xsl:text>_Seq.Sequence;&nl;</xsl:text>
            <xsl:text>      Info_Seq        : not null access Standard.DDS.SampleInfo_Seq.Sequence;&nl;</xsl:text>
            <xsl:text>      Max_Samples     : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;&nl;</xsl:text>
            <xsl:text>      Previous_Handle : access constant Standard.DDS.InstanceHandle_T;&nl;</xsl:text>
            <xsl:text>      Sample_States   : in Standard.DDS.SampleStateMask := Standard.DDS.ANY_SAMPLE_STATE;&nl;</xsl:text>
            <xsl:text>      View_States     : in Standard.DDS.ViewStateMask := Standard.DDS.ANY_VIEW_STATE;&nl;</xsl:text>
            <xsl:text>      Instance_States : in Standard.DDS.InstanceStateMask := Standard.DDS.ANY_INSTANCE_STATE);&nl;&nl;</xsl:text>

            <!-- Read_Next_Instance_W_Condition -->
            <xsl:text>   procedure Read_Next_Instance_W_Condition&nl;</xsl:text>
            <xsl:text>     (This            : not null access Ref;&nl;</xsl:text>
            <xsl:text>      Received_Data   : not null access </xsl:text>
            <xsl:value-of select="@name"/><xsl:text>_Seq.Sequence;&nl;</xsl:text>
            <xsl:text>      Info_Seq        : not null access Standard.DDS.SampleInfo_Seq.Sequence;&nl;</xsl:text>
            <xsl:text>      Max_Samples     : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;&nl;</xsl:text>
            <xsl:text>      Previous_Handle : access constant Standard.DDS.InstanceHandle_T;&nl;</xsl:text>
            <xsl:text>      Condition       : Standard.DDS.ReadCondition.Ref_Access);&nl;&nl;</xsl:text>

            <!-- Take_Next_Instance_W_Condition -->
            <xsl:text>   procedure Take_Next_Instance_W_Condition&nl;</xsl:text>
            <xsl:text>     (This            : not null access Ref;&nl;</xsl:text>
            <xsl:text>      Received_Data   : not null access </xsl:text>
            <xsl:value-of select="@name"/><xsl:text>_Seq.Sequence;&nl;</xsl:text>
            <xsl:text>      Info_Seq        : not null access Standard.DDS.SampleInfo_Seq.Sequence;&nl;</xsl:text>
            <xsl:text>      Max_Samples     : in Standard.DDS.Long := Standard.DDS.LENGTH_UNLIMITED;&nl;</xsl:text>
            <xsl:text>      Previous_Handle : access constant Standard.DDS.InstanceHandle_T;&nl;</xsl:text>
            <xsl:text>      Condition       : Standard.DDS.ReadCondition.Ref_Access);&nl;&nl;</xsl:text>

            <!-- Get_Key_Value -->
            <xsl:text>   procedure Get_Key_Value&nl;</xsl:text>
            <xsl:text>     (This       : not null access Ref;&nl;</xsl:text>
            <xsl:text>      Key_Holder : not null </xsl:text>
            <xsl:value-of select="@name"/><xsl:text>_Access;&nl;</xsl:text>
            <xsl:text>      Handle     : access constant Standard.DDS.InstanceHandle_T);&nl;&nl;</xsl:text>

            <!-- Lookup_Instance -->
            <xsl:text>   function Lookup_Instance&nl;</xsl:text>
            <xsl:text>     (This       : not null access Ref;&nl;</xsl:text>
            <xsl:text>      Key_Holder : not null </xsl:text>
            <xsl:value-of select="@name"/><xsl:text>_Access) return Standard.DDS.InstanceHandle_T;&nl;&nl;</xsl:text>

            <!-- Return_Loan -->
            <xsl:text>   procedure Return_Loan&nl;</xsl:text>
            <xsl:text>     (This          : not null access Ref;&nl;</xsl:text>
            <xsl:text>      Received_Data : not null access </xsl:text>
            <xsl:value-of select="@name"/><xsl:text>_Seq.Sequence;&nl;</xsl:text>
            <xsl:text>      Info_Seq      : not null access Standard.DDS.SampleInfo_Seq.Sequence);&nl;&nl;</xsl:text>

            <!-- Internal -->
            <xsl:text>   function CreateTypedI return Standard.DDS.DataReader.Ref_Access;&nl;&nl;</xsl:text>  

            <xsl:text>   procedure DestroyTypedI&nl;</xsl:text> 
            <xsl:text>     (Reader : in out Standard.DDS.DataReader.Ref_Access);&nl;&nl;</xsl:text> 

            <xsl:value-of select="concat('end ',$packageName,';')"/>
            <xsl:text>&nl;</xsl:text>

        </file>

    </xsl:if> <!-- if topLevel -->

</xsl:template>

<!--
Process directives
-->
<xsl:template match="directive[@kind = 'copy-declaration' or @kind = 'copy-ada-declaration' or @kind = 'copy-ada-declaration-begin']">
    <xsl:text>&nl;</xsl:text><xsl:value-of select="text()"/><xsl:text>&nl;</xsl:text>
</xsl:template>

<xsl:template match="directive[@kind = 'copy-declaration' or @kind = 'copy-ada-declaration' or @kind = 'copy-ada-declaration-begin']"
              mode="code-generation">
    <xsl:text>&nl;</xsl:text><xsl:value-of select="text()"/><xsl:text>&nl;</xsl:text>
</xsl:template>

</xsl:stylesheet>
